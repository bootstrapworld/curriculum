export MAKE_DIR := lib/maker/

export TOPDIR := $(realpath .)

export PROGDIR := $(TOPDIR)/distribution/.prog-$(NATLANG)

export MAKE_ERR_LOG := $(TOPDIR)/distribution/.make.error.log

export ALL_PROGLANGS := wescheme pyret codap spreadsheets none

# batch input for (Racket) preprocessor (.adoc -> .asc)

export ADOCABLES_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adocables.rkt

# batch input for Asciidoctor (.asc -> .s?html)

export ADOC_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-asciidoctor

# input for the (Lua) postprocessor

export ADOC_POSTPROC_LESSONPLAN_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-lessonplan.lua

export ADOC_POSTPROC_PATHWAYNARRATIVE_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-pathwaynarrative.lua

export ADOC_POSTPROC_PATHWAYRESOURCE_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-pathwayresource.lua

export ADOC_POSTPROC_PATHWAYINDEPENDENT_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-pathwayindependent.lua

export ADOC_POSTPROC_WORKBOOKPAGE_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-workbookpage.lua

# input for html2pdf.js

export PUPPETEER_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-puppeteer.json

#

export SETUP_PATHWAYINDEPENDENT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-pathwayindependent.lua

export SETUP_WORKBOOKPAGE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-workbookpage.lua

export SETUP_LESSONPLAN := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-lessonplan.lua

export SETUP_PATHWAYRESOURCE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-pathwayresource.lua

export SETUP_PATHWAYNARRATIVE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-pathwaynarrative.lua


#

export SETUP_PATHWAYINDEPENDENT_PDF := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-pathwayindependent-pdf.lua

export SETUP_WORKBOOKPAGE_PDF := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-workbookpage-pdf.lua

export SETUP_LESSONPLAN_PDF := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-lessonplan-pdf.lua

export SETUP_PATHWAYRESOURCE_PDF := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-pathwayresource-pdf.lua

export SETUP_CONTRACTS_PDF := $(TOPDIR)/distribution/$(NATLANG)/.cached/.setup-contracts-pdf.lua

#

export COURSE :=

export COURSES_LIST_FILE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.courses.lua

export LESSONS_LIST_FILE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.lessons.txt.kp

export RELEVANT_LESSONS_LIST_FILE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.relevant-lessons.txt.kp

export IGNORABLE_DIRECTORIES := $(TOPDIR)/distribution/$(NATLANG)/.cached/.ignorable-directories.txt.kp

# export SED := $(shell if which ls|grep -q .; then echo gsed; else echo sed; fi)

export SED := sed
export CP := cp

export EMPTYCHAR :=
export COMMACHAR := ,
export SPACECHAR := $(EMPTYCHAR) $(EMPTYCHAR)

export BOOK :=
export LINKCHECK :=

export SCRATCHFILE := $(TOPDIR)/distribution/.scratch

export DEBUGADOC :=

# "other" directories that shd be only minimally processed (no HTML/PDF)

export OTHERDIRS := /\(fragments\|xtra\|xtras\)/

export NUMCORES := $(shell getconf _NPROCESSORS_ONLN)

all: phases coverage

phases:
	@if test ! -d distribution; then mkdir -p distribution; touch $(SCRATCHFILE); fi
	@mkdir -p distribution/$(NATLANG)/.cached
	@mkdir -p distribution/$(NATLANG)/lib
	@echo ➤ Update distribution directory
	@$(MAKE) --no-print-directory -f $(MAKE_DIR)Makefile.phase1
	@echo ➤ Find the files that need updating
	@$(MAKE) --no-print-directory -f $(MAKE_DIR)Makefile.phase2

###############################################################################

book:
	@$(MAKE) BOOK=yes

###############################################################################

linkcheck:
	@$(MAKE) LINKCHECK=yes

###############################################################################

clean:
	@echo ➤ Clean distribution directory
	@rm -fr $(TOPDIR)/distribution

###############################################################################

debug:
	@$(MAKE) force DEBUGADOC=yes

###############################################################################

force:
	rm -fr $(TOPDIR)/distribution
	@$(MAKE)

###############################################################################

deploy:
	rm -fr $(TOPDIR)/distribution
	$(MAKE) book
	NATLANG=en-us node lib/maker/screenshot-elts.js
	$(MAKE_DIR)deploy-to-hostinger.sh

quick-deploy:
	$(MAKE_DIR)deploy-to-hostinger.sh

###############################################################################

csv:
	$(MAKE)
	$(TOPDIR)/lib/make-wp-csv.rkt

###############################################################################

coverage: coverage-report.html

coverage-report.html: $(alignment-dictionaries)
	$(MAKE_DIR)make-coverage-report.lua coverage-report.adoc
	asciidoctor -a linkcss -a stylesheet=lib/asciidoctor.css coverage-report.adoc
	@$(SED) -i -e 's/<p><span class="unused">/<p class="unused"><span>/g' $@

###############################################################################

help:
	@echo "  make              -- updates distribution/, HTML only"
	@echo "  make book         -- updates PDFs and workbooks too"
	@echo "  make linkcheck    -- additionally verifies all links"
	@echo "  make force [book] -- builds from scratch;"
	@echo "                       equivalent to:    make clean; make [book]"
	@echo "  make debug        -- builds from scratch, running Asciidoctor"
	@echo "                       individually on each file to help catch errors;"
	@echo "                       equivalent to:    make clean; make DEBUGADOC=yes"
	@echo "  make book COURSE=algebra-pyret"
	@echo "                    -- makes PDFs only for algebra-pyret and its lessons"
	@echo "  make book COURSE=algebra-pyret,data-science"
	@echo "                    -- COURSE takes comma-separated list of pathways"
	@echo "  make NATLANG=es-mx"
	@echo "                    -- builds for natural language es-mx (default: en-us)"
	@echo "  make DEBUGADOC=yes"
	@echo "                    -- runs Asciidoctor individually on each file to help catch errors"
	@echo
	@echo To rebuild a particular lesson or pathway in the distribution/
	@echo delete its folder and issue make again.
	@echo
	@echo The following make invocations do not build
	@echo
	@echo "  make clean        -- removes distribution/ so next make builds from scratch"
	@echo "  make deploy       -- deploys existing distribution/ to webhost"
	@echo "  make help         -- displays (this) help"
	@echo "  make csv          -- make CSV files for WordPress"
