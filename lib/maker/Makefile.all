# last modified 2023-03-24

export MAKE_DIR := lib/maker/

export TOPDIR := $(realpath .)

export PROGDIR := $(TOPDIR)/distribution/.prog-$(NATLANG)

export ALL_PROGLANGS := wescheme pyret codap spreadsheets none

# batch input for (Racket) preprocessor (.adoc -> .asc)

export ADOCABLES_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adocables.rkt

# batch input for Asciidoctor (.asc -> .s?html)

export ADOC_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-asciidoctor

# input for the (Lua) postprocessor

export ADOC_POSTPROC_LESSONPLAN_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-lessonplan.lua

export ADOC_POSTPROC_NARRATIVEAUX_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-narrativeaux.lua

export ADOC_POSTPROC_NARRATIVE_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-narrative.lua

export ADOC_POSTPROC_RESOURCES_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-resources.lua

export ADOC_POSTPROC_PWYINDEP_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-pwyindep.lua

export ADOC_POSTPROC_WORKBOOKPAGE_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-adoc-postproc-workbookpage.lua

# input for html2pdf.js

export PUPPETEER_INPUT := $(TOPDIR)/distribution/$(NATLANG)/.cached/.do-puppeteer.json

#

export COURSES_LIST_FILE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.courses.lua

export LESSONS_LIST_FILE := $(TOPDIR)/distribution/$(NATLANG)/.cached/.lessons.txt.kp

export SED := sed
export CP := cp

export NUMCORES := $(shell getconf _NPROCESSORS_ONLN)

all: phases dictionaries coverage

phases:
	@mkdir -p distribution/$(NATLANG)/.cached
	@mkdir -p distribution/$(NATLANG)/lib
	$(MAKE) --no-print-directory -f $(MAKE_DIR)Makefile.phase1
	$(MAKE) --no-print-directory -f $(MAKE_DIR)Makefile.phase2
	$(MAKE) --no-print-directory -f $(MAKE_DIR)Makefile.phase2 dependency-graph

###############################################################################

book:
	@BOOK=yes $(MAKE)

###############################################################################

linkcheck:
	@LINKCHECK=yes $(MAKE)

###############################################################################

clean:
	rm -fr $(TOPDIR)/distribution

###############################################################################

deploy:
	rm -fr $(TOPDIR)/distribution
	$(MAKE) book
	$(MAKE_DIR)deploy-to-hostinger.sh

quick-deploy:
	$(MAKE_DIR)deploy-to-hostinger.sh

###############################################################################

dictionaries: lib/dictionaries.js

alignment-dictionaries := $(wildcard \
	shared/langs/en-us/standards/*.rkt \
	shared/langs/en-us/textbooks/*.rkt \
	shared/langs/en-us/practices/*.rkt)

lib/dictionaries.js: $(alignment-dictionaries)
	$(MAKE_DIR)make-json-dict.lua $@

###############################################################################

coverage: coverage-report.html

coverage-report.html: $(alignment-dictionaries)
	$(MAKE_DIR)make-coverage-report.lua coverage-report.adoc
	asciidoctor -a linkcss -a stylesheet=lib/asciidoctor.css coverage-report.adoc
	@$(SED) -i -e 's/<p><span class="unused">/<p class="unused"><span>/g' $@

###############################################################################

help:
	@echo The following make calls build
	@echo
	@echo "  make              -- updates distribution/, HTML only"
	@echo "  make book         -- updates PDFs and workbooks too"
	@echo "  make linkcheck    -- additionally verifies all links"
	@echo
	@echo The following do not build
	@echo
	@echo "  make clean        -- removes distribution/ so next make builds from scratch"
	@echo "  make deploy       -- deploys existing distribution/ to webhost"
	@echo "  make help         -- displays (this) help"

