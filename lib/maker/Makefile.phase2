include $(MAKE_DIR)utils.mk

phase2: specials verifylinks images tocs books

##########################################################################

pathway-independent-adoc-files-1 := $(wildcard \
	distribution/$(NATLANG)/*.adoc \
	distribution/$(NATLANG)/*/*.adoc \
	distribution/$(NATLANG)/*/*/*.adoc \
	)

pathway-independent-adoc-files := $(filter-out \
	distribution/$(NATLANG)/courses/% \
	distribution/$(NATLANG)/lessons/% \
	distribution/$(NATLANG)/extlib/%,$(pathway-independent-adoc-files-1))

pathway-independent-asc-files := $(foreach adocf,$(pathway-independent-adoc-files),$(call asc-file,$(adocf)))

pathway-independent-pdf-files := $(foreach adocf,$(pathway-independent-adoc-files),$(call pdf-file,$(adocf)))

ifeq "$(BOOK)" ""
	pathway-independent-files := $(pathway-independent-asc-files)
else
	pathway-independent-files := $(pathway-independent-pdf-files)
endif

build-pathway-independent: $(pathway-independent-files)

define make-build-pathway-independent-rule
$(call asc-file,$1): $1
	@#echo build-pathway-independent: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_PATHWAYINDEPENDENT)

endef

$(eval $(foreach adocf,$(pathway-independent-adoc-files),$(call make-build-pathway-independent-rule,$(adocf))))

define make-build-pathway-independent-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo build-pathway-independent-pdf: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_PATHWAYINDEPENDENT_PDF)

endef

$(if $(BOOK),\
$(eval $(foreach adocf,$(pathway-independent-adoc-files),$(call make-build-pathway-independent-pdf-rule,$(adocf)))),)

###############################################################################

# relevant-lessons := $(foreach \
# 	lesson-name,$(shell \
# 	cat $(RELEVANT_LESSONS_INPUT)),distribution/$(NATLANG)/lessons/$(lesson-name))

all-lessons := $(wildcard distribution/$(NATLANG)/lessons/*)

ifndef COURSE
	relevant-lessons := $(wildcard distribution/$(NATLANG)/lessons/*)
else
	relevant-lessons := $(foreach lesson-name,$(shell cat $(RELEVANT_LESSONS_LIST_FILE)),distribution/$(NATLANG)/lessons/$(lesson-name))
endif

# shd use recursive wildcard if we can find one

all-adoc-files := $(foreach \
	lesson,$(all-lessons),$(wildcard \
	$(lesson)/*/*/*/*.adoc \
	$(lesson)/*/*/*.adoc \
	$(lesson)/*/*.adoc \
	))

relevant-adoc-files := $(foreach \
	lesson,$(relevant-lessons),$(wildcard \
	$(lesson)/*/*/*/*.adoc \
	$(lesson)/*/*/*.adoc \
	$(lesson)/*/*.adoc \
	))

relevant-asc-files := $(foreach \
	adocf,$(all-adoc-files),$(call asc-file,$(adocf)))

relevant-pdf-files := $(foreach \
	adocf,$(relevant-adoc-files),$(call pdf-file,$(adocf)))

ifeq "$(BOOK)" ""
	workbook-pages := $(relevant-asc-files)
else
	workbook-pages := $(relevant-asc-files) $(relevant-pdf-files)
endif

build-workbook-pages: $(workbook-pages)

define make-build-workbook-page-rule
$(call asc-file,$1): $1
	@#echo building workbook-page-asc: $$@ from $$<
	@echo \"$$<\", >> $(SETUP_WORKBOOKPAGE)

endef

$(eval $(foreach adocf,$(all-adoc-files),$(call make-build-workbook-page-rule,$(adocf))))

define make-build-workbook-page-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo building workbook-page-pdf: $$@ from $$<
	@echo \"$$<\", >> $(SETUP_WORKBOOKPAGE_PDF)

endef

$(if $(BOOK),\
$(eval $(foreach adocf,$(relevant-adoc-files),$(call make-build-workbook-page-pdf-rule,$(adocf)))),)

#########################################################################

all-lesson-plan-adoc-files := $(wildcard distribution/$(NATLANG)/lessons/*/index.adoc)

relevant-lesson-plan-adoc-files := $(foreach lesson,$(relevant-lessons),$(lesson)/index.adoc)

relevant-lesson-plan-adoc-files := $(foreach \
	lesson,$(relevant-lessons),$(wildcard \
	$(lesson)/index.adoc))

relevant-lesson-plan-asc-files := $(foreach \
	adocf,$(all-lesson-plan-adoc-files),$(call asc-file,$(adocf)))

relevant-lesson-plan-pdf-files := $(foreach \
	adocf,$(relevant-lesson-plan-adoc-files),$(call pdf-file,$(adocf)))

ifeq "$(BOOK)" ""
	lesson-plan-files := $(relevant-lesson-plan-asc-files)
else
	lesson-plan-files := $(relevant-lesson-plan-asc-files) $(relevant-lesson-plan-pdf-files)
endif

build-lesson-plans: $(lesson-plan-files)

define make-build-lesson-plan-rule
$(call asc-file,$1): $1
	@#echo build-lesson-plan-asc: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_LESSONPLAN)

endef

$(eval $(foreach adocf,$(all-lesson-plan-adoc-files),$(call make-build-lesson-plan-rule,$(adocf))))

define make-build-lesson-plan-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo build-lesson-plan-pdf: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_LESSONPLAN_PDF)

endef

$(if $(BOOK),\
$(eval $(foreach adocf,$(relevant-lesson-plan-adoc-files),$(call make-build-lesson-plan-pdf-rule,$(adocf)))),)

###############################################################################

the-output-courses := $(foreach course-index-file,$(wildcard distribution/$(NATLANG)/courses/*/index.adoc),$(dir $(course-index-file)))

ifeq "$(BOOK)" ""
	the-course-contracts-pdfs :=
else
	the-course-contracts-pdfs := $(foreach course,$(the-output-courses),$(patsubst %,%resources/pages/Contracts.pdf,$(course)))
endif

define make-build-contracts-pdf-rule
$1: distribution/$(NATLANG)/Contracts.shtml
	@echo \"$$@\", >> $(SETUP_CONTRACTS_PDF)

endef

$(if $(BOOK),\
$(eval $(foreach contracts-pdf,$(the-course-contracts-pdfs),$(call make-build-contracts-pdf-rule,$(contracts-pdf)))),)

ifeq "$(BOOK)" ""
	all-contracts-pdf :=
else
	all-contracts-pdf := distribution/$(NATLANG)/Contracts.pdf
endif

define make-all-contracts-rule
distribution/$(NATLANG)/Contracts.pdf: distribution/$(NATLANG)/Contracts.shtml
	@echo \"$$<\", >> $(SETUP_PATHWAYINDEPENDENT_PDF)

endef

$(if $(BOOK),\
$(eval $(call make-all-contracts-rule,x)),)

build-contracts-pdfs: $(the-course-contracts-pdfs) $(all-contracts-pdf)

###############################################################################

resource-adoc-files := $(wildcard \
	distribution/$(NATLANG)/courses/*/*/*.adoc \
	distribution/$(NATLANG)/courses/*/*/*/*.adoc \
	distribution/$(NATLANG)/courses/*/*/*/*/*.adoc \
	)

resource-asc-files := $(foreach \
	adocf,$(resource-adoc-files),$(call asc-file,$(adocf)))

resource-pdf-files := $(foreach \
	adocf,$(resource-adoc-files),$(call pdf-file,$(adocf)))

ifeq "$(BOOK)" ""
	resource-files := $(resource-asc-files)
else
	resource-files := $(resource-pdf-files)
endif

build-pathway-resources: $(resource-files)

define make-build-resource-rule
$(call asc-file,$1): $1
	@#echo build-resource-asc: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_PATHWAYRESOURCE)

endef

$(eval $(foreach adocf,$(resource-adoc-files),$(call make-build-resource-rule,$(adocf))))

define make-build-resource-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo build-resource-pdf: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_PATHWAYRESOURCE_PDF)

endef

$(if $(BOOK),\
$(eval $(foreach adocf,$(resource-adoc-files),$(call make-build-resource-pdf-rule,$(adocf)))),)

########################################################################

narrative-adoc-files := $(wildcard distribution/$(NATLANG)/courses/*/index.adoc)

narrative-asc-files := $(foreach \
	adocf,$(narrative-adoc-files),$(call asc-file,$(adocf)))

build-pathway-narratives: $(narrative-asc-files)

define make-build-narrative-rule
$(call asc-file,$1): $1
	@#echo build-narrative: creating $$@ from $$<
	@echo \"$$<\", >> $(SETUP_PATHWAYNARRATIVE)

endef

$(eval $(foreach adocf,$(narrative-adoc-files),$(call make-build-narrative-rule,$(adocf))))

###############################################################################

lesson-images-json-files := $(wildcard distribution/$(NATLANG)/lessons/*/images/lesson-images.json)

images: distribution/$(NATLANG)/images.js

distribution/$(NATLANG)/images.js: $(lesson-images-json-files)
	@echo ➤ Make $@
	@$(MAKE_DIR)make-images-js.lua $@

##########################################################################

dependency-graph: distribution/$(NATLANG)/dependency-graph.js distribution/$(NATLANG)/starterFiles.js

distribution/$(NATLANG)/dependency-graph.js: $(all-lesson-plan-adoc-files)
	@echo ➤ Make $@
	@$(MAKE_DIR)make-dependency-graph.lua $@
	@$(MAKE_DIR)check-graph.sh

##########################################################################

preproc: build-pathway-independent build-workbook-pages build-lesson-plans build-pathway-resources build-pathway-narratives build-contracts-pdfs
	@echo } >> $(SETUP_PATHWAYINDEPENDENT)
	@echo } >> $(SETUP_WORKBOOKPAGE)
	@echo } >> $(SETUP_LESSONPLAN)
	@echo } >> $(SETUP_PATHWAYRESOURCE)
	@echo } >> $(SETUP_PATHWAYNARRATIVE)
	@echo } >> $(SETUP_PATHWAYINDEPENDENT_PDF)
	@echo } >> $(SETUP_WORKBOOKPAGE_PDF)
	@echo } >> $(SETUP_LESSONPLAN_PDF)
	@echo } >> $(SETUP_PATHWAYRESOURCE_PDF)
	@echo } >> $(SETUP_CONTRACTS_PDF)
	@echo } >> $(IGNORABLE_DIRECTORIES)
	@echo ➤ Set up batch files
	@$(MAKE_DIR)do-setup.lua
	@if test -s $(ADOCABLES_INPUT); then echo ➤ Racket preproc; $(PROGDIR)/adocables-preproc.rkt $(ADOCABLES_INPUT); fi
	@if test -s "$(ADOC_INPUT)"; then echo ➤ Asciidoctor; $(MAKE_DIR)run-asciidoctor.sh; fi

# specials = primitives + starterFiles

specials: preproc
	@echo ➤ Collect lesson info
	@$(MAKE_DIR)collect-specials.lua

postproc: preproc
	@echo ➤ Postproc
	@$(MAKE_DIR)do-postproc.lua

tocs: preproc
	@echo ➤ Make pathway-tocs.js
	@$(MAKE_DIR)make-pathway-tocs.lua

ifeq "$(BOOK)" ""
pdfs: postproc dependency-graph tocs

else
pdfs: postproc dependency-graph tocs
	@echo ➤ Make PDFs
	@$(MAKE_DIR)make-pdf.sh

endif

ifeq "$(LINKCHECK)" ""
verifylinks: pdfs

else
verifylinks: pdfs
	$(MAKE_DIR)do-link-check.sh

endif

ifeq "$(BOOK)" ""
books: pdfs

else
books: pdfs
	@echo ➤ Make workbooks
	$(MAKE_DIR)make-workbook-jsons.lua $(COURSES_LIST_FILE)
	@echo "  " • Created workbook JSON files
	$(MAKE_DIR)make-books.sh

endif
