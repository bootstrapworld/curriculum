use context url("https://raw.githubusercontent.com/bootstrapworld/curriculum/refs/heads/git-libraries/shared/langs/en-us/pyret-files/libraries/algebra.arr")

# 0. Game title: Write the title of your game here
TITLE = "Alfred Alfer's Awesome Adventure"
TITLE-COLOR = "white"

# Graphics - danger, target, background and player images
BACKGROUND = scale(0.9, image-url("https://www.bootstrapworld.org/clipart/Backgrounds/space_background.png"))
DANGER = scale(0.5,image-url("https://www.bootstrapworld.org/clipart/Things/popsicle.png"))
TARGET = scale(0.6, image-url("https://www.bootstrapworld.org/clipart/Things/dog_treat.png"))
PLAYER = scale(0.75, image-url("https://www.bootstrapworld.org/clipart/Animals/Alfer.png"))

# here's a screenshot of the game, with the PLAYER at (320, 240),
# the TARGET at (400 500) and the DANGER at (150, 200)
SCREENSHOT = 
  translate(DANGER, 150, 200,
    translate(TARGET, 500, 400, 
      translate(PLAYER, 320, 240, BACKGROUND)))

######################################################
# 1. Making the Danger and the Target Move

update-danger :: Number, Number -> Posn
# given the danger's x-coordinate and y-coordinate, output the NEXT coordinate
examples:
  update-danger(140, 20) is posn(140 - 15, 20 - 10)
  update-danger(80, 45) is posn(80 - 15, 45 - 10)
end

fun update-danger(x, y):
  posn(x - 15, y - 10)
end


update-target :: Number, Number -> Posn
# given the target's x-coordinate and y-coordinate, output the NEXT coordinate
examples:
  update-target(200, 30) is posn(200 + 20, 30 - 5)
  update-target(180, 20) is posn(180 + 20, 20 - 5)
end
  
fun update-target(x, y):
  posn(x + 20, y - 5)
end

######################################################
# 2. Making the Danger and the Target Come Back Again: 
#    We need to know that they're gone!  
#    Are they on the screen?

is-safe-left :: Number -> Boolean
# Is the character visible on the left side of the screen?
examples:
  is-safe-left(200) is 200 > -50  #true
  is-safe-left(-400) is -400 > -50 #false
end
  
  
fun is-safe-left(x):
  x > -50
end

is-safe-right :: Number -> Boolean
# Is the character visible on the right side of the screen?
examples:
  is-safe-right(100) is 100 < 690
  is-safe-right(700) is 700 < 690
end

fun is-safe-right(x):
  x < 690
end


is-onscreen :: Number, Number -> Boolean
# Determines if the coordinate is on the screen
fun is-onscreen(x, y):
  is-safe-left(x) and is-safe-right(x)
end

######################################################
# 3. Get our Player moving!

update-player :: Number, Number, String -> Posn
# given the player's x-coordinate, y-coordinate, and a direction, output the NEXT y
examples:
  update-player(100,  320, "up")    is posn(100, 320 + 10)
  update-player(200,  100, "up")    is posn(200, 100 + 10)
  update-player(150,  400, "down")  is posn(150, 400 - 10)
  update-player(300,  120, "down")  is posn(300, 120 - 10)
  update-player(100, 1000, "up")    is posn(100, 0)
  update-player(200, -200, "down")  is posn(200, 480)
  update-player(200, -200, "left")  is posn(200 - 10, -200)
  update-player(200, -200, "right") is posn(200 + 10, -200)
  update-player(300,  200, "j")     is posn(300, 200)
end

fun update-player(x, y, key):
  if (key == "up") and (y >= 480): # Wrap from top to bottom
    posn(x, 0)
  else if (key == "down") and (y <= -120): # Wrap from bottom to top
    posn(x, 480)
  else if (key == "up"): # default up
    posn(x, y + 10)
  else if (key == "down"): # default down
    posn(x, y - 10)
  else if (key == "left"): # default up
    posn(x - 10, y)
  else if (key == "right"): # default down
    posn(x + 10, y)
  else: posn(x, y) # any other key
  end
end


######################################################
# 4. Collisions: When the player is close enough to the Target
#    or the Danger, then something should happen!
#    We need to know what "close enough" means, and we need to
#    know how far apart things are.

# If _distances-color_ is set to "yellow", then the game will draw
# a yellow triangle between the player and each character. 
# That triangle will be labelled with line-length on the legs,
# and with distance on the hypotenuse. (This works for any valid color)
_distances-color_ = ""

line-length :: Number, Number -> Number
# the distance between two points on a number line
# some examples - notice that we should always return the
# same answer, no matter what the order of the inputs is!
examples:
  line-length(20, 10) is 20 - 10
  line-length(10, 20) is 20 - 10
end

fun line-length(a, b):
  if a > b: a - b
  else: b - a
  end
end

distance :: Number, Number, Number, Number -> Number
# The distance between two points on screen:
# We have the player's x and y, and a character's x and y.
# How far apart are they?
examples: 
  distance(0, 0, 3, 4) is 
  sqrt((sqr(3 - 0)) + (sqr(4 - 0)))
  
  distance(30, 12, 54, 3) is-roughly 
  sqrt((sqr(54 - 30)) + (sqr(3 - 12))) 
end

fun distance(x1, y1, x2, y2):
  sqrt((sqr(x2 - x1)) + (sqr(y2 - y1)))
end

is-collision :: Number, Number, Number, Number -> Boolean 
# How close is close enough?  
# We have the player's x and y, and a character's x and y.
# We can ask how far apart they are.  Did they collide?
fun is-collision(px, py, cx, cy):
  distance(px, py, cx, cy) < 50
end


mystery = radial-star(5, 5, 3, "solid", "silver")
fun update-mystery(x, y):
  x
end


######################################################
# PROVIDED CODE

g = make-game(TITLE, TITLE-COLOR,
  BACKGROUND,
  DANGER, update-danger,
  TARGET, update-target,
  PLAYER, update-player,
  mystery, update-mystery,
  _distances-color_, line-length, distance,
  is-collision, is-onscreen)

play(g)

