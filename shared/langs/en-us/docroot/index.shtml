<!DOCTYPE html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <title>Bootstrap: Materials</title>
    <link rel="stylesheet" type="text/css" href="https://www.BootstrapWorld.org/styles.css"/>
    <script src="https://www.BootstrapWorld.org/js/TextRotate.js" ></script>
    <script src="dependency-graph.js"></script>
    <script>
        // values that must be imported from external scripts
        var registerTxtRotation = registerTxtRotation;
        var graph = graph;

        // remove lessons that don't belong in the graph
        const lessonsToIgnore = ['__sample-lesson', 'zample-lesson', 'error-analysis', 'hoc-wescheme-intro', 'hoc-winter'];
        lessonsToIgnore.forEach(l => delete graph[l]);

        // find out if there's a subject that was passed in
        var subject, params = location.search.substring(1);
        var subject = !params? "math"
            : JSON.parse('{"' + decodeURI(params).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g,'":"') + '"}')["subject"] || "none";

        // swap "history" for "social studies"
        if(subject == "social-studies") subject = "history";

        // certain lessons are "preferred" depending on the subject
        var subjectPreference = {
            math : ["numbers-inside-video-games","order-of-operations", "coordinates", "distance-formula", "function-composition", "bar-and-pie-charts", "scatter-plots", "histograms", "box-plots","functions-for-character-animation", "inequalities3-sam", "surface-area-rect-prism", "measures-of-center", "functions-dr", "flags", "inequalities1-simple", "inequalities2-compound", "linear-regression", "combinatorics-combination", "combinatorics-permutation", "function-definition-linear", "functions-can-be-linear", "problem-decomposition"],
            history : ["ds-intro", "ethics-privacy-and-bias", "threats-to-validity", "correlations", "bar-and-pie-charts", "flags", "histograms", "histograms2"],
            science : ["simple-data-types", "ds-intro", "numbers-inside-video-games", "simple-data-types", "bar-and-pie-charts", "scatter-plots", "histograms", "histograms2", "measures-of-center", "box-plots"],
            cs : ["ds-intro", "simple-data-types", "contracts", "defining-values", "defining-functions", "re-intro-to-data-structures", "function-composition", "displays-and-lookups", "if-expressions", "making-game-images", "table-methods", "method-chaining", "functions-for-character-animation", "player-animation", "problem-decomposition", "re-adding-collisions", "re-adding-levels", "re-build-your-own-animation", "re-functions-that-ask-questions", "re-key-events", "re-making-pong", "re-nested-structures", "re-refactoring", "re-scoring", "re-structures-reactors-animations", "re-timers", "re-your-own-drawing-functions"]
        };

        var tmpLessonRename = {
            'measures-of-center' : "Mean, Median, & Mode",
            'flags' : "Geometric Ratio and Proportion",
            'contracts': "Contracts: Name, Domain & Range",
        }

        var projects = [
            {
                title: 'Make an Infographic',
                path: 'bar-and-pie-charts/pages/infographic.html',
                prerequisites: ['bar-and-pie-charts'],
                description: 'Infographics are a powerful tool for communicating information, especially when made by people who actually understand how to connect visuals to data in meaningful ways. This project is an opportunity for students to become more flexible math thinkers while tapping into their creativity, and can be made on the computer or with pencil and paper.',
            },
            {
                title: 'Draw a Flag',
                path: 'flags/',
                prerequisites: ['flags'],
                description: 'Students recreate images of flags of varying complexity by transforming and composing image functions and applying their knowledge of ratios and coordinates to scale and position the shapes precisely.',
            },
            {
                title: 'Make a Rocket Fly',
                path: 'functions-dr/',
                prerequisites: ['functions-dr'],
                description: 'Students make a rocket blast off, with a flight path following linear (straight-line), quadratic (accelerating or up-and-down), or exponential paths - depending on your learning goals. ',
            },
            {
                title: 'Protect a Butterfly',
                path: 'inequalities3-sam/',
                prerequisites: ['inequalities3-sam'],
                description: 'Students apply inequalities in the plane to protect a butterfly from going too far to each side of the screen, then explore compound inequalties (union/intersection and AND/OR to protect the butterfly on all sides at once.',
            },
            {
                title: 'Your Stress Level',
                path: 'box-plots/pages/stress-project.html',
                prerequisites: ['box-plots'],
                description: 'People report being more and more stressed every day.  This trend is extending beyond adults, and is being reported by children and teenagers.  The amount of work people are responsible for has been increasing.  To understand what makes us feel stressed, students gather and analyze data about their own lives.',
            },
            {
                title: 'Snacking Habits',
                path: 'random-samples/pages/food-habits-project.html',
                prerequisites: ['random-samples'],
                description: 'Childhood obesity is a major problem in the U.S. Many have called for food producers to provide consumers with nutritional information so that consumers can make wiser choices. Students collect data on their own snacking habits, and compare it to national trends.',
            },
        ];

        // add projects to graph
        projects.forEach((p) => {
            p.title = "Project: " + p.title;
            p.type = "project";
            graph[p.title] = p;
        });

        // used with [].filter to produce an array of unique elts
        const onlyUnique = (value, index, self) => self.indexOf(value) === index;
        const getPrereqs = (l) => {
            if(!graph[l]) {
                throw "an unknown lesson was passed to getPrereqs:" + l;
            }
            return graph[l].prerequisites.concat(...graph[l].prerequisites.map(getPrereqs));
        }

        // recursively compute all prerequisites for each lesson and project
        Object.keys(graph).forEach(k =>
            graph[k].prerequisites = getPrereqs(k).filter(onlyUnique));

        // Always put "preferred lessons" for each subject preference first,
        // and put the rest in their own array
        var firstContainers = subjectPreference[subject];
        var rest = Object.keys(graph)
            .filter(l => !firstContainers.includes(l));
        // Sort the "rest" by prerequisite
        rest.sort((a,b) =>
            graph[a].prerequisites.length < graph[b].prerequisites.length? -1 : 1);

        var checked = [];
        var originalOrder = firstContainers.concat(rest);
        console.log('rest is', rest, 'originalOrder', originalOrder);

        // 1) Starting with projects, then preferred lessons, 
        // then non-preferred lesson in prerequisite order,
        // draw the container for each lesson and add it to the 
        // lesson explorer
        // 2) Get the search placeholder text rotating
        // 3) Register the resize handler and do a resize
        function draw() {
            originalOrder.forEach(l => {
                // if we don't have a matching lesson in the graph
                if(!graph[l]) {
                    console.warn(l, 'is listed as a preferred lesson, but is not in the graph');
                    return; 
                }
                var container = document.createElement("div");
                graph[l].title = tmpLessonRename[l] || graph[l].title;
                container.id  = l;
                container.className =  "container";
                if(graph[l].title.lastIndexOf("Project:", 0) === 0) { 
                    container.classList.add("project");
                }
                container.innerHTML = `
                    <span class="title">${graph[l].title}</span>
                    <span class="description rightTip">
                        ${graph[l].description}
                        <a href="lessons/${graph[l].path || l}">Check it out!</a>
                    </span>`;
                container.onclick = () => update(container);
                document.getElementById('materialExplorer').appendChild(container);
            });
            function updatePlaceholder(e, txt) { e.placeholder = txt; }
            if(registerTxtRotation) {
                registerTxtRotation(document.getElementById("searchBox"), updatePlaceholder);
            }
            window.addEventListener('resize', resize);
            resize();
        }

        var resizeTimeout;
        function resize() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout( () => {
                var containers = document.getElementsByClassName('container');
                var pageWidth = document.getElementById("materialExplorer").clientWidth;
                if(containers.length == 0) return; // no lessons, so no work to do!
                var containerWidth = containers[0].offsetWidth + 
                    2*parseInt(getComputedStyle(containers[0]).marginLeft);
                var rowCount = Math.floor(pageWidth/containerWidth);

                var descriptions = document.getElementsByClassName('description');
                [...descriptions].forEach((d, i) => {
                    var isBottomRow = ((descriptions.length - i) <= rowCount)
                        && i > rowCount;
                    var tipDirection = isBottomRow? "topTip"
                        : (i+1)%rowCount? "rightTip" : "leftTip";
                    d.className = "description " + tipDirection;
                });
            }, 500);
        }

        function update(container) {
            // new prereqs that require an emphasis effect
            var newPreqs = [];

            // if this comes from a container action, update the list of checked lessons
            if(container) {
                var name = container.id;
                newPreqs = graph[name].prerequisites.filter(p => !checked.includes(p));
                checked = container.classList.contains('teaching')?
                    // remove the lesson, and any lesson that lists it as a prerequisite
                    checked.filter(l => l !== name && !graph[l].prerequisites.includes(name))
                    // add the lesson, and any of its prerequisites
                    : [...new Set([name, ...checked , ...graph[name].prerequisites])];
            }

            // sort with the shortest list of prereqs listing first
            checked.filter(onlyUnique).sort((a,b) => 
                graph[a].prerequisites.length > graph[b].prerequisites.length? 1 : -1);

            // update the list of accessible lessons
            var accessible =  Object.getOwnPropertyNames(graph).filter(name => 
                graph[name].prerequisites.every(p => checked.includes(p)));

            // update the counts and summary display
            document.getElementById("checkedCount").innerHTML = checked.length;
            document.getElementById("accessibleCount").innerHTML = accessible.length - checked.length;
            document.getElementById('summary').style.display = checked.length > 0? "block" : "none";
            checked.forEach(t => {
                var link = document.createElement('a');
                link.href = "lessons/" + (graph[t].lesson || t);
                link.innerHTML = graph[t].title + ", ";
                document.getElementById('selectedLessons').appendChild(link);
            });

            // update the lesson display
            Object.getOwnPropertyNames(graph).forEach(name => {
                var lesson = graph[name];
                var container = document.getElementById(name);
                container.style.animationPlayState = "paused";

                // Add styles. If there are new prerequisites being added, animate them
                if(checked.includes(name)) {
                    container.classList.add("teaching"); 
                    container.classList.remove("accessible");
                    container.style.animationPlayState = newPreqs.includes(name)? "running" : "paused";
                } else if(accessible.includes(name)) {
                    container.classList.remove("teaching");
                    container.classList.add("accessible");
                } else {
                    container.classList.remove("accessible", "teaching");
                }
            });
        }

        // uncheck all the lessons, then update
        function reset() { 
            document.getElementById('searchBox').value = ''; 
            search(); // redo search with no search items
            checked = []; 
            update(); 
        }

        var searchTimeout;
        function search() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout( () => {
                const explorer = document.getElementById('materialExplorer');
                var str = document.getElementById('searchBox').value;
                var results;

                if(str) {
                    results = Object.getOwnPropertyNames(graph).map(id => {
                        var data = Object.values(graph[id]).join(" ");
                        var regexp = new RegExp("\\b" + str, "gi");
                        return { id: id, matches: [...data.matchAll(regexp)].length };
                    });
                } else {
                    results = originalOrder.map((id, i) => ({id: id, matches: 1}));
                }
                // sort the results in *reverse order*, since we append nodes at the beginning
                results = results.sort((a, b) => a.matches > b.matches? -1 : 1);
                const bestMatch = results[0].matches;
                const step = bestMatch? 1 / (bestMatch + 1) : 0.25; 
                results.reverse().forEach(r => {
                    const container = document.getElementById(r.id);
                    container.style.opacity = (1 + r.matches) * step;
                    explorer.insertBefore(container, explorer.firstChild)
                })
                resize();
            }, 250);
        }

        var showButtonTimeout;
        function showPathwayButton() {
            clearTimeout(showButtonTimeout);
            showButtonTimeout = setTimeout( () => {
                var button = document.getElementById('pathwayButton');
                var name = document.getElementById('pathwayName').value;
                button.style.display =  (name.length > 0)? "inline-block" : "none";
            }, 100)
        }

        function makePathway() {
            var title = document.getElementById('pathwayName').value;
            window.open(`customPathway.shtml?title=${title}&lessons=${checked}`, '_blank').focus();
        }
    </script>
    <style>
        #pathways { min-height: 170px; transition: all 0.25s linear;}
        #pathways:hover { min-height: 400px; }
        #materialExplorer {
            width: 100%;
            overflow: auto;
            border: solid 1px black;
            text-align: center;
            border-top:none;
            border-bottom:none;
        }
        .container {
            display:    inline-table;
            position:   relative;
            height:     80px;
            padding:    5px;
            width:      150px;
            color:      black;
            text-align: center;
            border:     solid 1px gray;
            font-weight: bold;
            margin:     10px;
            background-color: white;
            cursor:     pointer;
            transition: background-color linear 0.5s;
        }
        #materialExplorer div.container:last-child{ margin-bottom: 150px; }
        .project {
            border-radius: 10px;
            border: 2px solid rgb(255,143,143);
        }
        .accessible {background-color: #3c3cff4f; }
        .teaching {
            opacity: 1; 
            background-color: #a6dfba !important;
            box-shadow: black 3px 3px 3px; 
            animation: emphasize 1s cubic-bezier(.36,.07,.19,.97) both 1;
            animation-play-state:  paused;
        }
        .container .title { vertical-align: middle; display: table-cell; }
        .description { 
            visibility: hidden;
            width: 200px;
            font-weight: normal;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            box-shadow: black 3px 3px 3px; 
        }
        .rightTip { left: 100%; }
        .leftTip  { right: 100%; }
        .topTip   { bottom: 105%; left: 50%; margin-left: -100px;}

        .description a { color: yellow; }
        .description::after {
          content: "";
          position: absolute;
          border-width: 5px;
          border-style: solid;
          border-color: transparent;
        }

        .rightTip::after { top:  10%; right: 100%; margin-left: -5px; border-right-color: black;}
        .leftTip::after  { top:  10%; left:  100%; margin-left:  1px; border-left-color:  black;}
        .topTip::after   { top: 100%; left:   50%; margin-top:   2px; border-top-color:   black;}

        .container:hover { background-color: #ccffcc; opacity: 1; z-index: 2;}
        .container:hover .description { visibility: visible; }

        .legend { 
            display:  inline-block; 
            box-shadow: none !important;
        }

        #search { 
            background: black; 
            color: white; 
            width:  100%; 
            padding: 10px; 
            font-size:  12pt;
            box-shadow: #cb76e6 1px 1px 2px;
        }
        #searchBox { width: 300px; margin: 0px 10px; font-size:  12pt; }
        .count {font-weight: bold;}
        #pathwayButton { display: none; }
        #reset { 
            float:      right; 
            font-size:  28pt;
            margin-top: -4pt;
            color:      white; 
            background: none; 
            border:     none;
            text-decoration: none;
        }
        #reset:hover { text-shadow:  3px 1px 3px #cb76e6; }

        @keyframes emphasize {
            10%, 90%      { transform: translate3d(-1px, 0, 0); }
            20%, 80%      { transform: translate3d( 2px, 0, 0); }
            30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
            40%, 60%      { transform: translate3d( 4px, 0, 0); }
        }
        ul.tab { display: table; width: 100%; }
        ul.tab .tablinks {display:  table-cell; }
        .tablinks img {width: 100%; max-width: 150px;}
    </style>

</head>

<body onload="draw(); update();  ">
    <!--#include virtual="/menubar.ssi" -->
    <div id="body">
        <div class="clearfix item">
            <h1>Materials</h1>
            <p>
            Bootstrap is completely free, field-tested and research-validated, with a focus on deep exploration that supports and engages all kinds of learners. Our integrated computing modules have been proven to support math transfer and can be mixed and matched to supplement what you're already doing in your classroom.
            </p>
            <div id="pathways" class="item bottom-border">
                <ul class="tab">
                    <li class="tablinks"><a href="/materials/algebra"><img src="courses/algebra-pyret/images/Logo.png" alt="Bootstrap:Algebra"/></a>
                        <div id="algebra" class="tabcontent">
                            <h3>Recommended for: Grades 7-12</h3>
                            The Bootstrap:Algebra pathway applies mathematical concepts and introductory programming principles. Students use an <i>algebraic programming language</i> to build flags using function composition, make a rocket blast off using linear, quadratic (or even exponential) functions, protect a butterfly using inequalities, and even create a complete videogame! And of course, all materials are <a href="courses/algebra-pyret/pathway-alignments.shtml">aligned</a> to National and State Standards for Mathematics.  
                        </div>
                    </li>
                    <li class="tablinks"><a href="/materials/data-science"><img src="courses/data-science/images/Logo.png" alt="Bootstrap:Data Science"/></a>
                        <div id="data" class="tabcontent">
                            <h3>Recommended for: Grades 7-12</h3>
                            What defines the greatest musician of all time? How is the population of your state changing? Does drinking milk really make you taller? Answering these questions involves collecting and manipulating data, from sports stats to record sales to census data.  This pathway teaches students to view programs as questions we ask of data.  Students form their own questions about the world around them, and learn how to analyze data critically and carefully to find answers.  Business, science, and history teachers can utilize this module to help students make inferences from data.  Math teachers can use this module to introduce foundational concepts in statistics.  It also works great as a module for AP CS Principles' unit on data!
                        </div>
                    </li>
                    <li class="tablinks"><a href="/materials/physics"><img src="courses/physics/images/Logo.png" alt="Bootstrap:Physics"/></a>
                        <div id="hoc" class="tabcontent">
                            <h3>Recommended for: Grades 9-10</h3>
                            Our Physics pathway helps students understand basic physics concepts by incorporating computer programming as one of the key tools for building models of the physical world. Targeted to ninth grade, during which every student is expected to take science, this initiative is designed to spark students' interest in subjects related to science, technology, engineering, and math (STEM) for the rest of their academic careers. This initiative also combats a root cause of inequality of opportunity in pursuing STEM careers: disparate access to quality teaching in middle and high school. The module is aligned to the <a href="https://www.aapt.org/Resources/physicsfirst.cfm">Physics First</a> course, allowing teachers to easily embed computational modeling in their physics classes.
                        </div>
                    </li>
                    <li class="tablinks"><a href="/materials/reactive"><img src="courses/reactive/images/Logo.png" alt="Bootstrap:Reactive"/></a>
                        <div id="structures" class="tabcontent">
                            <h3>Recommended for: Grades 9-12</h3>
                            <a href="courses/reactive">Bootstrap:Reactive</a></b> goes deeper into programming, building events and data structures on top of the foundation laid by our intro course and allowing students to build far more sophisticated programs. We've listed the breakdown of concepts in the table below, so you can find the best fit for your class. Students learn how the world-based event loop that drives their Bootstrap:Algebra game works, and use it to create animations using simple datatypes for their world. They then learn about data structures, and design a World structure for a sophisticated game of their own design.
                            </p>
                        </div>
                    </li>
                </ul>
            </div>

            <p>
            All of our courses are <a href="Alignments.shtml">aligned to National and State Standards</a> - including NGSS, CCSS, CSTA, K12-CS, and more! We work hard to provide an "everything you need, all in one place" experience, offering <a href="courses/hour-of-code/">Hour of Code</a> activities and four curated pathways that come with a detailed student workbook, teacher materials, and an optional capstone project that ties the entire course together. You can also mix and match our materials by building your own pathway.
            </p>
            <p>
            After Bootstrap,  students are prepared to tackle <a href="BeyondBootstrap.shtml">several college-level textbooks</a>, including one that bridges <strong>from Pyret to Python</strong>.
            </p>
        </div>
        <div class="item bottom-border">
            <h2 id="BuildYourOwn">Build your Own Pathway</h2>

            <span class="legend teaching"><b>What do you want students to do?</b></span> - Click to select the projects or lessons you want to bring to your students! <i>When you select a project or lesson, it - <b>and its prerequisites</b> - will turn green.</i>
            <p/>
            <span class="legend accessible"><b>What can you teach <u><i>tomorrow?</i></u></b></span> - If you haven't selected anything yet, the blue items can be taught with no prerequisites. As you select more lessons/projects, additional items will turn blue to indicate that they could be added without additional prerequisites.
            <p/>
            Select as many projects or lessons as you'd like, then name and save your pathway.
            <p/>

            <div id="search">
                Looking for something specific? 
                <input id="searchBox" type="search" onInput="search()"
                class="txt-rotate" data-period="2000" 
                data-rotate='["Functions", "Privacy", "Ratios", "Games", "HSA.SSE.A.2", "Box Plots", "Ethics", "Order of Operations", "Methods"]'
                placeholder="Search by Concept, Standard, or Keyword"/>
                <a href="javascript:reset()" id="reset" >&#8634;</a>
            </div>
            <p>
            Having taught <span id="checkedCount" class="count">LOADING</span> Bootstrap lessons, you can <i>immediately</i> jump into <span id="accessibleCount" class="count">LOADING</span> other lessons!
            </p>
            <div id="materialExplorer"></div>
            <p/>
            <div id="summary">
                <strong>The lessons or projects you've selected - and their prerequisites! - are:</strong> <span id="selectedLessons"></span>. 
                <p/>
<!--                
                We've created a custom pathway just for you, with links to all the lesson materials, workbook pages, activities, and more! Enter a name to see your personalized pathway, and bookmark the resulting page to return to it at any time!
                <p/>
                <input type="text" id="pathwayName" placeholder="Name your pathway" onInput="showPathwayButton()"/>
                <input type="button" id="pathwayButton" value="My Custom Pathway" onclick="makePathway()" />
-->                
            </div>
        </div>
    </div>
</body>
</html>
