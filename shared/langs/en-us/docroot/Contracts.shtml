<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="generator" content="Asciidoctor 2.0.17">
  <title>Contracts</title>
  <link rel="stylesheet" href="lib/curriculum.css" />
  <script src="lib/dependency-graph.js"></script>
  <script src="lib/pathway-tocs.js"></script>
  <script src="lib/bootstraplesson.js"></script>
  <script src="lib/langtable.js"></script>
  <style>

    /* override some asciidoctor and shared.less defaults */
    *:not(pre)>code { background-color: transparent !important; }
    .contracts-table tbody tr:nth-child(odd) .ruby { color: darkgray !important; }
    .fitb, .fitbruby { 
      border-bottom-color: gray !important; 
      padding: 0 !important; 
      min-width: 7em !important; 
    }
    .contracts-table tr:nth-child(odd) { border: 0; }
    .contracts-table tbody tr:nth-child(even) td { padding-left: 2em !important; }
    tbody tr:first-child td:nth-child(3) code { display: flex; }
    tbody tr:first-child td:nth-child(3) code .fitbruby { 
      flex-grow: 0.1;
      max-width: 10em; 
      min-width: 4.5em !important;
    }
    td code.pyret-comment { background-color: transparent !important; }

    html, body, div#body { height: 9.7in !important; max-height: 9.8in !important; }
    div#body #search { background: black; color: white; padding: 5px; margin: 10px 0; }
    div#body #search input { width: 250px; font-size: 14px; margin-left: 15px; }
    .contracts-table { width: 100%; }
    thead { background: lightgray !important; }
    td { white-space: pre; vertical-align: baseline; }
    tbody tr:last-child { font-style: italic; }

    @media print {
      /* 
        We add "extra rows" to the bottom of the last printed page by
        (1) adding a repeating background image that _looks_ like rows
        (2) positioning it to line up precisely with the real table
        (3) making sure the table and anything above it cover the BG image
       */
      * { -webkit-print-color-adjust: exact !important;}
      #header, #content { background: white; }
      body {
        background: url(lib/images/contract-rows.png) !important;
        background-repeat: repeat-y !important;
        background-position-y: 15px !important;
        background-size: 7.5in !important;
        -webkit-print-color-adjust: exact !important;
      }

      #body { padding: 0 !important; }
      #search { display: none; }
      tbody { 
        break-inside: avoid !important; 
        page-break-inside: avoid !important; 
      }
    }
  </style>

  <script>
    window.status = "not_ready_to_print";
    // narrow the primitives by url params
    const {pathway, lessons, lesson, solns} = getParams();
    // if there's a pathway, extract the primitives
    const primitives = pathway? computeTransitiveData(false,false,lessons).primitives : false;

    // take note of whether we are in wescheme or not
    const proglang = (pathway && pathway.includes("wescheme"))? "wescheme" : "pyret";

    // Swap in pyret names if we're in pyret
    function processName(contract) {
      return (proglang=="pyret" && contract["name-pyret"])? 
        contract["name-pyret"] : contract["name"];
    }

    function elideProgLangSpecificPrimitives(c) {
      if(proglang == "wescheme") {
        return c.name !== '<>' 
      } else { 
        return c.name.match(/[a-z]/i) && !["or", "and"].includes(c.name);
      }
    }

    // set the list of contracts, sorted alphabetically and filtered by proglang
    const contracts = Array.prototype.concat(
      ...Object.values(langTable).map(t => t.primitives))
      .sort((a,b) => processName(a).toUpperCase() > processName(b).toUpperCase()? 1 : -1)
      .filter(elideProgLangSpecificPrimitives);

    // for each contract, add a row to the table
    // handle domains separately because they require more preprocessing
    function buildTable() {
      if(pathway && pathway.includes("hour-of-code")) {
        delete window.status;
        throw "Pathway is 'hour-of-code', which has no contracts. Terminating.";
      }

      // If we're in a pathway, add it to the title
      if(pathway && (pathway !== "ok")) {
        const h1 = document.querySelector('#header h1');
        let title = pathway.split("-")
          .map(w => w[0].toUpperCase() + w.substring(1))
          .map(w => ["Wescheme", "Pyret"].includes(w)? '('+w+')' : w)
          .join(' ');
        h1.innerHTML += " for " + title;
      }

      // add the appropriate example (pyret or wescheme)
      let example = document.getElementById('exampleCode');
      example.innerHTML = (pathway && pathway.includes("wescheme"))? 
        `(triangle 20 "solid" "green")` : `triangle(20, "solid", "green")`

      // the domain is an array of {name, type} pairs
      function processDomain(contract) {
        const code = document.createElement('code');
        code.className = "pyret-comment";
        code.innerHTML = '(' + 
          [...contract.domain.map(i => {
            if(i.name && i.name.length) {
              return `<span class="fitbruby">${i.type}<span class="ruby">${i.name}</span></span>`
            } else {
              return `<span class="fitb">${i.type}</span>`
            }
          })].join(',')
          + ')';
        return code;
      }

      // use the right example for the proglang
      function processExample(contract) {
        return (proglang == "wescheme")?
         contract["example-wescheme"] : contract["example-pyret"];
      }
      
      const table = document.getElementById('contracts');
      const prefix = (proglang == "wescheme")? "; " : "# ";

      contracts
        .forEach(c => {
          // build the domain and example
          name   = processName(c);
          domain = processDomain(c).outerHTML;
          example= processExample(c);
          // make the tbody
          const tbody = document.createElement('tbody');
          // make the row
          const row1 = document.createElement('tr');
          row1.innerHTML  = 
            '<td><code>' + prefix + name + '</code></td>' +
            '<td> :: </td>' +
            '<td>' + domain + '</td>' + 
            '<td> -> </td>' + 
            '<td><code>' + c.range + '</code></td>';
          const row2 = document.createElement('tr');
          row2.innerHTML  = '<td colspan="7">' + example +
            (c.comment? '<span class="cm-comment"> ' + prefix + c.comment + '</span>': '') + '</td>'
          tbody.appendChild(row1);
          tbody.appendChild(row2);

          // by default, hide primitives that aren't in this pathway
          if(primitives && !primitives.includes(c.name)) { 
            tbody.style.display = 'none';
          }

          table.appendChild(tbody);
        });
      window.status = "ready";
    }

    var searchTimeout;
    function search(str) {
      const searching = str.trim().length > 0;
      clearTimeout(searchTimeout);
      const tbodies = [...document.querySelectorAll('#contracts tbody')];
      searchTimeout = setTimeout( () => {
        console.time('time to filter');
        const table = document.getElementById('contracts');
        table.style.display = "none";
        tbodies.forEach((tbody, idx) => {
          const inPathway = primitives && primitives.includes(contracts[idx].name);
          const isMatch = contracts[idx].name.includes(str);
          // if it's a match, make this tbody visible. Otherwise, invisible
          tbody.style.display = ((searching && isMatch) || (!searching && inPathway))? "table-row-group" : "none";
        });
        table.style.display = "table";
        console.timeEnd('time to filter');
      }, 250);
    }
  </script>
</head>
<body onload="buildTable()">
  <!--#include virtual="/menubar.ssi"-->
  <div id="body" class="narrativepage article canBeLongerThanAPage">
    <div id="header">
      <h1>Contracts</h1>
    </div>
    <div id="content">
      <div class="paragraph">
        <p>
          Contracts tell us how to use a function, by telling us three important things:
          <ol>
            <li>The <b>Name</b></li>
            <li>The <b>Domain</b> of the function - what kinds of inputs do we need to give the function, and how many?</li>
            <li>The <b>Range</b> of the function - what kind of output will the function give us back?</li>
          </ol>
        </p>
        <p>
          For example: The contract <tt>triangle :: (Number, String, String) -> Image</tt> tells us that the name of the function is  <tt>triangle</tt>, it needs three inputs (a Number and two Strings), and it produces an Image. 
        </p>
        <p>
          With these three pieces of information, we know that typing <tt id="exampleCode"></tt>  will evaluate to an Image.
        </p>
        <div id="search">
            Searching for a function? <input id="searchBox" type="search" onInput="search(this.value)"
            placeholder="Search the entire Bootstrap library!"/>
        </div>
        <table id="contracts" class="contracts-table">
          <thead>
            <th>Name</th>
            <th></th>
            <th>Domain</th>
            <th></th>
            <th>Range</th>
          </thead>
        </table>
      </div>
    </div>
  </div>
</body>
</html>
