<!DOCTYPE html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <title>Bootstrap: Materials</title>
    <link rel="stylesheet" href="lib/curriculum.css">
    <link rel="stylesheet" type="text/css" href="https://www.BootstrapWorld.org/styles.css"/>
    <style>
        .logo img { width: 300px; }
        .drag-handle img { width: 15px; user-select: none; }
        dl { counter-reset: term; min-height: 3in; }
        dl .list-group-item { 
            display:        flex !important; 
            align-items:    center; 
            padding:        0; 
            margin-bottom:  15px;
            border:         none;
        }
        dl .list-group-item span.drag-handle { 
            width: 15px; 
            flex: 0 0 15px; 
            margin: 0 10px; 
            text-align: center; 
            opacity: 0.5; 
        }
        dl .list-group-item .itemContent { flex: 1; }
        span.drag-handle:hover { cursor: grab; }

        dl#lesson-list:empty { display: flex; justify-content: center; }
        dl#lesson-list:empty:after { 
            display: flex;
            align-items: center;
            font-style: italic;
            width: 75%;
            content: "You haven't selected any Bootstrap lessons...yet! Fortunately, the lessons on the right can be taught without ANY prerequisites at all! Drag one of them over here to start your list, and see what other lessons get unlocked as your list of Bootstrap lessons grows!" 
        }
        dl#lesson-list > dt:not(.sortable-drag) a:before {
            counter-increment: term;
            content: counter(term) ".";
            margin-right: 5px;
        }
        button { background: none; border: none; font-weight: 900; padding: 0; user-select: none; }

        #accessible * { font-size: 14px; }
        #accessible h2 { font-size:16px; font-weight:bold; }
        #accessible button {display: none; }
        #accessible-lesson-list dd { display: none; }
        
        #status { display: none; }
        #status, label, progress { width: 100%; }        
    </style>

    <!-- Latest compiled and minified CSS -->
    <script src="https://raw.githack.com/SortableJS/Sortable/master/Sortable.js"></script>

    <script src="lib/bootstraplesson.js"></script>
    <script src="dependency-graph.js"></script>
    <script src="pathway-tocs.js"></script>
    <script src="https://unpkg.com/pdf-lib@1.4.0"></script>
    <script src="https://unpkg.com/downloadjs@1.4.7"></script>
    <script>
        // configure the graph and fully compute the prereqs for these lessons
        configureGraph(graph);
        let url = new URL(location);
        
        // Default to all pyret lessons, sorted in prereq order
        let pathway = "Custom Pathway";
        let proglang = "pyret";
        let lessons;

        ({pathway, lessons, lesson} = getParams());
        if(pathwayTocs[pathway]) { pathway = pathway.split("-").map(w => w[0].toUpperCase() + w.substring(1)).join(' ');}
        if(!lessons) lessons = [];
        if(!pathway) pathway = "Click here to name this pathway";

        // sorting configuraton
        const sortingOptions = {
            animation: 150,
            group: 'lessons',
            ghostClass: 'sortable-ghost',
            forceFallback: true,
            dataIdAttr: 'data-lesson-title',
            handle: ".drag-handle",
        };

        // load required symbols, trim the dependency graph
        const { PDFDocument, rgb, degrees } = PDFLib

        function populateLessonList(parent, lessonNames, showDescription) {
            lessonNames.forEach(l => {
                const lesson = graph[l];
                const item = document.createElement('div');
                item.className = "list-group-item";
                item.innerHTML  = `
                    <span class="drag-handle">
                        <button 
                            onMouseover="maybeDeleteLesson('${l}')" 
                            onMouseout="resetDeletionIndicators()"
                            onClick="deleteLesson('${l}')"
                            >
                            &times;
                        </button>
                        <img src="lib/images/drag-handle.png" aria-hidden="true"/>
                    </span>`
                const content = document.createElement('span');
                content.className = "itemContent";
                const dt = document.createElement('dt');
                const dd = document.createElement('dd');
                dt.className  = "hdlist1";
                dt.innerHTML += `<a href="./lessons/${l}/index.shtml">${lesson.title}</a>`;
                item.setAttribute('data-lesson-title', l);
                if(showDescription) {
                    dd.innerHTML += `<p>${lesson.description}</dd>`
                };
                content.appendChild(dt);
                content.appendChild(dd);
                item.appendChild(content);
                parent.appendChild(item);
            });
        }

        function resetDeletionIndicators() {
            document.getElementById('lesson-list')
                .querySelectorAll('[data-lesson-title]').forEach(n => {
                    n.style.background = "none"; 
                });
        }

        function maybeDeleteLesson(l) {
            const maybeDelete = [...document.getElementById('lesson-list')
                .querySelectorAll('[data-lesson-title]')]
                .filter(n => graph[n.getAttribute('data-lesson-title')].prerequisites.includes(l)
                    || n.getAttribute('data-lesson-title') == l);
            maybeDelete.forEach(n => {n.style.background = "#fcc"; });
        }

        function deleteLesson(l) {
            const toDelete = [...document.getElementById('lesson-list')
                .querySelectorAll('[data-lesson-title]')]
                .filter(n => graph[n.getAttribute('data-lesson-title')].prerequisites.includes(l)
                    || n.getAttribute('data-lesson-title') == l)
                .map(n => n.getAttribute('data-lesson-title'));
            const newLessonOrder = lessons.filter(l => !toDelete.includes(l));
            lessons = newLessonOrder;
            url.searchParams.set("lessons", newLessonOrder.join(','));
            history.pushState({}, "", url);
            init();
        }

        // Based on an example at https://jsfiddle.net/Hopding/Lyb16ocj/13/
        function init() {
            console.log('redrawing lesson list');
            url = new URL(location);
            
            // revise search params for content links
            document.querySelectorAll('#content a').forEach(link => {
                newLink = new URL(link.href);
                newLink.search = url.search;
                link.href = newLink.href;
            });

            // set pathway title
            document.getElementById('pathwayTitle').innerHTML = pathway;
            const lessonList = document.getElementById('lesson-list');
            const accessibleList = document.getElementById('accessible-lesson-list');
            lessonList.innerHTML = accessibleList.innerHTML = null;

            // update the list of accessible lessons
            var accessible =  Object.getOwnPropertyNames(graph)
                .filter(name => graph[name].prerequisites
                    .every(p => lessons.includes(p)))
                .filter(name => graph[name].proglang == proglang)
                .filter(name => !lessons.includes(name))
                .filter(onlyUnique)
                .sort((a,b) => 
                graph[a].prerequisites.length > graph[b].prerequisites.length? 1 : -1);
            //console.log('selected lessons are', lessons, 'accessible lessons are', accessible);

            // populate the list of lessons in this pathway, AND
            // the list of lessons accessible *from* this pathway
            populateLessonList(lessonList, lessons, true);
            populateLessonList(accessibleList, accessible, true)

            // make accessible list sortable
            const accessibleSort = new Sortable(accessibleList, sortingOptions);
            
            // make sortable, and grab msg element
            const lessonSort = new Sortable(lessonList, {
                ...sortingOptions,
               onAdd: e => {
                const newLessonOrder = lessonSort.toArray();
                lessons = lessonSort.toArray();
                url.searchParams.set("lessons", newLessonOrder.join(','));
                history.pushState({}, "", url);
                init();
               }
             });

            function safeToDrop(evt, originalEvt) { 
             // Extract the title of the lesson being dragged, and which lesson it's being inserted relative to
             const draggingLesson = evt.dragged.getAttribute('data-lesson-title');
             const relatedLesson = evt.related.getAttribute('data-lesson-title');
             const oldLessonOrder = lessonSort.toArray().filter(onlyUnique);
             const otherLessons = oldLessonOrder.filter(l => l !== draggingLesson);
             const insertingAfter = evt.willInsertAfter;
             //console.log('old order is', oldLessonOrder)
             //console.log('inserting', draggingLesson, evt.willInsertAfter? 'after' : 'before', relatedLesson);

             // Split the lesson list into prior and later, based on whether insertion happens after or before
             const relatedIndex = otherLessons.indexOf(relatedLesson);
             const before = otherLessons.splice(0, evt.willInsertAfter? relatedIndex + 1 : relatedIndex );
             const after = otherLessons.filter(l => !before.includes(l))
             console.log('before', before, 'after', after)
             
             // Invalid Case 1: dragging lesson is a prereq of a prior one
             const tooLate = before.find(l => graph[l].prerequisites.includes(draggingLesson))
             if(tooLate) {
                 console.error(`Invalid move: ${draggingLesson} must come before ${tooLate}`);
                 return false;
             }
             // Invalid Case 2: dragging lesson depends on a later one
             const draggingPrereqs   = graph[draggingLesson].prerequisites;
             const tooSoon = draggingPrereqs.find(l => after.includes(l))
             if(tooSoon) {
                 console.error(`${draggingLesson} must come after ${tooSoon}`)
                 return false;
             }
            }

            accessibleSort.option('onMove', safeToDrop);
            lessonSort.option('onMove', safeToDrop);
        }

        async function printWorkook(lessons, graph) {
            const status   = document.getElementById('status');
            const label    = status.querySelector('label');
            const progress = status.querySelector('progress');
            const pdfDoc   = await PDFDocument.create();
            // print out wb page paths
            var pageUrls = lessons
                .map(l => graph[l].pages
                    .filter(p => p !== "")
                    .map(p => 
                        "lessons/"+l+"/pages/"+p))
                .flat()
                .map(p => p.replace(".adoc", ".pdf"))
                .map(p => p.replace(" landscape", ""));

            console.log(pageUrls)

        // turn on status DOM, and initialize progress bar
        status.style.display = "inline-block";
        progress.max = pageUrls.length;
        for (const [idx, url] of pageUrls.entries()) {
            progress.value = idx + 1;
            console.log(idx, url);
            const page = pdfDoc.addPage();
            const bytes = await fetch(url).then((res) => res.arrayBuffer());
            const [embedded] = await pdfDoc.embedPdf(bytes);
            const dimensions = embedded.scale(1.0);
            const isRightHand= idx%2 == 0;

            const portrait = {
              x: (page.getWidth()  / 2) - dimensions.width  / 2,
              y: (page.getHeight() / 2) - dimensions.height / 2,
            };

            const landscape = {
              x: isRightHand? page.getWidth() :        0        ,
              y: isRightHand?       0         : page.getHeight(),
              rotate: degrees(isRightHand? 90 : -90),
            };

            const isLandscape  = dimensions.width > dimensions.height;
            const pageSettings = isLandscape? landscape : portrait;

            page.drawPage(embedded, {...dimensions, ...pageSettings});

            label.innerHTML = "Collecting Workbook Pages: ";

            if(idx <= 1 ) continue;
            page.drawText(String(idx - 1), {
              x: page.getWidth() / 2,
              y: 35,
              size: 8,
              color: rgb(0,0,0),
              rotateDegrees: isLandscape ? -90 : 0
            })
          }

          // Serialize the PDFDocument to bytes (a Uint8Array)
          const pdfBytes = await pdfDoc.save()
          label.innerHTML = "Downloading..."
          download(pdfBytes, pathway + "- Student Workbook.pdf", "application/pdf");
          status.style.display = "none";
        }

        function makeEditable(node) {
            node.contentEditable = true;
            node.onkeydown = e => { if(e.key == 'Enter') save(node); }
            node.focus();
        }
        function save(node) {
            if(node.id == "pathwayTitle") { pathway = node.textContent; }
            node.onkeydown = null;
            node.contentEditable = false;
            url.searchParams.set("pathway", pathway);
            history.pushState({}, "", url);
            init();
        }
    </script>
</head>

<body class="narrativepage article narrative pyret" onload="init();">
    <!--#include virtual="/menubar.ssi" -->
    <div id="body">
        <div id="header">
            <h1 id="pathwayTitle" style="border-bottom: none;" onClick="makeEditable(this)" onBlur="save(this)"></h1>
        </div>
        <div id="content">
            <div id="preamble_disabled" class="lessonSummary">
                <div class="sect1">
                    <div class="paragraph">
                        <p>This is a custom pathway, created just for you. <b>Be sure to bookmark this page</b>, so that you can return to it!</p>
                    </div>
                </div>
            </div>

        <div class="clearfix item two-thirds">
            <div class="sectionbody">
                <h2>Lesson Plans</h2>
                <dl id="lesson-list" ></dl>
            </div>
        </div>
        
        <div id="accessible" class="clearfix item one-third">
            <h2>What's within reach?</h2>
            <p/>
            Some or all of lessons you've chosen are a prerequisite to any of the following lessons:
            <dl id="accessible-lesson-list"></dl>
        </div>


        <div class="clearfix item top-border bottom-border">
            <h2>Student Workbooks</h2>
            <p>Every page can be accessed individually from the lesson plans, in both Web and PDF format. You can print only what you need for each day, or get every page combined as a complete <a href="#" onclick="printWorkook(lessons, graph)">Student Workbook</a>. 
            <p/>
            <span id="status">
                <label for="file">Assembling Workbook:</label>
                <progress id="file"></progress>
            </span>
            </p>
        </div>

        <div class="clearfix item bottom-border">
            <h2>Teaching Remotely?</h2>
            <p>If you're teaching remotely, we've assembed an <a href="../../ImplementationNotes.shtml">Implementation Notes</a> page that makes
specific recommendations for in-person v. remote instruction.</p>
        </div>

        <div class="clearfix item bottom-border">
            <h2>Other Resources</h2>
            <p>Of course, there's more to a curriculum than software
            and lesson plans! We also provide a number of resources to educators,
            including standards alignment, a complete student workbook, an answer
            key for the programming exercises and a forum where they can ask
            questions and share ideas.</p>
            <div class="ulist pathway_external_links">
            <ul>
                <li>
                <p><a href="./Glossary.shtml">Glossary</a>&nbsp; - &nbsp;A list of vocabulary words used in this pathway.
                We also provide a <a href="./lib/bilingual-glossary.html">bilingual glossary</a>,
                which defines all vocabulary words across our lessons in English and Spanish.</p>
                </li>

                <li>
                <p><a href="./Alignments.shtml">Standards Alignment</a>&nbsp; - &nbsp;Find out how our materials align with National and State
                Standards, as well as some of the most commonly used math
                 textbooks.</p>
                </li>

                <li>
                <p><a href="./Contracts.shtml">Contracts</a>&nbsp; - &nbsp;Contracts are the reference page for every function used across all of the lessons in the pathway. Most teachers find it useful to provide this page at the back of their students' workbooks, and/or display as a reference in their classroom!</p>
                </li>
            <!--
                <li>
                <p><a href="./resources/index.shtml">Teacher-Only Resources</a>&nbsp; - &nbsp;We also offer several teachers-only materials, including an
                answer key to the student workbook, keys to all the exercises,
                and pre- and post-tests for teachers who are participating in our
                research study. For access to these materials, please fill out the
                <a href="https://docs.google.com/forms/d/e/1FAIpQLSefQhHo-AA6ruZyICrx51OnJp0sU63b_Y3h05f4KZKHiUbPXw/viewform">password request form</a>.
                We'll get back to you soon with the necessary login information.</p>
                </li>
            -->
                <li>
                <p><a href="https://discourse.bootstrapworld.org">Online Community (Discourse)</a>&nbsp; - &nbsp;Want to be kept up-to-date about Bootstrap events, workshops, and curricular
                changes? Want to ask a question or pose a lesson idea for other Bootstrap
                teachers? These forums are the place to do it.</p>
                </li>
            </ul>
            </div>
            </div>
        </div>

    </div>
</body>
</html>
