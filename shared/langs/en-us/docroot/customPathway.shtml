<!DOCTYPE html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta charset="UTF-8">
    <title>Bootstrap: Materials</title>
    <link rel="stylesheet" href="lib/curriculum.css">
    <link rel="stylesheet" type="text/css" href="https://www.BootstrapWorld.org/styles.css"/>
    <style>
        #preamble_disabled { padding-bottom: 25px; }
        .logo img { width: 300px; }
        .drag-handle img { width: 15px; user-select: none; }
        dl { counter-reset: term; min-height: 3in; padding-top: 25px; }
        dl .list-group-item { 
            display:        flex !important; 
            padding:        0; 
            margin-bottom:  15px;
            border:         none;
        }
        dl#accessible-lesson-list .list-group-item { align-items:    center; }
        dl#accessible-lesson-list .day { display: none; }
        dl .list-group-item span.drag-handle { 
            width: 15px; 
            flex: 0 0 15px; 
            margin: 0 10px; 
            text-align: center; 
            opacity: 0.5; 
        }
        dl#lesson-list .list-group-item span.drag-handle { margin-top: 30px; }

        /* styling of day input boxes */
        .day { margin-right: 50px; float: right; white-space: pre; font-style: italic; font-weight: 100; }
        .day input { 
            max-width: 25px; 
            display: inline;
            margin: 0; 
            padding: 0; 
            border: none; 
            text-align: left; 
            font: inherit;
            color: inherit;
            background: transparent;
        }

        dl .list-group-item .itemContent { flex: 1; }
        span.drag-handle:hover { cursor: grab; }

        dl#lesson-list:empty { display: flex; justify-content: center; }
        dl#lesson-list:empty:after { 
            display: flex;
            align-items: center;
            font-style: italic;
            width: 75%;
            content: "You haven't selected any Bootstrap lessons...yet! Fortunately, the lessons on the right can be taught without ANY prerequisites at all! Drag one of them over here to start your list, and see what other lessons get unlocked as your list of Bootstrap lessons grows!" 
        }
        dl#lesson-list > dt:not(.sortable-drag) a:before {
            counter-increment: term;
            content: counter(term) ".";
            margin-right: 5px;
        }
        dd ul li { font-style: italic; font-size: smaller; }

        button { background: none; border: none; font-weight: 900; padding: 0; user-select: none; }

        #content { position: relative; }
        #accessible * { font-size: 14px; }
        #accessible h2 { font-size:16px; font-weight:bold; }
        #accessible button {display: none; }
        #accessible-lesson-list dd { display: none; }
        
        #status { display: none; }
        #status, label, progress { width: 100%; }        
        .pathway_external_links li { margin-top: 25px; }
    </style>

    <!-- Latest compiled and minified CSS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>

    <!-- Load PDF and Download modules -->
    <script defer src="https://unpkg.com/pdf-lib@1.4.0"></script>
    <script defer src="https://unpkg.com/@pdf-lib/fontkit/dist/fontkit.umd.min.js"></script>
    <script defer src="https://unpkg.com/downloadjs@1.4.7"></script>


    <script src="dependency-graph.js"></script>
    <script src="pathway-tocs.js"></script>
    <script src="lib/bootstraplesson.js"></script>
    <script src="lib/makeWorkbook.js"></script>

    <script>
    let url = new URL(location);
    
    // Default to all pyret lessons
    let proglang = "pyret";

    // Get and initialize parameters
    let {pathway, lessons, lesson} = getParams();
    let {days} = Object.fromEntries([...url.searchParams.entries()]);
    lessons = lessons || [];
    days = days && days.split(",").map(Number) || [];
    days = lessons.map((_, idx) => days[idx] || 2);
    if(pathwayTocs[pathway]) { pathway = pathway.split("-").map(w => w[0].toUpperCase() + w.substring(1)).join(' ');}
    if(!lessons) lessons = [];
    if(!pathway) pathway = "Click here to name this pathway";

    // sorting configuration
    const sortingOptions = {
        animation: 150,
        group: 'lessons',
        ghostClass: 'sortable-ghost',
        forceFallback: true,
        dataIdAttr: 'data-lesson-title',
        handle: ".drag-handle",
    };

    function populateselectedList(parent, lessonNames, useDays) {
      lessonNames.forEach((l, idx) => {
        const lesson = graph[l];
        const sectionsHTML = graph[l].sections.map(sec => 
            `<li>${sec}</li>`).join('\n');
        const numDays = (useDays && days && days[idx])? days[idx] : 2;
        const dayHTML = `<span class="day"><input type="number" min="1" value="${numDays}" onchange="updateHistory()"> ${numDays == 1? 'day ':'days'}</span>`
        const html = `
          <div class="list-group-item" data-lesson-title=${l}>
            <span class="drag-handle">
              <button 
                onMouseover="maybeDeleteLesson('${l}')" 
                onMouseout="resetDeletionIndicators()"
                onClick="deleteLesson('${l}')">
                &times;
              </button>
              <img src="lib/images/drag-handle.png" aria-hidden="true"/>
            </span>
            <span class="itemContent">
              <dt>
                <a href="./lessons/${l}/index.shtml">${lesson.title}</a>
                ${dayHTML}
              </dt>
              <dd>
                ${lesson.description}
                <ul>${sectionsHTML}</ul>
              </dd>
            </span>
          <div>`;
        const template = document.createElement('template');
        template.innerHTML = html.trim();
        parent.appendChild(template.content.firstChild);
      });
    }

    // utility functions for getting lesson nodes and handling deletion
    lessonNodes = () => [...document.querySelectorAll('#lesson-list [data-lesson-title]')]
    lessonAndDependants = (l) => [...lessons.filter(dep => graph[dep].prerequisites.includes(l)), l]
    resetDeletionIndicators = () => lessonNodes().forEach(n => n.style.background = "none");
    maybeDeleteLesson = (l) => lessonAndDependants(l).forEach(l => {
      if (document.querySelector('.sortable-ghost')) return; // ignore if we're dragging something
      document.querySelector(`[data-lesson-title="${l}"`).style.background = "#fcc"
    });

    function deleteLesson(l) {
      const toDelete = lessonAndDependants(l);
      lessons = lessons.filter(l => !toDelete.includes(l));
      updateHistory();
    }

    // Based on an example at https://jsfiddle.net/Hopding/Lyb16ocj/13/
    function init() {
      // get URL and important list nodes
      url = new URL(location);
      const selectedList   = document.getElementById('lesson-list');
      const accessibleList = document.getElementById('accessible-lesson-list');

      // set pathway title and lesson lists
      document.getElementById('pathwayTitle').innerHTML = pathway;
      selectedList.innerHTML = accessibleList.innerHTML = null;
      const totalDays = days.reduce((d, acc) => d + acc, 0);
      const dayString = (totalDays == 1)? '1 day' : totalDays + ' days';
      document.getElementById('totalDays').innerHTML = dayString;

      // update the list of accessible lessons based on selected lessons
      var accessible =  Object.getOwnPropertyNames(graph)
        .filter(l => graph[l].prerequisites.every(p => lessons.includes(p)))
        .filter(l => graph[l].proglang == proglang)
        .filter(l => !lessons.includes(l))
        .filter(onlyUnique)
        .sort((a,b) => 
        graph[a].prerequisites.length > graph[b].prerequisites.length? 1 : -1);
      //console.log('selected lessons are', lessons, 'accessible lessons are', accessible);

      // populate the list of lessons in this pathway, and
      // the list of lessons accessible *from* this pathway
      populateselectedList(selectedList,   lessons,    true);
      populateselectedList(accessibleList, accessible, false)

      // make accessible and selected lists sortable
      // special behavior for adding a lesson to selected
      const accessibleSort = new Sortable(accessibleList, sortingOptions);
      const selectedSort = new Sortable(selectedList, {
        ...sortingOptions,
        onUpdate: updateList,
        onAdd: updateList
       });

      function updateList(evt) {
        lessons = selectedSort.toArray();
        updateHistory()               
      }

      function safeToDrop(evt, originalEvt) { 
       // Extract the title of the lesson being dragged, and which lesson it's being inserted relative to
       const draggingLesson = evt.dragged.getAttribute('data-lesson-title');
       const relatedLesson = evt.related.getAttribute('data-lesson-title');
       const oldLessonOrder = selectedSort.toArray().filter(onlyUnique);
       const otherLessons = oldLessonOrder.filter(l => l !== draggingLesson);
       const insertingAfter = evt.willInsertAfter;
       //console.log('old order is', oldLessonOrder)
       //console.log('inserting', draggingLesson, evt.willInsertAfter? 'after' : 'before', relatedLesson);

       // Split the lesson list into prior and later, based on whether insertion happens after or before
       const relatedIndex = otherLessons.indexOf(relatedLesson);
       const before = otherLessons.splice(0, evt.willInsertAfter? relatedIndex + 1 : relatedIndex );
       const after = otherLessons.filter(l => !before.includes(l))
       //console.log('before', before, 'after', after)
       
       // Invalid Case 1: dragging lesson is a prereq of a prior one
       const tooLate = before.find(l => graph[l].prerequisites.includes(draggingLesson))
       if(tooLate) {
         console.error(`Invalid move: ${draggingLesson} must come before ${tooLate}`);
         return false;
       }
       // Invalid Case 2: dragging lesson depends on a later one
       const draggingPrereqs   = graph[draggingLesson].prerequisites;
       const tooSoon = draggingPrereqs.find(l => after.includes(l))
       if(tooSoon) {
         console.error(`${draggingLesson} must come after ${tooSoon}`)
         return false;
       }
      }

      accessibleSort.option('onMove', safeToDrop);
      selectedSort.option('onMove', safeToDrop);
      
      // revise search params for content links
      document.querySelectorAll('#content a').forEach(link => {
        newLink = new URL(link.href);
        newLink.search = url.search;
        link.href = newLink.href;
      });
    }
    
    function makeEditable(node) {
        node.contentEditable = true;
        node.onkeydown = e => { if(e.key == 'Enter') save(node); }
        node.focus();
    }
    function save(node) {
        if(node.id == "pathwayTitle") { pathway = node.textContent; }
        node.onkeydown = null;
        node.contentEditable = false;
        updateHistory();
    }
    function updateHistory() {
        days = lessons
            .map(t => document.querySelector('[data-lesson-title='+t+'] input'))
            .map(inpt => Number(inpt.value));
        console.log(pathway, lessons, days)
        url.searchParams.set("pathway", pathway);
        url.searchParams.set("lessons", lessons.join(','));
        url.searchParams.set("days", days.join(','));
        history.pushState({}, "", url);
        init();
    }
    </script>
</head>

<body class="article narrative pyret" onload="init();">
    <!--#include virtual="/menubar.ssi" -->
    <div id="body">
        <div id="header">
            <h1 id="pathwayTitle" style="border-bottom: none;" onClick="makeEditable(this)" onBlur="save(this)"></h1>
        </div>
        <div id="content">
            <div id="preamble_disabled" class="lessonSummary">
                <div class="sect1">
                    <div class="paragraph">
                        <p>This is a custom pathway, created just for you. <b>Be sure to bookmark this page</b>, so that you can return to it!</p>
                        <p>While all Bootstrap lessons (*Algebra 2 units not included) are designed to fit in a <i>minimum</i> of one class period for grade-level students, we recommend budgeting at least two class periods for each lesson. You can adjust the number of school days for each lesson, based on where your students are and what they need.
                    </div>
                </div>
            </div>

        <div class="clearfix item two-thirds">
            <div class="sectionbody">
                <h2>Lesson Plans <span id="totalDays" class="day"/></h2>
                <dl id="lesson-list" ></dl>
            </div>
        </div>
        
        <div id="accessible" class="clearfix item one-third">
            <h2>What's within reach?</h2>
            <p/>
            Some or all of lessons you've chosen are a prerequisite to any of the following lessons:
            <dl id="accessible-lesson-list"></dl>
        </div>


        <div class="clearfix item top-border bottom-border">
            <h2>Student Workbooks</h2>
            <p>Every page can be accessed individually from the lesson plans, in both Web and PDF format. You can print only what you need for each day, or get every page combined as a complete <a href="javascript:void(0)" onclick="makeCustomBook(pathway, lessons, { reqPages: true, optPages: false, solns: false, addTOC: true })">Student Workbook</a>. 
            <p/>
            <span id="status">
                <label for="file">Assembling Workbook:</label>
                <progress id="file"></progress>
            </span>
            </p>
        </div>

        <div class="clearfix item bottom-border">
            <h2>Other Resources</h2>
            <p>Of course, there's more to a curriculum than software
            and lesson plans! We also provide a number of resources to educators,
            including standards alignment, a complete student workbook, an answer
            key for the programming exercises and a forum where they can ask
            questions and share ideas.</p>
            <div class="ulist pathway_external_links">
            <ul>
                <li>
                <p><a href="./Glossary.shtml">Glossary</a>&nbsp; - &nbsp;A list of vocabulary words used in this pathway.
                We also provide a <a href="./lib/bilingual-glossary.html">bilingual glossary</a>,
                which defines all vocabulary words across our lessons in English and Spanish.</p>
                </li>

                <li>
                <p><a href="./Alignments.shtml">Standards Alignment</a>&nbsp; - &nbsp;Find out how our materials align with National and State
                Standards, as well as some of the most commonly used math
                 textbooks.</p>
                </li>

                <li>
                <p><a href="./Contracts.shtml">Contracts</a>&nbsp; - &nbsp;Contracts are the reference page for every function used across all of the lessons in the pathway. Most teachers find it useful to provide this page at the back of their students' workbooks, and/or display as a reference in their classroom!</p>
                </li>
            <!--
                <li>
                <p><a href="./resources/index.shtml">Teacher-Only Resources</a>&nbsp; - &nbsp;We also offer several teachers-only materials, including an
                answer key to the student workbook, keys to all the exercises,
                and pre- and post-tests for teachers who are participating in our
                research study. For access to these materials, please fill out the
                <a href="https://docs.google.com/forms/d/e/1FAIpQLSefQhHo-AA6ruZyICrx51OnJp0sU63b_Y3h05f4KZKHiUbPXw/viewform">password request form</a>.
                We'll get back to you soon with the necessary login information.</p>
                </li>
            -->
                <li>
                <p><a href="https://discourse.bootstrapworld.org">Online Community (Discourse)</a>&nbsp; - &nbsp;Want to be kept up-to-date about Bootstrap events, workshops, and curricular
                changes? Want to ask a question or pose a lesson idea for other Bootstrap
                teachers? These forums are the place to do it.</p>
                </li>
            </ul>
            </div>
            </div>
        </div>

    </div>
</body>
</html>
