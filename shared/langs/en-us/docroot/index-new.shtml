<!DOCTYPE html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <title>Bootstrap: Materials</title>
    <link rel="stylesheet" type="text/css" href="https://www.BootstrapWorld.org/styles.css"/>
    <script src="/js/TextRotate.js" ></script>
    <script src="dependency-graph.js"></script>
    <script>
        // values that must be imported from external scripts
        var registerTxtRotation = registerTxtRotation;
        var graph = graph;

        // find out if there's a subject that was passed in
        var subject, params = location.search.substring(1);
        var subject = !params? "none"
            : JSON.parse('{"' + decodeURI(params).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g,'":"') + '"}')["subject"] || "none";
        console.log('subject is', subject);

        // swap "history" for "social studies"
        if(subject == "social-studies") subject = "history";

        // certain lessons are "preferred" depending on the subject
        const subjectPreference = {
            none : ["numbers-inside-video-games","order-of-operations", "coordinates", "ds-intro", "simple-datatypes"],
            math : ["numbers-inside-video-games","order-of-operations", "coordinates", "distance-formula", "function-composition", "displaying-categorical-data", "scatter-plots", "histograms", "measures-of-spread","functions-for-character-animation", "inequalities3-sam", "surface-area-rect-prism", "measures-of-center", "solving-word-problems", "flags", "inequalities2-compound", "linear-regression","distance-formula", "combinatorics-combination", "combinatorics-permutation", "linearity", "linearity2", "problem-decomposition"],
            history : ["ds-intro", "ethics-and-privacy", "threats-to-validity", "correlations", "displaying-categorical-data", "flags", "histograms", "histograms2"],
            science : ["simple-datatypes", "ds-intro", "numbers-inside-video-games", "simple-datatypes", "displaying-categorical-data", "scatter-plots", "histograms", "histograms2", "measures-of-center", "measures-of-spread"],
            cs : ["ds-intro", "simple-datatypes", "contracts", "defining-values", "defining-functions", "re-intro-to-data-structures", "function-composition", "displays-and-lookups", "if-expressions", "making-game-images", "table-methods", "method-chaining", "functions-for-character-animation", "player-animation", "problem-decomposition", "re-adding-collisions", "re-adding-levels", "re-build-your-own-animation", "re-functions-that-ask-questions", "re-key-events", "re-making-pong", "re-nested-structures", "re-refactoring", "re-scoring", "re-structures-reactors-animations", "re-timers", "re-your-own-drawing-functions"]
        };

        // TODO(Emmanuel): remove after July 2022
        const tmpLessonRename = {
            'displaying-categorical-data' : "Bar & Pie Charts",
            'measures-of-spread' : "Box Plots & Spread",
            'measures-of-center' : "Mean, Median, & Mode",
            'flags' : "Geometric Ratio and Proportion",
            'inequalities2-compound': "Compound Inequalities",
            'if-expressions': "Image Scatter Plots",
            'contracts': "Contracts: Name, Domain & Range",
            'checking-your-work' : "Evaluating Correctness"
        }

        // remove lessons that don't belong in the graph
        const lessonsToIgnore = ['__sample-lesson', 'zample-lesson', 'error-analysis', 'hoc-wescheme-intro', 'hoc-winter'];
        lessonsToIgnore.forEach(l => delete graph[l]);

        var rest = Object.keys(graph).filter(l =>  !subjectPreference[subject].includes(l));
        rest.sort((a,b) =>
            graph[a].prerequisites.length < graph[b].prerequisites.length? -1 : 1);
        
        var checked = [];
        var originalOrder = subjectPreference[subject].concat(rest);
        
        // 1) Starting with preferred lessons, then non-preferred lesson in prerequisite order,
        // draw the container for each lesson and add it to the lesson explorer
        // 2) Get the search placeholder text rotating
        // 3) Register the resize handler and do a resize
        function draw() {
            originalOrder.forEach(l => {
                // if we don't have a matching lesson in the graph
                if(!graph[l]) {
                    console.warn(l, 'is listed as a preferred lesson, but is not in the graph');
                    return; 
                }
                const container = document.createElement("div");
                graph[l].title = tmpLessonRename[l] || graph[l].title;
                container.id  = l;
                container.className =  "lessonContainer";
                container.innerHTML = `
                    <span class="lessonTitle">${graph[l].title}</span>
                    <span class="lessonDescription rightTip">${graph[l].description}</span>`;
                container.onclick = () => update(container);
                document.getElementById('lessonExplorer').appendChild(container);
            });
            function updatePlaceholder(e, txt) { e.placeholder = txt; }
            if(registerTxtRotation) {
                registerTxtRotation(document.getElementById("searchBox"), updatePlaceholder);
            }
            window.addEventListener('resize', resize);
            resize();
        }

        var resizeTimeout;
        function resize() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout( () => {
                var containers = document.getElementsByClassName('lessonContainer');
                var pageWidth = document.getElementById("lessonExplorer").clientWidth;
                if(containers.length == 0) return; // no lessons, so no work to do!
                var containerWidth = containers[0].offsetWidth + 
                    2*parseInt(getComputedStyle(containers[0]).marginLeft);
                var rowCount = Math.floor(pageWidth/containerWidth);

                var descriptions = document.getElementsByClassName('lessonDescription');
                [...descriptions].forEach((d, i) => {
                    var isBottomRow = ((descriptions.length - i) <= rowCount)
                        && i > rowCount;
                    var tipDirection = isBottomRow? "topTip"
                        : (i+1)%rowCount? "rightTip" : "leftTip";
                    d.className = "lessonDescription " + tipDirection;
                });
            }, 500);
        }

        function update(container) {
            // new prereqs that require an emphasis effect
            var newPreqs = [];

            // if this comes from a container action, update the list of checked lessons
            if(container) {
                var name = container.id;
                newPreqs = graph[name].prerequisites.filter(p => !checked.includes(p));
                checked = container.classList.contains('teaching')?
                    // remove the lesson, and any lesson that lists it as a prerequisite
                    checked.filter(l => l !== name && !graph[l].prerequisites.includes(name))
                    // add the lesson, and any of its prerequisites
                    : [...new Set([name, ...checked , ...graph[name].prerequisites])];
            }

            // sort with the shortest list of prereqs listing first
            checked.sort((a,b) => 
                graph[a].prerequisites.length > graph[b].prerequisites.length? 1 : -1);

            // update the list of accessible lessons
            var accessible =  Object.getOwnPropertyNames(graph).filter(name => 
                graph[name].prerequisites.every(p => checked.includes(p)));

            // update the counts and summary display
            document.getElementById("checkedCount").innerHTML = checked.length;
            document.getElementById("accessibleCount").innerHTML = accessible.length - checked.length;
            document.getElementById('summary').style.display = checked.length > 0? "block" : "none";
            document.getElementById('selectedLessons').innerHTML = checked.map(n => 
                graph[n].title).join(", ");

            // update the lesson display
            Object.getOwnPropertyNames(graph).forEach(name => {
                var lesson = graph[name];
                var container = document.getElementById(name);
                container.style.animationPlayState = "paused";

                // Add styles. If there are new prerequisites being added, animate them
                if(checked.includes(name)) {
                    container.classList.add("teaching"); 
                    container.classList.remove("accessible");
                    container.style.animationPlayState = newPreqs.includes(name)? "running" : "paused";
                } else if(accessible.includes(name)) {
                    container.classList.remove("teaching");
                    container.classList.add("accessible");
                } else {
                    container.classList.remove("accessible", "teaching");
                }
            });
        }

        // uncheck all the lessons, then update
        function reset() { 
            document.getElementById('searchBox').value = ''; 
            search(); // redo search with no search items
            checked = []; 
            update(); 
        }

        var searchTimeout;
        function search() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout( () => {
                const explorer = document.getElementById('lessonExplorer');
                var str = document.getElementById('searchBox').value;
                var results;

                if(str) {
                    results = Object.getOwnPropertyNames(graph).map(id => {
                        var data = Object.values(graph[id]).join(" ");
                        var regexp = new RegExp("\\b" + str, "gi");
                        return { id: id, matches: [...data.matchAll(regexp)].length };
                    });
                } else {
                    results = originalOrder.map((id, i) => ({id: id, matches: 1}));
                }
                // sort the results in *reverse order*, since we append nodes at the beginning
                results = results.sort((a, b) => a.matches > b.matches? -1 : 1);
                console.log(results);
                const bestMatch = results[0].matches;
                const step = bestMatch? 1 / (bestMatch + 1) : 0.25; 
                results.reverse().forEach(r => {
                    const container = document.getElementById(r.id);
                    container.style.opacity = (1 + r.matches) * step;
                    explorer.insertBefore(container, explorer.firstChild)
                })
                resize();
            }, 250);
        }

        var showButtonTimeout;
        function showPathwayButton() {
            clearTimeout(showButtonTimeout);
            showButtonTimeout = setTimeout( () => {
                var button = document.getElementById('pathwayButton');
                var name = document.getElementById('pathwayName').value;
                button.style.display =  (name.length > 0)? "inline-block" : "none";
            }, 100)
        }

        function makePathway() {
            var title = document.getElementById('pathwayName').value;
            window.open(`customPathway.shtml?title=${title}&lessons=${checked}`, '_blank').focus();
        }
    </script>
    <style>
        #pathways { min-height: 170px; transition: all 0.25s linear;}
        #pathways:hover { min-height: 400px; }
        #lessonExplorer {
            width: 100%;
            overflow-y: scroll;
            border: solid 1px black;
            text-align: center;
        }
        .lessonContainer {
            display:    inline-table;
            position:   relative;
            height:     60px;
            width:      150px;
            color:      black;
            text-align: center;
            border:     solid 1px gray;
            font-weight: bold;
            margin:     10px;
            background-color: white;
            cursor:     pointer;
            transition: background-color linear 0.5s;
        }
        .accessible {background-color: #3c3cff4f; }
        .teaching {
            opacity: 1; 
            background-color: #a6dfba !important;
            box-shadow: black 3px 3px 3px; 
            animation: emphasize 1s cubic-bezier(.36,.07,.19,.97) both 1;
            animation-play-state:  paused;
        }
        .lessonContainer .lessonTitle { vertical-align: middle; display: table-cell; }
        .lessonDescription { 
            visibility: hidden;
            width: 200px;
            font-weight: normal;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            box-shadow: black 3px 3px 3px; 
        }
        .rightTip { left: 100%; }
        .leftTip  { right: 100%; }
        .topTip   { bottom: 105%; left: 50%; margin-left: -100px;}

        .lessonDescription::after {
          content: "";
          position: absolute;
          border-width: 5px;
          border-style: solid;
          border-color: transparent;
        }

        .rightTip::after { top:  10%; right: 100%; margin-left: -5px; border-right-color: black;}
        .leftTip::after  { top:  10%; left:  100%; margin-left:  1px; border-left-color:  black;}
        .topTip::after   { top: 100%; left:   50%; margin-top:   2px; border-top-color:   black;}

        .lessonContainer:hover { background-color: #ccffcc; opacity: 1; z-index: 2;}
        .lessonContainer:hover .lessonDescription { visibility: visible; }

        .legend { 
            display:  inline-block; 
            box-shadow: none !important;
        }

        #search { 
            background: black; 
            color: white; 
            width:  100%; 
            padding: 10px; 
            font-size:  12pt;
            box-shadow: #cb76e6 1px 1px 2px;
        }
        #searchBox { width: 300px; margin: 0px 10px; font-size:  12pt; }
        .count {font-weight: bold;}
        #pathwayButton { display: none; }
        #reset { 
            float:      right; 
            font-size:  28pt;
            margin-top: -4pt;
            color:      white; 
            background: none; 
            border:     none;
            text-decoration: none;
        }
        #reset:hover { text-shadow:  3px 1px 3px #cb76e6; }

        @keyframes emphasize {
            10%, 90%      { transform: translate3d(-1px, 0, 0); }
            20%, 80%      { transform: translate3d( 2px, 0, 0); }
            30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
            40%, 60%      { transform: translate3d( 4px, 0, 0); }
        }
        ul.tab { display: table; width: 100%; }
        ul.tab .tablinks {display:  table-cell; }
        .tablinks img {width: 100%; max-width: 150px;}
    </style>

</head>

<body onload="draw(); update();  ">
    <!--#include virtual="/menubar.ssi" -->
    <div id="body">
        <div class="clearfix item">
            <h1>Materials</h1>
            <p>
            Bootstrap is completely free, field-tested and research-validated, with a focus on deep exploration that supports and engages all kinds of learners. Our integrated computing modules have been proven to support math transfer and can be mixed and matched to supplement what you're already doing in your classroom.
            </p>
            <p>
            All of our courses are <a href="Standards.shtml">aligned to National and State Standards</a> - including NGSS, CCSS, CSTA, K12-CS, and more! We work hard to provide an "everything you need, all in one place" experience, offering <a href="courses/hour-of-code/">Hour of Code</a> activities and four curated pathways that come with a detailed student workbook, teacher materials, and an optional capstone project that ties the entire course together. You can also mix and match our materials by building your own pathway.
            </p>
            <p>
            After Bootstrap,  students are prepared to tackle <a href="BeyondBootstrap.shtml">several college-level textbooks</a>, including one that bridges <strong>from Pyret to Python</strong>.
            </p>
        </div>
        <div id="pathways" class="item bottom-border">
            <ul class="tab">
                <li class="tablinks"><a href="/materials/algebra"><img src="courses/algebra-pyret/images/Logo.png" alt="Bootstrap:Algebra"/></a>
                    <div id="algebra" class="tabcontent">
                        <h3>Recommended for: Grades 7-12</h3>
                        The Bootstrap:Algebra pathway applies mathematical concepts and introductory programming principles. Students use an <i>algebraic programming language</i> to build flags using function composition, make a rocket blast off using linear, quadratic (or even exponential) functions, protect a butterfly using inequalities, and even create a complete videogame! And of course, all materials are <a href="courses/algebra-pyret/pathway-standards.shtml">aligned</a> to National and State Standards for Mathematics.  
                    </div>
                </li>
                <li class="tablinks"><a href="/materials/data-science"><img src="courses/data-science/images/Logo.png" alt="Bootstrap:Data Science"/></a>
                    <div id="data" class="tabcontent">
                        <h3>Recommended for: Grades 7-12</h3>
                        What defines the greatest musician of all time? How is the population of your state changing? Does drinking milk really make you taller? Answering these questions involves collecting and manipulating data, from sports stats to record sales to census data.  This pathway teaches students to view programs as questions we ask of data.  Students form their own questions about the world around them, and learn how to analyze data critically and carefully to find answers.  Business, science, and history teachers can utilize this module to help students make inferences from data.  Math teachers can use this module to introduce foundational concepts in statistics.  It also works great as a module for AP CS Principles' unit on data!
                    </div>
                </li>
                <li class="tablinks"><a href="/materials/reactive"><img src="courses/reactive/images/Logo.png" alt="Bootstrap:Reactive"/></a>
                    <div id="structures" class="tabcontent">
                        <h3>Recommended for: Grades 9-12</h3>
                        <a href="courses/reactive">Bootstrap:Reactive</a></b> goes deeper into programming, building events and data structures on top of the foundation laid by our intro course and allowing students to build far more sophisticated programs. We've listed the breakdown of concepts in the table below, so you can find the best fit for your class. Students learn how the world-based event loop that drives their Bootstrap:Algebra game works, and use it to create animations using simple datatypes for their world. They then learn about data structures, and design a World structure for a sophisticated game of their own design.
                        </p>
                    </div>
                </li>
                <li class="tablinks"><a href="/materials/physics"><img src="courses/physics/images/Logo.png" alt="Bootstrap:Physics"/></a>
                    <div id="hoc" class="tabcontent">
                        <h3>Recommended for: Grades 9-10</h3>
                        Our Physics pathway helps students understand basic physics concepts by incorporating computer programming as one of the key tools for building models of the physical world. Targeted to ninth grade, during which every student is expected to take science, this initiative is designed to spark students' interest in subjects related to science, technology, engineering, and math (STEM) for the rest of their academic careers. This initiative also combats a root cause of inequality of opportunity in pursuing STEM careers: disparate access to quality teaching in middle and high school. The module is aligned to the <a href="https://www.aapt.org/Resources/physicsfirst.cfm">Physics First</a> course, allowing teachers to easily embed computational modeling in their physics classes.
                    </div>
                </li>
            </ul>
        </div>
        <div class="item bottom-border">
            <h2>Build your own pathway</h2>

            Click to select the lessons you would like to teach!
            <br/>
            <ul style="margin: 6px 0px;">
                <li>When you select a lesson, it - <b>and its prerequisites</b> - will <span class="legend teaching">turn green</span>.</li>
                <li>If you haven't select any lesson yet, the <span class="legend accessible">blue ones</span> are lessons you can teach right away, with <i>no prerequisites.</i> And the more lessons you select, the more lessons are immediately within reach!</li>
            </ul>
            <p/>
            <b>Select</b> as many lessons as you'd like to include in your pathway before naming and saving.
            <p/>

            <div id="search">
                Looking for something specific? 
                <input id="searchBox" type="search" onInput="search()"
                class="txt-rotate" data-period="2000" 
                data-rotate='["Functions", "Privacy", "Ratios", "Games", "HSA.SSE.A.2", "Box Plots", "Ethics", "Order of Operations", "Methods"]'
                placeholder="Search by Concept, Standard, or Keyword"/>
                <a href="javascript:reset()" id="reset" >&#8634;</a>
            </div>
            <p>
            Having taught <span id="checkedCount" class="count">LOADING</span> Bootstrap lessons, you can <i>immediately</i> jump into <span id="accessibleCount" class="count">LOADING</span> other lessons!
            </p>
            <div id="lessonExplorer"></div>
            <p/>
            <div id="summary">
                <strong>The lessons you've selected - and their prerequisites! - are:</strong> <span id="selectedLessons"></span>. 
                <p/>
                We've created a custom pathway just for you, with links to all the lesson materials, workbook pages, activities, and more! Enter a name to see your personalized pathway, and bookmark the resulting page to return to it at any time!
                <p/>
                <input type="text" id="pathwayName" placeholder="Name your pathway" onInput="showPathwayButton()"/>
                <input type="button" id="pathwayButton" value="My Custom Pathway" onclick="makePathway()" />
            </div>
        </div>
    </div>
</body>
</html>
