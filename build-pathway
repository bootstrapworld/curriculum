#!/bin/bash
# build-pathway
# build script for curriculum
# Type build-pathway --help for help.

export BOOK=
export DEBUG=
export FORCE=
export SUPERFORCE=
export LANGUAGE=en-us
export LINT=
export NOPDF=
export PROGLANG=
export TOPDIR=$(pwd)
export EXPANDEDWARNINGS=

#SEMESTER=spring
#MONTH=$(date +%m)
#test "$MONTH" -gt 7 && SEMESTER=fall
#export SEMESTER_YEAR=$SEMESTER$(date +%Y)

eval $(grep '^SEMESTER=' ./deploy-to-brown)
eval $(grep '^YEAR=' ./deploy-to-brown)
export SEMESTER YEAR
SEMESTER_YEAR=$SEMESTER$YEAR
#JAVASCRIPTDELAY="--javascript-delay 5000"
#JAVASCRIPTDELAY="--window-status ready_to_print"
#JAVASCRIPTDELAY="--javascript-delay 100000 --window-status ready_to_print"
JAVASCRIPTDELAY="--run-script 'MathJax.Hub.Queue(function(){window.status=\"ready_to_print\"})' --window-status ready_to_print"

ARGS=
HELP=
LASTMOD=2021-09-25 # last modified
PDFMARGIN=0mm
SED=sed
MDV=md5sum
VERSION=
NOPARALLEL=

if test -f ./.build-pathway.rc; then
  . ./.build-pathway.rc
fi

while test $# -ne 0; do
  arg=$1; shift
  if test "$arg" = --add-exercises -o "$arg" = -e; then
    :
  elif test "$arg" = --book -o "$arg" = -b; then
    BOOK=1
  elif test "$arg" = --debug -o "$arg" = -d; then
    DEBUG=1
  elif test "$arg" = --expanded-warnings -o "$arg" = -w; then
    EXPANDEDWARNINGS=1
  elif test "$arg" = --force -o "$arg" = -f; then
    FORCE=1
  elif test "$arg" = --help -o "$arg" = -h; then
    HELP=1
  elif test "$arg" = --language; then
    LANGUAGE=$1; shift
  elif test "$arg" = --lint -o "$arg" = -l -o "$arg" = --verify-links; then
    LINT=1
  elif test "$arg" = --no-pdf -o "$arg" = --nopdf -o "$arg" = -n; then
    NOPDF=1
  elif test "$arg" = --no-parallel -o "$arg" = --noparallel; then
    NOPARALLEL=1
  elif test "$arg" = --proglang; then
    PROGLANG=$1; shift
  elif test "$arg" = --superforce -o "$arg" = --super-force -o "$arg" = -F; then
    SUPERFORCE=1
  elif test "$arg" = --version -o "$arg" = -v; then
    VERSION=1
    #
    # some common combos
  elif test "$arg" = -df; then
    DEBUG=1; FORCE=1
  elif test "$arg" = -dfl; then
    DEBUG=1; FORCE=1; LINT=1
  elif test "$arg" = -dfln; then
    DEBUG=1; FORCE=1; LINT=1; NOPDF=1
  elif test "$arg" = -dfn; then
    DEBUG=1; FORCE=1; NOPDF=1
  elif test "$arg" = -dn; then
    DEBUG=1; NOPDF=1
  else
    arg1=${arg#--}
    if test "$arg1" != "$arg"; then
      echo Mistyped option \'$arg\'?
    fi
    ARGS="$ARGS $arg"
  fi
done

test $BOOK && NOPDF= || NOPDF=1

test $SUPERFORCE && FORCE=1

TMPTMP=$(mktemp); rm -f $TMPTMP
TMPPFX=$(basename $TMPTMP)

export ABYSS=page-not-found

WKH2P_PFX=.wkh2p-tmp

export NUMCORES=$(getconf _NPROCESSORS_ONLN)

export WORKBOOKPAGE=
export DATASHEETPAGE=
export ALLPATHWAYLESSONS=

function displayhelp() {
  echo Usage: build-pathway [--language L] [--proglang P] [--debug] [--force] [--no-pdf] [--lint] [--help] [--version] pathway ...
  echo
  echo Builds a document tree for the given pathway argument\(s\)
  echo under the \'distribution\' directory. If no pathway arg supplied,
  echo builds for all pathways in the \'pathways\' directory.
  echo
  echo Options:
  echo "  " --language L: Build doctree for natural language L. Default: en-us
  echo "  " --proglang P: Build doctree for programming language P.
  echo "                " P is one of wescheme, pyret.
  echo "                " An appropriate default is used depending on the pathway.
  echo "  " --debug: Keep around for inspection/debugging various temp files
  echo "           " in the \'distribution\' directory.
  echo "  " --force, -f: Regenerate doctree from scratch without relying on previous runs.
  echo "  " --superforce, -F: Regenerate doctree from scratch after updating code.
  echo "  " --book, -b: Generate workbook PDFs.
  echo "  " --no-pdf: Don\'t generate PDF files. This is to speed things up
  echo "            " during debugging when PDF output isn\'t necessary.
  echo "  " --lint: \(1\) Ensure the summary tables in lesson plans have the required rows.
  echo "          " \(2\) Verify all the links used in the doctree.
  echo "          " in the pathway doctree\'s top directory.
  echo "  " --help: Display this help and exit.
  echo "  " --version: Display build-way version and exit.
  echo
  echo Order of arguments/options doesn\'t matter.
  exit
}

if test $HELP; then displayhelp; fi

if test $VERSION; then
  echo build-pathway version $LASTMOD
  exit
fi

if which gsed | grep -q .; then
  SED=gsed
fi

if which md5 | grep -q .; then
  MDV=md5
fi

if ! which curl | grep -q .; then
  echo
  echo WARNING: Missing \'curl\' tool; can\'t do --lint
  LINT=
fi

if ! which wkhtmltopdf|grep -q .; then
  echo
  echo WARNING: Missing wkhtmltopdf: PDF workbooks can\t be created
fi

if test "$ARGS" = ""; then
  ARGS="pathways/*"
fi

echo '== Generated Documentation' > index.adoc
echo >> index.adoc
echo link:README.html[Authoring Guide] >> index.adoc
echo >> index.adoc
echo https://github.com/bootstrapworld/curriculum[\`curriculum\` Repo] >> index.adoc

mkdir -p distribution/$LANGUAGE/courses

echo '== Generated Documentation' > distribution/index.adoc

if test $SUPERFORCE; then
  rm -fr prog distribution/$LANGUAGE/lib distribution/$LANGUAGE/extlib
fi

mkdir -p prog
mkdir -p distribution/$LANGUAGE/lib
mkdir -p distribution/$LANGUAGE/extlib

function checkmd5nochange() {
  local distDir=$1
  local repoDir=$2
  #echo doing checkmd5nochange $distDir $repoDir
  test -d $distDir/.cached || mkdir -p $distDir/.cached
  local savef=$distDir/.cached/.checksum.md5txt
  local currdir=$(pwd)
  cd $repoDir
  newchecksum=$(find . -type f -exec $MDV {} \; | $MDV | cut -d " " -f 1)
  cd $currdir
  if test -f $savef; then
    savedchecksum=$(cat $savef)
    if test "$newchecksum" = "$savedchecksum"; then
      return 0
    else
      #echo saving i $savef
      echo $newchecksum > $savef
      return 1
    fi
  else
    #echo saving ii $savef
    echo $newchecksum > $savef
    return 1
  fi
}

export PROGDIR=$TOPDIR/prog

if ! checkmd5nochange $PROGDIR $TOPDIR/shared/langs; then
  # if $LANGUAGE != en-us, and
  # shared/langs/$LANGUAGE isn't sufficiently populated,
  # we'll put in the en-us files first and shadow them later
  #
  cp -pr $TOPDIR/shared/langs/en-us/* $PROGDIR
  cp -p $TOPDIR/shared/langs/en-us/*.css distribution/$LANGUAGE/lib
  #
  if test $LANGUAGE != en-us -a -d $TOPDIR/shared/langs/$LANGUAGE; then
    cp -pr $TOPDIR/shared/langs/$LANGUAGE/* $PROGDIR
  fi
  cp -pr $PROGDIR/docroot/* distribution/$LANGUAGE
  mkdir -p distribution/$LANGUAGE/lib/Badges
  mkdir -p distribution/$LANGUAGE/lib/images
  cp -pr $PROGDIR/Badges/* distribution/$LANGUAGE/lib/Badges
  cp -pr $PROGDIR/images/* distribution/$LANGUAGE/lib/images
  # TODO: may need to revisit for unforced LANGUAGE != en-us
fi

# escaped characters are: (1) go to beginning of line, (2) erase to
# end of line, and (3) truncate the argument to terminal width
function overwrite() {
  if test  $EXPANDEDWARNINGS; then
    echo $@
  else
    echo $'\e[1A\e[K\033[?7l'$@
  fi
}

if test ! -d distribution/$LANGUAGE/extlib/MathJax*; then
  cp -pr $TOPDIR/extlib/MathJax* distribution/$LANGUAGE/extlib
fi

if ! checkmd5nochange distribution/$LANGUAGE/lib $TOPDIR/lib; then
  overwrite 'copying' distribution/$LANGUAGE/lib
  cp -p $TOPDIR/shared/langs/en-us/*.css distribution/$LANGUAGE/lib
  cp -p $TOPDIR/lib/*.rkt $TOPDIR/lib/ano* $TOPDIR/lib/.hta* $PROGDIR
  cp -p $TOPDIR/lib/*.png $TOPDIR/lib/*.css $TOPDIR/lib/*.js distribution/$LANGUAGE/lib
fi

function insertbodyid() {
  local f=$1
  $SED -i \
    -e 's/<body[^>]*>/\0\n<div id="body">/' \
    -e 's/<\/body>/<\/div>\n\0/' \
    $f
}

function insertgdrivesave() {

  local f=$1
  local f_head=${f%.*}
  local f_ext=${f##*.}
  local other_f=$f_head-gdrive-import.html
  local pageTitle=
  if test -f $f_head.adoc; then
    pageTitle=$(grep '^= ' $f_head.adoc|head -n 1|$SED -e 's/^= *//' -e 's/  *$//')
    pageTitle=$(echo $pageTitle|$SED -e 's/[“”]/\\\\"/g')
    pageTitle=$(echo $pageTitle|$SED -e 's/\//\\\//g')
  fi
  if test ! "$pageTitle"; then
    pageTitle=$f_head
  fi
  #echo pageTitle of $f_head.adoc is $pageTitle
  #FIXME: pathname should be corrected, again
  local hrefPrefix=https://www.bootstrapworld.org/materials/$SEMESTER_YEAR/$LANGUAGE/courses/$TGTPATHWAY/$LESSONSUBDIR

  hrefPrefix=$(echo $hrefPrefix|$SED -e 's/\/$//'|$SED -e 's/\//\\\//g')

  local TMPFILE=$TMPPFX-$f_head

  cat > $TMPFILE-1.txt <<EOF
  <script>
  window.status = window.status || 'ready_to_print';
  window.___gcfg = {
  parsetags: 'explicit'
  };
  </script>
  <script src="https://apis.google.com/js/platform.js" async defer></script>
  <script>function renderSaveToDrive() {
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    gapi.savetodrive.render('savetodrive-div', {
    src:%INSERTGDRIVEURL,
    filename:"%INSERTGDRIVELESSONTITLE",
    sitename:"Bootstrap, Brown University"
  });
  if(isSafari){
    var warning = document.createElement("div");
    warning.id = "safariWarning";
    warning.innerHTML = "You appear to be using Safari, which interferes with Google's Save-to-Drive button. You can fix it by going to Preferences, clicking 'Privacy', and making sure that 'Prevent cross-site tracking' is <b>not</b> checked."
    var button = document.getElementById("savetodrive-div");
    button.parentNode.insertBefore(warning, warning.nextSibling);
  }
}
</script>
EOF
  cat > $TMPFILE-2.txt <<EOF
  <div id="savetodrive-div"></div>

EOF
  $SED -i \
    -e 's/^\(<body  *[^>]*\)>/\1 onload="renderSaveToDrive()">/' \
    -e 's/<\/head>/%INSERTGDRIVESAVE1\n\0/' \
    -e 's/<\/h1>.*/\0\n%INSERTGDRIVESAVE2/' \
    -e '/^<div id="body"/ s/id="body"/\0 onload="renderSaveToDrive()"/' \
    $f
  if test $WORKBOOKPAGE; then
    $SED -i \
      -e 's/^<body class="/\0workbookpage /' \
      $f
  elif test $DATASHEETPAGE; then
    $SED -i \
      -e 's/^<body class="/\0datasheetpage /' \
      $f
  fi
  if ! grep -q %INSERTGDRIVESAVE2 $f; then
    $SED -i \
      -e 's/<div id="header">/\0\n%INSERTGDRIVESAVE2/' \
      $f
  fi
  $SED -i \
    -e '/%INSERTGDRIVESAVE1/r '$TMPFILE-1.txt \
    -e '/%INSERTGDRIVESAVE2/r '$TMPFILE-2.txt \
    -e 's/%INSERTGDRIVESAVE[12]//' \
    $f

  rm $TMPFILE-[12].txt

  $SED -i \
    -e 's/%INSERTGDRIVELESSONTITLE/'"$pageTitle"'/' \
    $f

  cp -p $f $other_f

  $SED -i \
    -e "s/%INSERTGDRIVEURL/(window.location.href.match(\/\\\\\/$\/)?(window.location.href+'index-gdrive-import.html'):(window.location.href.replace(\/([^\\\\\/]+)\\\\.([^.\\\\\/]+)$\/, '\$1-gdrive-import.html')))/" \
    $f

  $SED -i \
    -e 's/%INSERTGDRIVEURL/window.location.href/' \
    $other_f

  modifygdrivepage $other_f $f
}

function adjustgdrivecolgroup() {
  local f=$1

  local CTEMP=$(mktemp); rm -f $CTEMP

  local CTEMPFILE=$(basename $CTEMP)-cols.txt

  grep '^<col style.*> *$' $f > $CTEMPFILE

  local num=$(wc -l $CTEMPFILE|sed -e 's/^ *\([^ ]*\).*/\1/')

  if test $num -eq 0; then
    rm -f $CTEMPFILE
    return
  fi

  sed -i \
    -e 's/^<col //' \
    -e 's/> *$//' \
    $CTEMPFILE

  local i=1

  local cline
  local flnum

  while test $i -le $num; do
    cline=$(sed -ne "$i p" $CTEMPFILE)

    flnum=$(grep -n '^<th ' $f|sed -e 1q|sed -e 's/^\([^:]*\).*/\1/')

    sed -i \
      -e "$flnum s/^<th /<th%GDRIVE $cline /" \
      $f

    i=$(expr $i + 1)

  done

  rm -f $CTEMPFILE

  sed -i \
    -e 's/^<th%GDRIVE /<th /' \
    $f

}

function modifygdrivepage() {
  local f=$1
  local h=$2

  $SED -i \
    -e '/include virtual=".menubar.ssi"/d' \
    -e 's/^<p>Relevant Standards<select.*<\/select><\/p> *$/<p>Standards<\/p>/' \
    -e '/^<p><em>Select one or more standards from the menu on the left.*<\/p> *$/d' \
    -e 's/\(class="paragraph \)alignedStandardsIntro/\1/' \
    -e 's/\(class="dlist \)alignedStandards /\1/' \
    -e 's/href=\("\(https\|http\):\/\/\)/href%GDRIVEEXTERNALHREF=\1/g' \
    -e 's/<div/<span/g' \
    -e 's/<\/div>/<\/span>/g' \
    -e 's/<dt class="hdlist1">/\0<br\/>/g' \
    -e 's/<span class="sect1 lesson-section-1">/\0<hr\/>/g' \
    -e 's/<span class="openblock acknowledgment">/\0<hr\/>/g' \
    -e 's/<h2.*>\(.*\)<span class="duration">\(.*\)<\/span><\/h2>/<table class="grid-none frame-none section-heading"><tr><td width="65%">\1<\/td><td width="35%">\2<\/td><\/tr><\/table>/g' \
    -e 's/<tt\(.*\)>\(.*\)<\/tt>/<span\1>\2<\/span>/g' \
    $f
  $SED -i \
    -e 's/^\(.*\)<span\(  *class="paragraph lesson-point"\)/%GDRIVESPANDIV\1<div\2/g' \
    $f
  $SED -i \
    -e '/^%GDRIVESPANDIV/,/^<\/span>/ s/^<\/span>/<\/div>/' \
    -e 's/^%GDRIVESPANDIV//' \
    $f
  $SED -i \
    -e 's/href="/\0'$hrefPrefix'\//g' \
    $f
  $SED -i \
    -e 's/%GDRIVEEXTERNALHREF//g' \
    -e '/^ *<link rel="stylesheet".*\.css/d' \
    -e '/^ *<script .*\(codemirror\|runmode\|scheme2\|pyret-mode\|bootstraplesson\)/d' \
    -e '/<span class="tooltiptext">.*<\/span>/d' \
    $f
  echo "<style>" > $TMPFILE.css
  cat $PATHWAYROOTDIR/../../lib/gdrive-import.css >> $TMPFILE.css
  echo "</style>" >> $TMPFILE.css
  $SED -i \
    -e '/<\/title>/r '$TMPFILE.css \
    $f

  $SED -i \
    -e 's/<span class="begin-ignore-for-gdrive">/<!--\0/g' \
    -e 's/<span class="end-ignore-for-gdrive"><\/span>/\0-->/g' \
    $f

  $SED -i \
    -e '/studentAnswer/ s/&#x5f;/\0\0/g' \
    $f

  rm -f $TMPFILE.css

  adjustgdrivecolgroup $f

  $SED -i \
    -e 's/<span class="\(begin\|end\)-ignore-for-gdrive"><\/span>//g' \
    $h

}

function removelogos() {
  local f=$1
  $SED -i \
    -e '/^<h2 .*<img src="bootstraplogo.png"/d' \
    $f
}

function removecodetags() {
  local f=$1
  $SED -i \
    -e 's/<code>\(<tt\)/\1/g' \
    -e 's/\(<\/tt>\)<\/code>/\1/g' \
    $f
}

function cleanuptitle() {
  local f=$1
  $SED -i \
    -e '/^<title>/ s/<\/*span[^>]*>//g' \
    $f
}

function cleanupduration() {
  # cleans up a long-winded autogenerated h2 id
  local f=$1
  $SED -i \
    -e '/^<h2 id/ s/\(begin\|end\)curriculumspan/_/g' \
    -e '/^<h2 id/ s/curriculumspan_class//g' \
    $f
}

function insertsectionselfie() {
  local f=$1
  $SED -i \
    -e '/^<h2 id=/s/^<h2 id="\([^>]*\)>\(.*\)<\/h2>/<h2 id="\1><span class="section-link"><a href="#\1><span class="section-link-symbol">\&#128279;<\/span><\/a><\/span>\2<\/h2>/' \
    $f
}

function lintlesson() {
  local f=$1

  test $LINT || return

  for g in Prerequisites 'Lesson Goals' Materials Preparation 'Relevant Standards'; do
    if ! grep -q "^<p>$g\>" $f; then
      echo
      echo WARNING: Lesson $LESSONPLAN missing summary-table row for \"$g\"
    fi
  done

}

function addanalytics() {
  local f=$1
  $SED -i \
    -e '/^<body/r $TOPDIR/lib/analytics.txt' \
    $f
}

function bumpcsspathdir() {
  local f=$1
  #echo doing bumpcsspathdir $f
  $SED -i \
    -e '/^<link.*curriculum.css/s/\.\.\(\/lib\/curriculum\.css\)/\1/' \
    $f
}

function resolveabbrevs() {
  #echo doing resolveabbrevs "$@"
  local f=$1
  local mathjaxneeded=
  local codemirrorneeded=
  if grep -q %CURRICULUMSCRIPT $f; then
    mathjaxneeded=1
  fi
  CODELANG=pyret
  if test "$PROGLANG" = wescheme; then
    CODELANG=racket
  fi
  $SED -i \
    -e 's/<pre>/<pre><code class="'$CODELANG'">/g' \
    -e 's/<\/pre>/<\/code><\/pre>/g' \
    -e 's/<code>/<code class="'$CODELANG'">/g' \
    $f
  if grep -q 'class=\"\(pyret\|racket\)\"' $f || grep -q 'class=\"circleevalsexp\"' $f; then
    codemirrorneeded=1
  fi
  $SED -i \
    -e 's/%PYRETKEYWORD%\([^%]*\)%END%/<span class="pyretkeyword">\1<\/span>/g' \
    \
    -e 's/%CURRICULUMCOMMA%/,/g' \
    \
    -e 's/<p>\(%CURRICULUMCOMMENT%\)/\1/' \
    -e 's/\(%ENDCURRICULUMCOMMENT%\)<.p>/\1/' \
    -e 's/%CURRICULUMCOMMENT%/<!-- /' \
    -e 's/%ENDCURRICULUMCOMMENT%/\n-->/' \
    \
    -e 's/%CURRICULUMSCRIPT%/<script type="math\/tex"/g' \
    -e 's/%BEGINCURRICULUMSCRIPT%/>/g' \
    -e 's/%ENDCURRICULUMSCRIPT%/<\/script>/g' \
    \
    -e 's/%CURRICULUMPMMATH%/<!--CURRICULUMPMMATH<tt>/g' \
    -e 's/%ENDCURRICULUMPMMATH%/<\/tt>CURRICULUMPMMATH-->/g' \
    \
    -e 's/%CURRICULUM\([^%]*\)%/<\1/g' \
    -e 's/%BEGINCURRICULUM\([^%]*\)%/>/g' \
    -e 's/%ENDCURRICULUM\([^%]*\)%/<\/\1>/g' \
    \
    -e 's/&#8656;/\&lt;=/g' \
    -e 's/&#8594;/-\&gt;/g' \
    \
    -e 's/^\(<div id="preamble\)">/\1_disabled" class="lessonSummary">/' \
    $f
  $SED -i \
    -e '/%SIDEBARSECTION%/,/%ENDSIDEBARSECTION%/s/\(<\/div>\)<\/p>/\1/' \
    $f
  $SED -i \
    -e '/%SIDEBARSECTION%/,/%ENDSIDEBARSECTION%/s/<p>\(<div\)/\1/' \
    $f
  $SED -i \
    -e 's/%SIDEBARSECTION%/--><\/div><div class="sidebar"><div class="sidebartitle">Lesson Pathway, Standards and Practices<\/div><div class="paragraph"><!--/' \
    $f
  $SED -i \
    -e 's/%SIDEBARLESSONSCHECKBOX%/<br\/><input class="sidebarinput" type="checkbox" onchange="toggleNonPrereqDisplay()">\Prerequisites only (★) /' \
    $f
  $SED -i \
    -e 's/%ENDSIDEBARSECTION%/--><\/div><!--/' \
    $f
  if test "$mathjaxneeded"; then
    cat > .cached/.mathjax.txt <<EOF
      <script src="${PATHWAYROOTDIR}../../extlib/MathJax-2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML%2Clocal%2Fmathjaxlocal.js"></script>
      <script>window.status = "not_ready_to_print";</script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/%INSERTMATHJAX\0/' \
      -e '/%INSERTMATHJAX/r .cached/.mathjax.txt' \
      -e 's/%INSERTMATHJAX//' \
      $f
  fi
  if test "$codemirrorneeded"; then
    #FIXME: is codemirror.css needed?
    cat > .cached/.codemirror.txt <<EOF
    <link rel="stylesheet" href="${PATHWAYROOTDIR}../../lib/codemirror.css" />
    <script src="${PATHWAYROOTDIR}../../lib/codemirror.js"></script>
    <script src="${PATHWAYROOTDIR}../../lib/runmode.js"></script>
    <script src="${PATHWAYROOTDIR}../../lib/scheme2.js"></script>
    <script src="${PATHWAYROOTDIR}../../lib/pyret-mode.js"></script>
    <script src="${PATHWAYROOTDIR}../../lib/bootstraplesson.js"></script>
    <script src="${PATHWAYROOTDIR}../../dependency-graph.js"></script>
    <script>var pathwayLessons=[${PATHWAYLESSONS}];</script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/%INSERTCODEMIRROR\0/' \
      -e '/%INSERTCODEMIRROR/r .cached/.codemirror.txt' \
      -e 's/%INSERTCODEMIRROR//' \
      $f
  fi
  tif=.cached/${f%.*}-comment.txt
  if test ! -f $tif; then
    tif=.cached/.${f%.*}-comment.txt
  fi
  if test -f $tif; then
    #echo tif for $f is $tif
    $SED -i \
      -e '/^<body[^>]*>/s/<body[^>]*>/\0%INSERTCURRICULUMCOMMENT/' \
      -e '/%INSERTCURRICULUMCOMMENT/r '$tif \
      -e 's/%INSERTCURRICULUMCOMMENT//' \
      $f
  fi
  if test ! $WORKBOOKPAGE -a ! $DATASHEETPAGE; then
    $SED -i \
      -e 's/^<body class="/\0narrativepage /' \
      $f
  fi
}

function adjustproglangsubdirs() {
  local d=$1
  #echo doing adjustproglangsubdirs $(pwd)/$d

  test -d "$d" || return

  if test -d "$d"/$PROGLANG; then
    cp -p "$d"/$PROGLANG/* "$d"
  fi

  for lang in pyret wescheme; do
    if test -d "$d"/$lang; then
      rm -fr "$d"/$lang
    fi
  done

  for subdir in "$d"/*; do
    if test -d "$subdir"; then
      adjustproglangsubdirs "$subdir"
    fi
  done
}

function shadowcopydir() {
  # srcdir = solution-pages from (previous run + repo)
  # targetdir = pages from repo
  local srcdir=$1
  local targetdir=$2
  #echo doing shadowcopydir from $srcdir to $targetdir
  mkdir -p "$targetdir"

  for f in "$srcdir"/*; do
    if test -f "$f"; then
      g=$(basename "$f")
      targetfile="$targetdir/$g"
      cp -p "$f" "$targetdir"
    elif test -d "$f"; then
      g=$(basename "$f")
      shadowcopydir "$f" "$targetdir"/"$g"
    fi
  done
}

function checkifsinglepdfpage() {
  local fpdf="$1"

  NUMPAGES=$(pdftk $fpdf dump_data|grep NumberOfPages|$SED -e 's/NumberOfPages:  *\([0-9][0-9]*\).*/\1/')

  test "$NUMPAGES" = 1 || (echo;echo WARNING: $fpdf has $NUMPAGES pages)
}

function checkeachinternallink() {
  local f="$1"
  local containingf="$2"

  if ! test -f "$f"; then
    export BROKEN_INTERNAL_LINKS=1
    test $EXPANDEDWARNINGS || echo $'\033[?7h'
    echo
    echo WARNING: Invalid internal link $f in $LESSONSUBDIR/$containingf
  fi
}

function checkeachexternallink() {
  local f="$1"

  local invalid=

  # possible alternative? wget -q --spider $f
  curl -Is $f > .temp.txt

  if test ! -s .temp.txt; then
    invalid=1
  elif ! cat .temp.txt|head -n 1|grep -q 302; then
    :
  elif cat .temp.txt|head -n 1|grep -q 200; then
    if cat .temp.txt|grep -q '^Connection: close'; then
      invalid=1
    fi
  fi

  rm .temp.txt

  if test $invalid; then
    export BROKEN_EXTERNAL_LINKS=1
    echo
    echo WARNING: Invalid external link $f
  fi

}

function checklinks() {
  test "$LINT" || return

  local g="$1"
  local f=.cached/.${g%.*}.external-links.txt.kp

  if test -s "$f"; then
    for h in $(cat "$f"); do
      checkeachexternallink "$h"
    done
  fi

  f=.${g%.*}.internal-links.txt.kp

  if test -s "$f"; then
    for h in $(cat "$f"); do
      checkeachinternallink "$h" "$g"
    done
  fi
}

function doadoc() {
  local f="$1"
  local nocache="$2"
  local lessonplan="$3"
  #echo doing doadoc "$@"
  local fbase=${f%.a*doc}
  local fasc=.cached/.$fbase.asc
  local fhtml=$fbase.html
  #echo using $fasc $fhtml
  test -d .cached || mkdir -p .cached
  local cachedirarg=
  local lessonplandirarg=
  if test "$nocache" = nocache; then
    cachedirarg="-a cachedir="
    lessonplandirarg="-a lessonplandir=../"
  else
    cachedirarg="-a cachedir=.cached/"
    lessonplandirarg="-a lessonplandir="
  fi
  #echo cachedirarg is $cachedirarg
  #echo lessonplandirarg is $lessonplandirarg

  if test "$lessonplan" = lessonplan; then
    touch .cached/.index-sidebar.asc
    touch .cached/.pathway-standards.asc
  fi

  $PROGDIR/adoc-preproc.rkt $f

  if test ! $OTHERDIR; then
    asciidoctor -a linkcss -a proglang=$PROGLANG -a pathway=$SRCPATHWAY \
      $cachedirarg $lessonplandirarg \
      -a stylesheet=$PATHWAYROOTDIR../../lib/curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -B . $fasc -o $fhtml
  fi
}

function doadocs() {
  local ff="$@"

  if test $# -eq 0; then
    return
  elif test $# -eq 1 -a ! -f $1; then
    return
  fi

  test -d .cached || mkdir -p .cached

  overwrite 'building' /$LESSONSUBDIR
  $PROGDIR/adoc-preproc.rkt $ff

  local ff_asc=""
  for f in $ff; do
    fbase=${f%.adoc}
    fasc=.cached/.$fbase.asc
    ff_asc="$ff_asc $fasc"
  done

  if test ! $OTHERDIR; then
    asciidoctor -a linkcss -a proglang=$PROGLANG -a pathway=$SRCPATHWAY \
      -a cachedir=.cached/ -a lessonplandir= \
      -a stylesheet=$PATHWAYROOTDIR../../../lib/curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -B . $ff_asc
  fi

  for f in $ff; do
    fbase=${f%.adoc}
    fhtmlcached=.cached/.$fbase.html
    fhtml=$fbase.html
    fpdf=$fbase.pdf
    if test -f "$fhtmlcached"; then
      mv $fhtmlcached $fhtml
      bumpcsspathdir $fhtml
      resolveabbrevs $fhtml
      if test ! $OTHERDIR; then
        insertgdrivesave $fhtml
      fi
    fi
    if test -f "$fpdf"; then
      rm -f "$fpdf"
    fi
    if test $RESOURCEDOCS; then
      if test -f "$fhtml"; then
        echo ", { \"input\": \"$LESSONSUBDIR/$fhtml\" }" >> $PUPPETEER_INPUT
      fi
    fi
  done

}

function processadocs() {
  if test $# -eq 0; then
    if test "$dir" = pages; then
      echo No adoc files in $LESSONSUBDIR
    fi
    return
  fi

  local ff_given="$@"
  local ff=

  for f in $ff_given; do
    if test ! -f $f; then
      #echo Not a valid adoc file $f in $(pwd)
      continue
    fi
    if echo $f|grep -q ' '; then
      echo Discarding file \'$f\' with space in its name
      rm "$f"
      continue
    fi
    DOIT=
    fbase=${f%.adoc}
    fhtml=$fbase.html
    fasc=.cached/.$fbase.asc
    if test $FORCE; then
      DOIT=1
    else
      if test $OTHERDIR; then
        if test $f -nt $fasc; then DOIT=1; fi
      else
        if test $f -nt $fhtml; then DOIT=1; fi
      fi
    fi
    if test $DOIT; then
      ff="$ff $f"
      rm -f .cached/.$fbase-comment.txt
    fi
  done

  doadocs $ff

  for f in $ff; do
    checklinks $f
  done

}

function recursiveadoc() {
  local dir="$1"
  local oldPATHWAYROOTDIR="$2"
  local oldLESSONSUBDIR="$3"
  local oldSOLUTION="$SOLUTION"
  local oldOTHERDIR="$OTHERDIR"

  if test "$dir" = solution-pages; then export SOLUTION=1; fi

  cd "$dir"
  export PATHWAYROOTDIR="$oldPATHWAYROOTDIR../"
  export LESSONSUBDIR="$oldLESSONSUBDIR/$dir"

  for d in *; do
    if test -d "$d"; then
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
    fi
  done

  export OTHERDIR=
  if test "$dir" = fragments -o "$dir" = xtra -o "$dir" = xtras; then
    export OTHERDIR=1
  fi

  export NOCOLOPHON=
  if test "$dir" = about-datasets; then
    export NOCOLOPHON=1
  fi

  if test $LINT; then
    if test ! $OTHERDIR; then
      if test -f .cached/.workbook-pages-ls.txt.kp; then
        for wbp in $(cat .cached/.workbook-pages-ls.txt.kp); do
          if test ! -f $wbp; then
            wbpadoc=${wbp%.*}.adoc
            if test ! -f $wbpadoc; then
              BROKEN_WORKBOOK_PAGES=1
              echo
              echo WARNING: Missing workbook page $wbp in $LESSONSUBDIR
            fi
          fi
        done
      fi
    fi
  fi

  processadocs *.adoc

  #test $DEBUG || rm -f *.adoc

  cd ..
  export PATHWAYROOTDIR="$oldPATHWAYROOTDIR"
  export LESSONSUBDIR="$oldLESSONSUBDIR"
  export SOLUTION="$oldSOLUTION"
  export OTHERDIR="$oldOTHERDIR"
}

function mkdirsolutionversion() {
  #echo doing mkdirsolutionversion
  test -d pages || return

  #echo PWD is $(pwd)

  test -d pages/.cached || mkdir -p pages/.cached

  if test -d solution-pages-2; then
    #echo DEADC0DE: solution-pages-2 shouldn\'t exist
    rm -fr solution-pages-2
  fi

  cp -pr pages solution-pages-2

  cp -p $PROGDIR/.hta* solution-pages-2

  if test -d solution-pages; then
    shadowcopydir solution-pages solution-pages-2
    rm -fr solution-pages
  fi
  mv solution-pages-2 solution-pages

  test -d solution-pages/.cached || mkdir -p solution-pages/.cached
}

function checksinglelessonplan() {
  local L=$1
  local copacetic=1
  for f in *.adoc; do
    if test ! -f $f; then
      copacetic=
    fi
  done
  if ! test $copacetic; then
    if test ! -f index.shtml; then
      echo
      echo WARNING: No lesson plan in $L
    fi
  elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo
    echo WARNING: Too many lesson plans in $L
  elif test -f index.adoc; then
    :
  else
    for f in *.adoc; do
      mv $f index.adoc
    done
  fi
}

function checklessonplan() {
  local L=$1
  checksinglelessonplan $L
  test -d .cached || mkdir -p .cached

  test -f index.adoc || return

  grep '^= ' index.adoc|head -n 1|$SED -e 's/^= *//' -e 's/  *$//' > .cached/.index.titletxt

  if test -f index.adoc; then
    #echo collecting exercises in $L
    $PROGDIR/collect-exercises.rkt index.adoc
    exerflist=pages/.cached/.exercise-pages-ls.txt.kp
    if test -f $exerflist; then
      exerfA=pages/.cached/.exercise-pages.txt.kp
      rm -f $exerfA
      for f in $(cat $exerflist); do
        if test ${f%.adoc} = $f; then
          echo $f >> $exerfA
        elif head -5 pages/$f|grep -q '^ *\[\.landscape\] *$'; then
          echo $f landscape >> $exerfA
        else
          echo $f >> $exerfA
        fi
      done
    fi
  fi

}

function buildworkbookpages() {
  local L=$1
  #echo buildworkbookpages $L
  cd $L
  export LESSON=$L
  export LESSONSUBDIR=$L
  #
  repoDir="$TOPDIR/$LESSONSUBDIR/langs/$LANGUAGE"

  DORECURSIVEADOC=1

    if checkmd5nochange . $repoDir; then
      #echo no need to do recursive adoc
      DORECURSIVEADOC=
    fi

  if test $DORECURSIVEADOC; then
  #echo !!! doing buildworkbookpages $L $DORECURSIVEADOC

  if test ! -d pages; then
    echo
    echo WARNING: $L missing pages
    mkdir pages
  fi

  mkdirsolutionversion

  #
  export PATHWAYROOTDIR="../../"
  export SOLUTION=
  export WORKBOOKPAGE=1

  for d in *; do
    if test -d "$d"; then
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
    fi
  done

  export WORKBOOKPAGE=

  fi

  cd ../..
}

function collapseadjtables() {
  local f=$1
  local x=$(grep -n '^<\/*tbody>' "$f"|$SED -e 's/^\([^:]*\):.*/\1/'|$SED -ne '2,3p')
  if test -z "$x"; then
    return
  fi
  local xi=$(echo $x|$SED -e 's/^\([^ ]*\) .*/\1/')
  local xii=$(echo $x|$SED -e 's/^[^ ]* \([^ ]*\).*/\1/')
  if test -z "$xi" -o -z "$xii"; then
    return
  fi
  $SED -i -e "$xi,${xii}d" "$f"
}

function buildlessonplan() {
  local L=$1

  local oldLESSONSUBDIR=$LESSONSUBDIR

  cd $L
  export LESSONSUBDIR=$L
  export LESSON=$L
  export LESSONPLAN=$(basename $LESSONSUBDIR)

  if test -f index.adoc; then
    export PATHWAYROOTDIR="../../"
    # there should be only one?
    if test index.adoc -nt index.shtml; then
      overwrite 'building' lesson plan: $L
      rm -f .cached/.index-comment.txt
      test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
      doadoc index.adoc 0 lessonplan
      #$PROGDIR/adoc-preproc.rkt index.adoc
      if test -f index.html; then
        mv index.html index.shtml
        insertbodyid index.shtml
        addanalytics index.shtml
        resolveabbrevs index.shtml
        cleanuptitle index.shtml
        cleanupduration index.shtml
        insertsectionselfie index.shtml
        lintlesson index.shtml
        insertgdrivesave index.shtml
      fi
    else
      if test -f pathway-missing-glossary-items.rkt.kp; then
        $PROGDIR/glossary-warnings.rkt
      fi
    fi
    if test -f index.shtml; then
      checklinks index.shtml

      if test ! $NOPDF; then
        if test index.shtml -nt index.pdf; then
          TEMPF=$(mktemp); rm -f $TEMPF
          echo ", { \"input\": \"$LESSONSUBDIR/index.shtml\", \"aspect\": \"portrait\" }" >> $PUPPETEER_INPUT
        fi
      fi
    fi
    if test ! $DEBUG; then
      rm -f *.asc
    fi
  fi
  cd ../..

  export LESSONPLAN=
  export LESSONSUBDIR=$oldLESSONSUBDIR
  export LESSON=
}

function buildlessons() {
  if test ! -f .cached/.workbook-lessons.txt.kp; then
    echo
    echo WARNING: No lessons in pathway $PATHWAY
  else
    local L
    # process lesson directories in parallel
    for L in $(cat .cached/.workbook-lessons.txt.kp); do
      export LESSON=$L
      if test $NOPARALLEL; then
        buildworkbookpages $L
      else
        buildworkbookpages $L &
      fi
    done
    test ! $NOPARALLEL && wait
  fi
  export PATHWAYROOTDIR=./
  export LESSON=
  export LESSONSUBDIR=.
}

# Must be done sequentially, to handle prerequisite calculation
function builddependencyjson() {
  cd $TOPDIR
  cd distribution/$LANGUAGE
  GRAPHFILE=$(pwd)/dependency-graph.js
  echo "var graph = {" > $GRAPHFILE
  first=1
  for C in courses/*; do
    test -d "$C" || continue
    if test "$C" = courses/lib; then continue; fi
    #if ! $(echo "$C"|grep -q '/\(algebra-\(pyret\|wescheme\)\|data-science\|ok\|physics\|reactive\)$'); then continue; fi
    cd $C
    for L in $(cat .cached/.workbook-lessons.txt.kp); do
      Lbasename=${L#lessons/}
      if ! grep -q "^ *\"$Lbasename\"" $GRAPHFILE; then
        if test $first; then
          first=
        else
          echo "," >> $GRAPHFILE
        fi
        titletxt=$(cat $L/.cached/.index.titletxt|sed -e 's/"/\\"/g')
        desctxt=$(cat $L/.cached/.index-desc.txt.kp|sed -e 's/"/\\"/g')
        pagestxt=$(cat $L/pages/.cached/.workbook-pages-ls.txt.kp|sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\", \"/g')
        if test "$pagestxt"; then
          pagestxt=\"$pagestxt\"
        fi
        if test -f $L/pages/.cached/.exercise-pages-ls.txt.kp; then
          exerpagestxt=$(cat $L/pages/.cached/.exercise-pages-ls.txt.kp|sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\", \"/g')
        else
          exerpagestxt=
        fi
        if test "$exerpagestxt"; then
          exerpagestxt=\"$exerpagestxt\"
        fi
        echo "  \"$Lbasename\" : {" >> $GRAPHFILE
        echo "    title: \"$titletxt\"," >> $GRAPHFILE
        echo "    description: \"$desctxt\"," >> $GRAPHFILE
        echo "    pages: [$pagestxt]," >> $GRAPHFILE
        echo "    exercisePages: [$exerpagestxt]," >> $GRAPHFILE
        if test -f $L/.cached/.lesson-keywords.txt.kp; then
          cat $L/.cached/.lesson-keywords.txt.kp >> $GRAPHFILE
        fi
        echo -n "    prerequisites: [" >> $GRAPHFILE
        pfirst=1
        for p in $(cat $L/.cached/.lesson-prereq.txt.kp); do
          if test $pfirst; then
            pfirst=
          else
            echo -n ", " >> $GRAPHFILE
          fi
          echo -n "\"$p\"" >> $GRAPHFILE
        done
        echo "]," >> $GRAPHFILE
        if test -f $L/.cached/.lesson-standards-w-prose.txt.kp; then
          cat $L/.cached/.lesson-standards-w-prose.txt.kp >> $GRAPHFILE
        fi
        echo "  }" >> $GRAPHFILE
      fi
    done
    cd ../..
  done
  echo "}" >> $GRAPHFILE
  # convert to UTF-16 to handle curlyquotes
  iconv -f UTF-8 -t UTF-16 $GRAPHFILE > tmp.txt
  mv -f tmp.txt $GRAPHFILE
  #rm tmp.txt
}

function buildlessonplans() {
  if test ! -f .cached/.workbook-lessons.txt.kp; then
    echo
    echo WARNING: No lessons in pathway $PATHWAY
  else
    local L
    local prevL=/dev/null
    for L in $(cat .cached/.workbook-lessons.txt.kp); do
      # needed?
      cat $prevL/.cached/.*primtxt > $L/.cached/.prevlesson.primtxt 2> /dev/null
      buildlessonplan $L
      prevL=$L
    done
  fi
  export LESSONSUBDIR=
}

function makeglossaryandstandards() {
  if test -f .cached/.pathway-glossary.asc; then
    asciidoctor -a linkcss -a proglang=$PROGLANG \
      -a stylesheet=${PATHWAYROOTDIR}../../lib/curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -a title='Glossary' \
      -B . \
      -o pathway-glossary.shtml \
      .cached/.pathway-glossary.asc
    insertbodyid pathway-glossary.shtml
    resolveabbrevs pathway-glossary.shtml
  fi
  if test -f .cached/.pathway-standards.asc; then
    asciidoctor -a linkcss -a proglang=$PROGLANG \
      -a stylesheet=${PATHWAYROOTDIR}../../lib/curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -a title='Standards' \
      -B . \
      -o pathway-standards.shtml \
      .cached/.pathway-standards.asc
    insertbodyid pathway-standards.shtml
    resolveabbrevs pathway-standards.shtml
  fi
}

function buildpathwaynarrative() {
  #echo doing buildpathwaynarrative
  local copacetic=1
  if test ! -f index.adoc; then
    for f in *.adoc; do
      if test ! -f $f; then copacetic=
      fi
    done
  fi
  #echo copacetic I $copacetic
  if test ! "$copacetic" -a ! -f index.shtml; then
    echo
    echo WARNING: No narrative in pathway $PATHWAY\; creating one
    echo "= $PATHWAY" > index.adoc
  fi
  if ls *.adoc 2> /dev/null | wc -l | grep -vq '^ *[01]$'; then
    echo
    echo WARNING: Too many narratives in pathway $PATHWAY
  else
    #cp -p $PROGDIR/*.css .
    export PATHWAYROOTDIR=./
    export LESSONSUBDIR=
    if test ! -f index.adoc; then
      for f in *.adoc; do
        if test -f $f; then
          mv $f index.adoc
        fi
      done
    fi
    if test index.adoc -nt index.shtml; then
      echo building pathway narrative: $PATHWAY
      export NARRATIVE=1
      rm -f .cached/.index-comment.txt
      test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
      doadoc index.adoc
      #$PROGDIR/adoc-preproc.rkt index.adoc
      mv index.html index.shtml
      export NARRATIVE=
      makeglossaryandstandards
      if test -f .pathway-lessons.asciidoc; then
        if test .pathway-lessons.asciidoc -nt .pathway-lessons.shtml; then
          rm -f .cached/.pathway-lessons-comment.txt
          test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
          export ALLPATHWAYLESSONS=1
          doadoc .pathway-lessons.asciidoc nocache
          #$PROGDIR/adoc-preproc.rkt .pathway-lessons.asciidoc
          export ALLPATHWAYLESSONS=
          mv .pathway-lessons.html .pathway-lessons.shtml
          removelogos .pathway-lessons.shtml
          resolveabbrevs .pathway-lessons.shtml
        fi
      fi
      insertbodyid index.shtml
      addanalytics index.shtml
      resolveabbrevs index.shtml
      insertgdrivesave index.shtml
    fi

    checklinks index.shtml
    #verifylinks

  fi
}

function makeworkbookjson() {

  #echo doing makeworkbookjson "$@"

  local tgt=$1

  local filesvar=

  local wbpnf=
  local includesolutions=
  local includeoptexercises=

  if test "$tgt" = bm-contracts -o "$tgt" = bm-contracts-sols; then
    wbpnf=.cached/.back-matter-contracts-index.rkt
  elif test "$tgt" = workbook -o "$tgt" = pd-workbook -o "$tgt" = workbook-sols; then
    wbpnf=.cached/.workbook-page-index.rkt
  elif test "$tgt" = opt-exercises -o "$tgt" = opt-exercises-sols; then
    wbpnf=.cached/.opt-exercises-index.rkt
  else
    wbpnf=.cached/.workbook-long-page-index.rkt
  fi

  if test "$tgt" = workbook; then
    filesvar=workbookFiles
  elif test "$tgt" = pd-workbook; then
    filesvar=pdWorkbookFiles
  elif test "$tgt" = bm-contracts; then
    filesvar=bmContractsFiles
  elif test "$tgt" = bm-contracts-sols; then
    filesvar=bmContractsSolsFiles
  elif test "$tgt" = workbook-sols; then
    filesvar=workbookSolsFiles
  elif test "$tgt" = workbook-long; then
    filesvar=workbookLongFiles
  elif test "$tgt" = pd-workbook-long; then
    filesvar=pdWorkbookLongFiles
  elif test "$tgt" = workbook-long-sols; then
    filesvar=workbookLongSolsFiles
  elif test "$tgt" = opt-exercises; then
    filesvar=optExercisesFiles
  elif test "$tgt" = opt-exercises-sols; then
    filesvar=optExercisesSolsFiles
  fi

  if test "$tgt" = workbook-sols -o "$tgt" = bm-contracts-sols -o "$tgt" = workbook-long-sols -o "$tgt" = opt-exercises-sols; then
    includesolutions=1
  fi

  if test "$tgt" = workbook-long -o "$tgt" = pd-workbook-long -o "$tgt" = workbook-long-sols -o "$tgt" = opt-exercises -o "$tgt" = opt-exercises-sols; then
    includeoptexercises=1
  fi

  #echo Initializing $PDFTK_INPUT_$tgt

  echo "{ \"fileList\": [ \"ignoreElement\" " > $PDFTK_INPUT-$tgt.json

  local currlesson=

  cat $wbpnf |
    while read -r pdfpagespec; do
      if echo $pdfpagespec|grep -qv '\(lessons\|front-matter\|back-matter\)'; then
        continue
      fi
      lessondir=$(echo $pdfpagespec|$SED -e 's/^("\([^"]*\).*/\1/')
      workbookpage=$(echo $pdfpagespec|$SED -e 's/^("[^"]*" *"\([^"]*\).*/\1/')
      aspect=$(echo $pdfpagespec|$SED -e 's/^("[^"]*" *"[^"]*" *"\([^"]*\).*/\1/')
      pageno=$(echo $pdfpagespec|$SED -e 's/^("[^"]*" *"[^"]*" *"[^"]*" *"\?\([^")]*\).*/\1/')

      if test "$pageno" = no -o "$pageno" = No -o "$pageno" = NO; then
        pageno=false
      fi

      if test "$pageno" != false; then
        pageno=true
      fi

      freshlesson=
      if test "$lessondir" != "$currlesson"; then
        freshlesson=1
      fi

      if test "$freshlesson"; then
        currlesson=$lessondir
        docfile=$currlesson/index.shtml
        if test -f "$docfile"; then
          if test "$tgt" = pd-workbook; then
            if test "$docfile" -nt "$currlesson/index.pdf"; then
              echo ", { \"input\": \"$docfile\" }" >> $PUPPETEER_INPUT
            fi
          fi
          if test "$tgt" = pd-workbook -o "$tgt" = pd-workbook-long; then
            echo $currlesson/index.pdf >> $PDFTK_INPUT-$tgt
          fi
        fi
      fi

      if test $includesolutions; then
        docfile=$lessondir/solution-pages/$workbookpage
      else
        docfile=$lessondir/pages/$workbookpage
      fi

      docfileext=${docfile##*.}

      if test "$docfileext" = adoc; then
        docfile=${docfile%.adoc}.html
        docfileext=html
      elif test "$docfileext" = pdf; then
        htmlfile=${docfile%.pdf}.html
        if test -f $htmlfile; then
          docfile=$htmlfile
          docfileext=html
        fi
      fi

      #echo docfile $docfile docfileext $docfileext

      if test "$docfileext" = html; then
        if test -f "$docfile"; then
          localpdffile=${docfile%.html}.pdf
          if test "$tgt" = workbook-long -o "$tgt" = workbook-long-sols; then
            if test ! -f "$localpdffile"; then
              echo ", { \"input\": \"$docfile\", \"aspect\": \"$aspect\", \"output\": \"$localpdffile\" }" >> $PUPPETEER_INPUT
            fi
          fi

          echo ", { \"file\": \"$localpdffile\", \"paginate\": $pageno }" >> $PDFTK_INPUT-$tgt.json

        else
          echo ", { \"file\": \"../../lib/$ABYSS.pdf\", \"paginate\": $pageno }" >> $PDFTK_INPUT-$tgt.json
        fi

      elif test ! -f $docfile; then
        echo ", { \"file\": \"../../lib/$ABYSS.pdf\", \"paginate\": $pageno }" >> $PDFTK_INPUT-$tgt.json

      else
        echo ", { \"file\": \"$docfile\", \"paginate\": $pageno }" >> $PDFTK_INPUT-$tgt.json

      fi

    done

    echo "] }" >> $PDFTK_INPUT-$tgt.json

}

function buildteacherresource() {
  cd resources
  export PATHWAYROOTDIR=../
  export LESSONSUBDIR=resources
  #cp -p $PROGDIR/*.css $PROGDIR/.hta* .
  cp -p $PROGDIR/.hta* .
  local copacetic=1
  if test ! -f index.adoc; then
    for f in *.adoc; do
      if test ! -f $f; then copacetic=
      fi
    done
  fi
  if test ! "$copacetic" -a ! -f index.shtml; then
    echo
    echo WARNING: No teacher resource files in pathway $PATHWAY
  elif ls *.adoc 2> /dev/null | wc -l | grep -vq '^ *[01]$'; then
    echo
    echo WARNING: Too many teacher resource files in pathway $PATHWAY
  else
    #export PATHWAYROOTDIR=../
    # there should be only one?
    if test ! -f index.adoc; then
      for f in *.adoc; do
        if test -f $f; then
          mv $f index.adoc
        fi
      done
    fi
    if test index.adoc -nt index.shtml; then
      overwrite 'building' teacher resources: $PATHWAY "→" "resources" "→" *.adoc
      export TEACHER_RESOURCES=1
      rm -f .cached/.index-comment.txt
      test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
      doadoc index.adoc
      #$PROGDIR/adoc-preproc.rkt index.adoc
      mv index.html index.shtml
      export TEACHER_RESOURCES=
      insertbodyid index.shtml
      resolveabbrevs index.shtml
      cleanuptitle index.shtml
      insertgdrivesave index.shtml
    fi
    checklinks index.shtml
  fi
  cd ..
  export PATHWAYROOTDIR=./
  export LESSONSUBDIR=

}

function batchhtmltopdf() {
  #echo doing batchhtmltopdf in $(pwd)
  echo "] }" >> $PUPPETEER_INPUT

  # use --trace-warnings to debug

  #echo in $(pwd) doing node ../../lib/html2pdf.js $PUPPETEER_INPUT
  if grep -q input $PUPPETEER_INPUT; then
    node ../../lib/html2pdf.js $PUPPETEER_INPUT
    if test -f $PDFTK_INPUT-local-pdfs.sh; then
      sh $PDFTK_INPUT-local-pdfs.sh
    fi
  fi
}

function rmtmpfiles() {
  #find . -name $PDFTK_PAGED\*.html -delete

  test $DEBUG && return
  #echo doing rmtmpfiles

  for f in adoc aux log rkt tex title; do
    find . -name \*.$f -delete
  done

  for f in txt; do
    find . -name \*.$f | grep -v '\(lesson-order\|workbook-pages\)\.txt' | xargs rm -f
  done

  find . -name $WKH2P_PFX-\* -delete
}

function copylessondir() {
  #echo doing copylessondir $lessonDir
  lessonDir=$1
  mkdir -p $lessonDir
  repoLessonDir=$TOPDIR/$lessonDir/langs/$LANGUAGE
  #echo repoLessonDir is $repoLessonDir
  if test -d "$repoLessonDir"; then
    #echo $repoLessonDir is a diry
    DOCOPYDIR=1
      #echo doing checkmd5nochange $lessonDir $repoLessonDir
      if checkmd5nochange $lessonDir $repoLessonDir; then
        #echo $lessonDir doesnt need copying
        DOCOPYDIR=
      fi
    if test $DOCOPYDIR; then
      overwrite 'copying' $lessonDir
      cp -pr $repoLessonDir/* $lessonDir
      cd $lessonDir
      # we'll set it again when we do the adoc'ing
      rm -f .cached/.checksum.md5txt
      for subdir in *; do
        if test "$subdir" = pages -o "$subdir" = solution-pages; then
          test -d $subdir/.cached || mkdir $subdir/.cached
        fi
      done
      checklessonplan $lessonDir
      for subdir in *; do
        if test -d "$subdir"; then
          adjustproglangsubdirs "$subdir"
        fi
      done
      cd ../..
    fi
  fi
}

function collectworkbookpages() {
  d="$1"
  test ! -d "$d" && return
  #echo doing collectworkbookpages $d
  cd "$d"
  if test -d pages; then
    cd pages
    if test -f workbook-pages.txt; then
      test -d .cached || mkdir .cached
      cd .cached
      rm -f .workbook-pages.txt.kp
      #ensure workbook-pages.txt ends in newline, or while isn't happy
      $SED -i -e '$a\' ../workbook-pages.txt

      while read -r f; do
        #echo finding aspect of "$f"
        if echo "$f"|grep -q landscape; then
          echo $f >> .workbook-pages.txt.kp
        elif test "${f%.adoc}" = "$f"; then
          echo $f >> .workbook-pages.txt.kp
        else
          g=${f%.adoc}.html
          if test -f $f && head -n 5 ../"$f"|grep -q '^ *\[\.landscape\] *$'; then
            echo $f landscape >> .workbook-pages.txt.kp
          elif test -f $g && head -n 60 ../"$g"|grep -q 'body.*landscape'; then
            echo $f landscape >> .workbook-pages.txt.kp
          else
            echo $f >> .workbook-pages.txt.kp
          fi
        fi
      done < ../workbook-pages.txt

      cd ..
    fi
    cd ..
  fi
  cd ..
}

function buildpathwayworkbooks() {
  #echo building pathway workbooks for $TGTPATHWAY in $(pwd)

  #echo topdir is $TOPDIR

  mkdir -p $TOPDIR/distribution/$LANGUAGE/courses/$TGTPATHWAY/resources/pages
  mkdir -p $TOPDIR/distribution/$LANGUAGE/courses/$TGTPATHWAY/resources/solution-pages

  node ../../lib/makeWorkbook.js
}

function buildpathway() {
  #echo doing buildpathway $TGTPATHWAY
  cd $TOPDIR

  PATHWAY=$TGTPATHWAY

  export LESSONSUBDIR=.
  export SOLUTION=
  export BROKEN_WORKBOOK_PAGES=
  export BROKEN_INTERNAL_LINKS=
  export BROKEN_EXTERNAL_LINKS=

  langicon=💀

  if test "$PROGLANG" = wescheme; then
    langicon=🥾
  fi

  echo

  if test ! -d pathways/$SRCPATHWAY/langs/$LANGUAGE; then
    echo
    echo WARNING: No pathway $PATHWAY/$LANGUAGE
  else
    echo BUILDING PATHWAY: $LANGUAGE/$PATHWAY $langicon
    echo $'-----------------------------------------------------------\n'

    export DESTPATHWAYDIR=distribution/$LANGUAGE/courses/$PATHWAY

    if test $FORCE; then
      rm -fr $DESTPATHWAYDIR
    fi

    mkdir -p $DESTPATHWAYDIR

    repoDir="$TOPDIR/pathways/$SRCPATHWAY/langs/$LANGUAGE"
    distDir="$TOPDIR/$DESTPATHWAYDIR"

    if ! checkmd5nochange $DESTPATHWAYDIR $repoDir; then
      echo copying pathway $repoDir
      cp -pr pathways/$SRCPATHWAY/langs/$LANGUAGE/* $DESTPATHWAYDIR
    fi

    REFRESHFRONTMATTER=1
    REFRESHBACKMATTER=1
    REFRESHRESOURCES=1

    test -d $repoDir/front-matter || REFRESHFRONTMATTER=
    test -d $repoDir/back-matter || REFRESHBACKMATTER=
    test -d $repoDir/resources || REFRESHRESOURCES=

      #TODO parallelize
      if test -d $distDir/front-matter -a -d $repoDir/front-matter; then
        if checkmd5nochange $distDir/front-matter $repoDir/front-matter; then
          REFRESHFRONTMATTER=
        fi
      fi

      if test -d $distDir/back-matter -a -d $repoDir/back-matter; then
        if checkmd5nochange $distDir/back-matter $repoDir/back-matter; then
          REFRESHBACKMATTER=
        fi
      fi

      if test -d $distDir/resources -a -d $repoDir/resources; then
        if checkmd5nochange $distDir/resources $repoDir/resources; then
          REFRESHRESOURCES=
        fi
      fi

    rm -f $PROGDIR/pathway-local.rkt
    if test -f $repoDir/pathway-local.rkt; then
      cp -p $repoDir/pathway-local.rkt $PROGDIR
    fi

    cd $DESTPATHWAYDIR
    mkdir -p .cached

    export PATHWAYROOTDIR=./

    TEMPF=$(mktemp); rm -f $TEMPF
    export WKH2P_BATCH_BASE=$WKH2P_PFX-batchtmp-$(basename $TEMPF)
    export PUPPETEER_INPUT=$TOPDIR/$DESTPATHWAYDIR/.cached/$WKH2P_BATCH_BASE-puppeteer.json

    #export PDFTK_INPUT=$TOPDIR/$DESTPATHWAYDIR/.cached/$WKH2P_BATCH_BASE-pdftk

    export PDFTK_INPUT=$TOPDIR/$DESTPATHWAYDIR/.cached/.filelist

    echo "{\"htmlFileSpecs\": [ \"ignoreElement\"" > $PUPPETEER_INPUT

    #echo Initializing $PUPPETEER_INPUT

    mkdir -p lessons workbook

    if test ! -f lesson-order.txt; then
      echo
      echo WARNING: No lesson-order.txt in pathway $PATHWAY/$LANGUAGE
    else
      export PATHWAYLESSONS=\"$(cat lesson-order.txt|sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\",\"/g')\"
      grep -v '^ *;' lesson-order.txt |
        grep -v '^ *$' |
        $SED -e 's/^ *\(.*\)/lessons\/\1/' > .cached/.workbook-lessons.txt.kp
      for lessonDir in $(cat .cached/.workbook-lessons.txt.kp); do
        if test $NOPARALLEL; then
          copylessondir $lessonDir
        else
          copylessondir $lessonDir &
        fi
      done
      test ! $NOPARALLEL && wait
    fi

    if test $REFRESHFRONTMATTER; then
      cd front-matter
      mkdirsolutionversion
      cd ..
      adjustproglangsubdirs front-matter
    fi

    if test $REFRESHBACKMATTER; then
      cd back-matter
      mkdirsolutionversion
      cd ..
      adjustproglangsubdirs back-matter
    fi

    mkdir -p resources/protected
    cp -p $PROGDIR/.hta* resources/protected

    if test $REFRESHRESOURCES; then
      cd resources
      mkdirsolutionversion
      for d in *; do
        if test -d $d; then
          cd $d
          mkdirsolutionversion
          cd ..
          #adjustproglangsubdirs $d
        fi
      done
      cd ..
      adjustproglangsubdirs resources
    fi

    for d in front-matter back-matter; do
      collectworkbookpages "$d"
    done

    if test -d lessons; then
      cd lessons
      for d in *; do
        collectworkbookpages "$d"
      done
      cd ..
    fi

    $PROGDIR/collect-workbook-pages.rkt

    buildlessons

    export WORKBOOKPAGE=1
    export BOILERPLATE=1

    if test $REFRESHFRONTMATTER; then
      if test -d front-matter; then
        recursiveadoc front-matter "$PATHWAYROOTDIR" "$LESSONSUBDIR"
        touch front-matter #why?
      fi
    fi

    if test $REFRESHBACKMATTER; then
      if test -d back-matter; then
        recursiveadoc back-matter "$PATHWAYROOTDIR" "$LESSONSUBDIR"
        touch back-matter
      fi
    fi

    export WORKBOOKPAGE=

    cd resources

    export PATHWAYROOTDIR=../
    export LESSONSUBDIR=resources

    if test $REFRESHRESOURCES; then
      export RESOURCEDOCS=1
      for d in *; do
        if test -d "$d"; then
          if test "$d" = datasheets; then
            export DATASHEETPAGE=1
          else
            export DATASHEETPAGE=
          fi
          recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
        fi
      done
      export RESOURCEDOCS=
    fi

    cd ..

    if test $REFRESHRESOURCES; then touch resources; fi

    export BOILERPLATE=
    export PATHWAYROOTDIR=./
    export LESSONSUBDIR=

    rm -f $PDFTK_INPUT-local-pdfs.sh

    # Shell version
    if test $BOOK; then
      for wbf in workbook pd-workbook bm-contracts bm-contracts-sols workbook-sols workbook-long \
        pd-workbook-long workbook-long-sols opt-exercises opt-exercises-sols ; do
              if test $NOPARALLEL; then
                makeworkbookjson $wbf
              else
                makeworkbookjson $wbf &
              fi
            done
            test ! $NOPARALLEL && wait
    fi

    buildlessonplans

    buildpathwaynarrative

    if test ! $NOPDF; then
      if test ! -f .cached/.workbook-page-index.rkt; then
        echo
        echo WARNING: No workbook index file in pathway $PATHWAY/$LANGUAGE
      else
        cd ../../lib
        if test ! -f $ABYSS.pdf; then
          echo '= PAGE NOT FOUND!' > $ABYSS.adoc
          echo >> $ABYSS.adoc
          asciidoctor -a linkcss -a stylesheet=./asciidoctor.css $ABYSS.adoc
          echo ", { \"input\": \"../../lib/$ABYSS.html\", \"aspect\": \"portrait\" }" >> $PUPPETEER_INPUT
        fi
        cd ../courses/$PATHWAY

        export PDFpagesredone=
        batchhtmltopdf

        #exit

        #TODO:  ↓ not needed?
        export PATHWAYROOTDIR=./

        if false; then
        if test $BOOK; then
          if test $PDFpagesredone; then
            echo building workbook PDFs
            echo
          fi
          for wbf in workbook pd-workbook bm-contracts bm-contracts-sols workbook-sols workbook-long pd-workbook-long workbook-long-sols opt-exercises opt-exercises-sols ; do
            #echo pdfing $wbf
            if test $DEBUG; then
              if test $NOPARALLEL; then
                makeworkbookpdf $wbf
              else
                makeworkbookpdf $wbf &
              fi
            else
              if test $NOPARALLEL; then
                makeworkbookpdf $wbf >/dev/null 2>&1
              else
                makeworkbookpdf $wbf >/dev/null 2>&1 &
              fi
            fi
          done
          test ! $NOPARALLEL && wait
        fi
        fi
      fi
    fi

    buildteacherresource

    rmtmpfiles

  fi

  cd $TOPDIR

  if test $LINT; then

    if test $BROKEN_WORKBOOK_PAGES; then
      echo 👎 Broken workbook pages in $PATHWAY
    else
      echo 👍 No broken workbook pages in $PATHWAY
    fi

    if test $BROKEN_INTERNAL_LINKS; then
      echo 👎 Broken internal links in $PATHWAY
    else
      echo 👍 No broken internal links in $PATHWAY
    fi

    if test $BROKEN_EXTERNAL_LINKS; then
      echo 👎 Broken external links in $PATHWAY
    else
      echo 👍 No broken external links in $PATHWAY
    fi
  fi
  test $EXPANDEDWARNINGS || echo $'\033[?7h'

}

function allthestandards() {
  cd $TOPDIR
  cd distribution/$LANGUAGE
  export LANGROOTDIR=./
  #echo doing allthestandards in $(pwd)
  test -d .cached || mkdir -p .cached
  rm -f .cached/.all-standards.txt
  for d in courses/*; do
    test -d $d || continue
    db=${d%/}
    db=${db##*/}
    f=$d/.cached/.standards-in-pathway.txt.kp
    if test -f $f; then
      sed -e "s/)\$/ \"$db\")/" $f >> .cached/.all-standards.txt
    fi
  done
  $PROGDIR/make-standards.rkt
  asciidoctor -a linkcss -a proglang=$PROGLANG \
    -a stylesheet=lib/curriculum.css \
    -a title='Standards' \
    -o Standards.shtml \
    -B . \
    .cached/Standards.asc
  insertbodyid Standards.shtml
  resolveabbrevs Standards.shtml

  if test ! $DEBUG; then rm -f *.asc *.txt; fi

  cd $TOPDIR
}

for f in $ARGS; do
  export SRCPATHWAY=$f
  export SRCPATHWAY=${SRCPATHWAY#pathways/}
  export SRCPATHWAY=${SRCPATHWAY%/}
  export TGTPATHWAY="$SRCPATHWAY"
  if test "$PROGLANG" = ""; then
    if test "$SRCPATHWAY" = algebra; then
      export PROGLANG=wescheme
      export TGTPATHWAY=algebra-wescheme
      buildpathway
      export PROGLANG=pyret
      export TGTPATHWAY=algebra-pyret
      buildpathway
    else
      export PROGLANG=pyret
      buildpathway
    fi
    export PROGLANG=
  else
    if test "$SRCPATHWAY" = algebra; then
      export TGTPATHWAY=algebra-$PROGLANG
    fi
    buildpathway
  fi
done

builddependencyjson

if test ! $NOPDF; then
  for f in $ARGS; do
    export SRCPATHWAY=$f
    export SRCPATHWAY=${SRCPATHWAY#pathways/}
    export SRCPATHWAY=${SRCPATHWAY%/}
    export TGTPATHWAY="$SRCPATHWAY"
    if test "$PROGLANG" = ""; then
      if test "$SRCPATHWAY" = algebra; then
        export PROGLANG=wescheme
        export TGTPATHWAY=algebra-wescheme
        buildpathwayworkbooks
        export PROGLANG=pyret
        export TGTPATHWAY=algebra-pyret
        buildpathwayworkbooks
      else
        export PROGLANG=pyret
        buildpathwayworkbooks
      fi
      export PROGLANG=
    else
      if test "$SRCPATHWAY" = algebra; then
        export TGTPATHWAY=algebra-$PROGLANG
      fi
      buildpathwayworkbooks
    fi
  done
fi

# only to shush now-benign error
export PROGLANG=pyret

allthestandards

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in distribution/*/*; do
  f=${f%/}
  g=${f#distribution/}
  pwy=${g%/*}
  lang=${g#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:pass:[$docf][$pwy Narrative \($lang\)] >> index.adoc
  fi
done

if test README.html -ot README.adoc; then
  asciidoctor README.adoc
fi

asciidoctor index.adoc

cd distribution

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in */*; do
  f=${f%/}
  pwy=${f%/*}
  lang=${f#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:pass:[$docf][$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor index.adoc
