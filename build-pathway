#!/bin/bash
# build-pathway
# build script for curriculum
# Type build-pathway --help for help.

export BOOK=
export DEBUG=
export FORCE=
export SUPERFORCE=
export NATLANG=en-us
export LINT=
export NOPDF=
export PROGLANG=
export TOPDIR=$(pwd)
export EXPANDEDWARNINGS=
export ASCIIDOCNODE=

#SEMESTER=spring
#MONTH=$(date +%m)
#test "$MONTH" -gt 7 && SEMESTER=fall
#export SEMESTER_YEAR=$SEMESTER$(date +%Y)

eval $(grep '^SEMESTER=' ./deploy-to-brown)
eval $(grep '^YEAR=' ./deploy-to-brown)
export SEMESTER YEAR
SEMESTER_YEAR=$SEMESTER$YEAR

ARGS=
HELP=
LASTMOD=2022-04-11 # last modified
PDFMARGIN=0mm
SED=sed
MDV=md5sum
VERSION=
NOPARALLEL=
MAXBASHTHREADS=20

if test -f ./.build-pathway.rc; then
  . ./.build-pathway.rc
fi

if test -f ./.build-pathway.env; then
  . ./.build-pathway.env
fi

while test $# -ne 0; do
  arg=$1; shift
  if test "$arg" = --add-exercises -o "$arg" = -e; then
    :
  elif test "$arg" = --adocjs; then
    ASCIIDOCNODE=1
  elif test "$arg" = --book -o "$arg" = --pdf -o "$arg" = -b; then
    BOOK=1
  elif test "$arg" = --debug -o "$arg" = -d; then
    DEBUG=1
  elif test "$arg" = --expanded-warnings -o "$arg" = -w; then
    EXPANDEDWARNINGS=1
  elif test "$arg" = --force -o "$arg" = -f; then
    FORCE=1
  elif test "$arg" = --help -o "$arg" = -h; then
    HELP=1
  elif test "$arg" = --natlang -o "$arg" = --language; then
    NATLANG=$1; shift
  elif test "$arg" = --lint -o "$arg" = -l -o "$arg" = --verify-links; then
    LINT=1
  elif test "$arg" = --no-pdf -o "$arg" = --nopdf -o "$arg" = -n; then
    NOPDF=1
  elif test "$arg" = --no-parallel -o "$arg" = --noparallel; then
    NOPARALLEL=1
  elif test "$arg" = --proglang; then
    PROGLANG=$1; shift
  elif test "$arg" = --superforce -o "$arg" = --super-force -o "$arg" = -F; then
    SUPERFORCE=1
  elif test "$arg" = --version -o "$arg" = -v; then
    VERSION=1
    #
    # some common combos
  elif test "$arg" = -df; then
    DEBUG=1; FORCE=1
  elif test "$arg" = -dfl; then
    DEBUG=1; FORCE=1; LINT=1
  elif test "$arg" = -dfln; then
    DEBUG=1; FORCE=1; LINT=1; NOPDF=1
  elif test "$arg" = -dfn; then
    DEBUG=1; FORCE=1; NOPDF=1
  elif test "$arg" = -dn; then
    DEBUG=1; NOPDF=1
  else
    arg1=${arg#--}
    if test "$arg1" != "$arg"; then
      echo Mistyped option \'$arg\'?
    fi
    ARGS="$ARGS $arg"
  fi
done

#echo ARGS is $ARGS

test $BOOK && NOPDF= || NOPDF=1

test $SUPERFORCE && FORCE=1

LANGUAGE=$NATLANG

TMPTMP=$(mktemp); rm -f $TMPTMP
TMPAFX=$(basename $TMPTMP)

export ABYSS=page-not-found

WKH2P_PFX=.wkh2p-tmp

export NUMCORES=$(getconf _NPROCESSORS_ONLN)

export WORKBOOKPAGE=
export DATASHEETPAGE=
export ALLPATHWAYLESSONS=

function displayhelp() {
  echo Usage: build-pathway [--natlang L] [--proglang P] [--debug] [--force] [--no-pdf] [--lint] [--help] [--version] pathway ...
  echo
  echo Builds a document tree for the given pathway argument\(s\)
  echo under the \'distribution\' directory. If no pathway arg supplied,
  echo builds for all pathways in the \'pathways\' directory.
  echo
  echo Options:
  echo "  " --natlang L: Build doctree for natural language L. Default: en-us
  echo "  " --proglang P: Build doctree for programming language P.
  echo "                " P is one of wescheme, pyret.
  echo "                " An appropriate default is used depending on the pathway.
  echo "  " --debug: Keep around for inspection/debugging various temp files
  echo "           " in the \'distribution\' directory.
  echo "  " --force, -f: Regenerate doctree from scratch without relying on previous runs.
  echo "  " --superforce, -F: Regenerate doctree from scratch after updating code.
  echo "  " --book, -b: Generate workbook PDFs.
  echo "  " --no-pdf: Don\'t generate PDF files. This is to speed things up
  echo "            " during debugging when PDF output isn\'t necessary.
  echo "  " --lint: \(1\) Ensure the summary tables in lesson plans have the required rows.
  echo "          " \(2\) Verify all the links used in the doctree.
  echo "          " in the pathway doctree\'s top directory.
  echo "  " --help: Display this help and exit.
  echo "  " --version: Display build-way version and exit.
  echo
  echo Order of arguments/options doesn\'t matter.
  exit
}

if test $HELP; then displayhelp; fi

if test $VERSION; then
  echo build-pathway version $LASTMOD
  exit
fi

if which gsed | grep -q .; then
  SED=gsed
fi

if which md5 | grep -q .; then
  MDV=md5
fi

if ! which curl | grep -q .; then
  echo
  echo WARNING: Missing \'curl\' tool; can\'t do --lint
  LINT=
fi

NOARGSGIVEN=

if test "$ARGS" = ""; then
  NOARGSGIVEN=1
  ARGS=$(ls -d pathways/*)
fi

if test ! $PROGLANG; then
  PROGLANG=pyret
fi

#echo ARGS is $ARGS

echo '== Generated Documentation' > index.adoc
echo >> index.adoc
echo link:README.html[Authoring Guide] >> index.adoc
echo >> index.adoc
echo https://github.com/bootstrapworld/curriculum[\`curriculum\` Repo] >> index.adoc

mkdir -p distribution/$NATLANG/courses

echo '== Generated Documentation' > distribution/index.adoc

if test $SUPERFORCE; then
  rm -fr prog distribution/$NATLANG/lib distribution/$NATLANG/extlib
fi

mkdir -p prog
mkdir -p distribution/$NATLANG/lib
mkdir -p distribution/$NATLANG/extlib

function checkmd5nochange() {
  local distDir=$1
  local repoDir=$2
  #echo doing checkmd5nochange $distDir $repoDir
  test -d $distDir/.cached || mkdir -p $distDir/.cached
  local savef=$distDir/.cached/.checksum.md5txt
  local currdir=$(pwd)
  cd $repoDir
  newchecksum=$(find . -type f -exec $MDV {} \; | $MDV | cut -d " " -f 1)
  cd $currdir
  if test -f $savef; then
    savedchecksum=$(cat $savef)
    if test "$newchecksum" = "$savedchecksum"; then
      return 0
    else
      #echo saving I $savef
      echo $newchecksum > $savef
      return 1
    fi
  else
    #echo saving II $savef
    echo $newchecksum > $savef
    return 1
  fi
}

export PROGDIR=$TOPDIR/prog

if ! checkmd5nochange $PROGDIR $TOPDIR/shared/langs; then
  # if $NATLANG != en-us, and
  # shared/langs/$NATLANG isn't sufficiently populated,
  # we'll put in the en-us files first and shadow them later
  #
  cp -pr $TOPDIR/shared/langs/en-us/* $PROGDIR
  cp -p $TOPDIR/shared/langs/en-us/*.css distribution/$NATLANG/lib
  #
  if test $NATLANG != en-us -a -d $TOPDIR/shared/langs/$NATLANG; then
    cp -pr $TOPDIR/shared/langs/$NATLANG/* $PROGDIR
  fi
  cp -pr $PROGDIR/docroot/* distribution/$NATLANG
  mkdir -p distribution/$NATLANG/lib/Badges
  mkdir -p distribution/$NATLANG/lib/images
  cp -pr $PROGDIR/Badges/* distribution/$NATLANG/lib/Badges
  cp -pr $PROGDIR/images/* distribution/$NATLANG/lib/images
  # TODO: may need to revisit for unforced NATLANG != en-us
fi

# escaped characters are: (1) go to beginning of line, (2) erase to
# end of line, and (3) truncate the argument to terminal width
function overwrite() {
  if test  $EXPANDEDWARNINGS; then
    echo $@
  else
    echo $'\e[1A\e[K\033[?7l'$@
  fi
}

if test ! -d distribution/$NATLANG/extlib/MathJax*; then
  cp -pr $TOPDIR/extlib/MathJax* distribution/$NATLANG/extlib
fi

if ! checkmd5nochange distribution/$NATLANG/lib $TOPDIR/lib; then
  overwrite copying distribution/$NATLANG/lib
  cp -p $TOPDIR/shared/langs/en-us/*.css distribution/$NATLANG/lib
  cp -p $TOPDIR/lib/*.rkt $TOPDIR/lib/ano* $TOPDIR/lib/check* $TOPDIR/lib/.hta* $PROGDIR
  cp -p $TOPDIR/lib/*.png $TOPDIR/lib/*.css $TOPDIR/lib/*.js distribution/$NATLANG/lib
fi

function insertbodyid() {
  local f=$1
  #echo doing insertbodyid $f
  $SED -i \
    -e 's/<body[^>]*>/\0\n<div id="body">/' \
    -e 's/<\/body>/<\/div>\n\0/' \
    $f
}

function insertgdrivesave() {

  local f=$1
  # echo doing insertgdrivesave $f in $(pwd)
  local f_head=${f%.*}
  local f_ext=${f##*.}
  local other_f=$f_head-gdrive-import.html
  local pageTitle=
  if test -f $f_head.adoc; then
    pageTitle=$(grep '^= ' $f_head.adoc|head -n 1|$SED -e 's/^= *//' -e 's/  *$//')
  fi

  if test ! "$pageTitle"; then
    pageTitle=$f_head
  fi

  pageTitle=$(echo $pageTitle|$SED -e 's/[“”]/\\\\"/g')
  pageTitle=$(echo $pageTitle|$SED -e 's/\//\\\//g')

  #echo pageTitle of $f_head.adoc is $pageTitle
  #FIXME: pathname should be corrected, again
  local hrefPrefix=https://www.bootstrapworld.org/materials/$SEMESTER_YEAR/$NATLANG/courses/$TGTPATHWAY/$LESSONSUBDIR

  hrefPrefix=$(echo $hrefPrefix|$SED -e 's/\/$//'|$SED -e 's/\//\\\//g')

  local TMPFILE=$f_head.$TMPAFX

  #echo TMPFILE is $TMPFILE

  cat > $TMPFILE-1.txt <<EOF
  <script>
  window.status = window.status || 'ready_to_print';
  window.___gcfg = {
  parsetags: 'explicit'
  };
  </script>
  <script src="https://apis.google.com/js/platform.js" async defer></script>
  <script>function renderSaveToDrive() {
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    gapi.savetodrive.render('savetodrive-div', {
    src:%INSERTGDRIVEURL,
    filename:"%INSERTGDRIVELESSONTITLE",
    sitename:"Bootstrap, Brown University"
  });
  if(isSafari){
    var warning = document.createElement("div");
    warning.id = "safariWarning";
    warning.innerHTML = "You appear to be using Safari, which interferes with Google's Save-to-Drive button. You can fix it by going to Preferences, clicking 'Privacy', and making sure that 'Prevent cross-site tracking' is <b>not</b> checked."
    var button = document.getElementById("savetodrive-div");
    button.parentNode.insertBefore(warning, warning.nextSibling);
  }
}
</script>
EOF
  cat > $TMPFILE-2.txt <<EOF
  <div id="savetodrive-div"></div>

EOF
  $SED -i \
    -e 's/^\(<body  *[^>]*\)>/\1 onload="renderSaveToDrive()">/' \
    -e 's/<\/head>/%INSERTGDRIVESAVE1\n\0/' \
    -e 's/<\/h1>.*/\0\n%INSERTGDRIVESAVE2/' \
    -e '/^<div id="body"/ s/id="body"/\0 onload="renderSaveToDrive()"/' \
    $f

  if test $WORKBOOKPAGE; then
    $SED -i \
      -e 's/^<body class="/\0workbookpage /' \
      $f
  elif test $DATASHEETPAGE; then
    $SED -i \
      -e 's/^<body class="/\0datasheetpage /' \
      $f
  fi

  if ! grep -q %INSERTGDRIVESAVE2 $f; then
    $SED -i \
      -e 's/<div id="header">/\0\n%INSERTGDRIVESAVE2/' \
      $f
  fi

  $SED -i \
    -e '/%INSERTGDRIVESAVE1/r '$TMPFILE-1.txt \
    -e '/%INSERTGDRIVESAVE2/r '$TMPFILE-2.txt \
    -e 's/%INSERTGDRIVESAVE[12]//' \
    $f

  #echo deleting $TMPFILE 12 .txt
  rm -f $TMPFILE-[12].txt

  $SED -i \
    -e 's/%INSERTGDRIVELESSONTITLE/'"$pageTitle"'/' \
    $f

  cp -p $f $other_f

  $SED -i \
    -e "s/%INSERTGDRIVEURL/(window.location.href.match(\/\\\\\/$\/)?(window.location.href+'index-gdrive-import.html'):(window.location.href.replace(\/([^\\\\\/]+)\\\\.([^.\\\\\/]+)$\/, '\$1-gdrive-import.html')))/" \
    $f

  $SED -i \
    -e 's/%INSERTGDRIVEURL/window.location.href/' \
    $other_f

  modifygdrivepage $other_f $f
}

function adjustgdrivecolgroup() {
  local f=$1

  local CTEMP=$(mktemp); rm -f $CTEMP

  local CTEMPFILE=$(basename $CTEMP)-cols.txt

  grep '^<col style.*> *$' $f > $CTEMPFILE

  local num=$(wc -l $CTEMPFILE|$SED -e 's/^ *\([^ ]*\).*/\1/')

  if test $num -eq 0; then
    rm -f $CTEMPFILE
    return
  fi

  $SED -i \
    -e 's/^<col //' \
    -e 's/> *$//' \
    $CTEMPFILE

  local i=1

  local cline
  local flnum

  while test $i -le $num; do
    cline=$($SED -ne "$i p" $CTEMPFILE)

    flnum=$(grep -n '^<th ' $f|$SED -e 1q|$SED -e 's/^\([^:]*\).*/\1/')

    $SED -i \
      -e "$flnum s/^<th /<th%GDRIVE $cline /" \
      $f

    i=$(expr $i + 1)

  done

  rm -f $CTEMPFILE

  $SED -i \
    -e 's/^<th%GDRIVE /<th /' \
    $f

}

function modifygdrivepage() {
  local f=$1
  local h=$2

  $SED -i \
    -e '/include virtual=".menubar.ssi"/d' \
    -e 's/^<p>Relevant Standards<select.*<\/select><\/p> *$/<p>Standards<\/p>/' \
    -e '/^<p><em>Select one or more standards from the menu on the left.*<\/p> *$/d' \
    -e 's/\(class="paragraph \)alignedStandardsIntro/\1/' \
    -e 's/\(class="dlist \)alignedStandards /\1/' \
    -e 's/href=\("\(https\|http\):\/\/\)/href%GDRIVEEXTERNALHREF=\1/g' \
    -e 's/<div/<span/g' \
    -e 's/<\/div>/<\/span>/g' \
    -e 's/<dt class="hdlist1">/\0<br\/>/g' \
    -e 's/<span class="sect1 lesson-section-1">/\0<hr\/>/g' \
    -e 's/<span class="openblock acknowledgment">/\0<hr\/>/g' \
    -e 's/<h2.*>\(.*\)<span class="duration">\(.*\)<\/span><\/h2>/<table class="grid-none frame-none section-heading"><tr><td width="65%">\1<\/td><td width="35%">\2<\/td><\/tr><\/table>/g' \
    -e 's/<tt\(.*\)>\(.*\)<\/tt>/<span\1>\2<\/span>/g' \
    $f
  $SED -i \
    -e 's/^\(.*\)<span\(  *class="paragraph lesson-point"\)/%GDRIVESPANDIV\1<div\2/g' \
    $f
  $SED -i \
    -e '/^%GDRIVESPANDIV/,/^<\/span>/ s/^<\/span>/<\/div>/' \
    -e 's/^%GDRIVESPANDIV//' \
    $f
  $SED -i \
    -e 's/href="/\0'$hrefPrefix'\//g' \
    $f
  $SED -i \
    -e 's/%GDRIVEEXTERNALHREF//g' \
    -e '/^ *<link rel="stylesheet".*\.css/d' \
    -e '/^ *<script .*\(codemirror\|runmode\|scheme2\|pyret-mode\|bootstraplesson\)/d' \
    -e '/<span class="tooltiptext">.*<\/span>/d' \
    $f
  echo "<style>" > $TMPFILE.css
  #echo doing gdrive-import: PWD is $(pwd)
  #echo cat $DISTROOTDIR/lib/gdrive-import.css
  cat lib/gdrive-import.css >> $TMPFILE.css
  echo "</style>" >> $TMPFILE.css
  $SED -i \
    -e '/<\/title>/r '$TMPFILE.css \
    $f

  $SED -i \
    -e 's/<span class="begin-ignore-for-gdrive">/<!--\0/g' \
    -e 's/<span class="end-ignore-for-gdrive"><\/span>/\0-->/g' \
    $f

  $SED -i \
    -e '/studentAnswer/ s/&#x5f;/\0\0/g' \
    $f

  rm -f $TMPFILE.css

  adjustgdrivecolgroup $f

  $SED -i \
    -e 's/<span class="\(begin\|end\)-ignore-for-gdrive"><\/span>//g' \
    $h

}

function removelogos() {
  local f=$1
  $SED -i \
    -e '/^<h2 .*<img src="bootstraplogo.png"/d' \
    $f
}

function cleanuptitle() {
  local f=$1
  $SED -i \
    -e '/^<title>/ s/<\/*span[^>]*>//g' \
    $f
}

function cleanupduration() {
  # cleans up a long-winded autogenerated h2 id
  local f=$1
  $SED -i \
    -e '/^<h2 id/ s/\(begin\|end\)curriculumspan/_/g' \
    -e '/^<h2 id/ s/curriculumspan_class//g' \
    $f
}

function insertsectionselfie() {
  local f=$1
  $SED -i \
    -e '/^<h2 id=/s/^<h2 id="\([^>]*\)>\(.*\)<\/h2>/<h2 id="\1><span class="section-link"><a href="#\1><span class="section-link-symbol">\&#128279;<\/span><\/a><\/span>\2<\/h2>/' \
    $f
}

function lintlesson() {
  local f=$1

  containingFile=${f%.shtml}.adoc

  test $LINT || return

  for g in 'Lesson Goals' Materials Preparation; do
    if ! grep -q "^<p>$g\>" $f; then
      echo
      echo WARNING: Lesson $containingFile missing summary-table row for \"$g\"
    fi
  done

}

function addanalytics() {
  local f=$1
  $SED -i \
    -e '/^<body/r $TOPDIR/lib/analytics.txt' \
    $f
}

function bumpcsspathdir() {
  local f=$1
  local localDISTROOTDIR=$2

  local f_head=${f%.*}
  local TMPFILE=$f_head.$TMPAFX

  cat > $TMPFILE-3.txt <<EOF
  <link rel="stylesheet" href="${localDISTROOTDIR}lib/curriculum.css" />
EOF
  if test $ASCIIDOCNODE; then
  $SED -i \
    -e '/^<link.*asciidoctor\.css/s/<link\(.*\)>/%INSERTLIBCURRICULUMCSS<link DISCARD \1>/' \
    -e '/%INSERTLIBCURRICULUMCSS/r '$TMPFILE-3.txt \
    -e 's/%INSERTLIBCURRICULUMCSS//' \
    -e 's/<link DISCARD .*asciidoctor\.css.*>//' \
    $f
    else
  $SED -i \
    -e '/^<link.*curriculum\.css/s/<link\(.*\)>/%INSERTLIBCURRICULUMCSS<link DISCARD \1>/' \
    -e '/%INSERTLIBCURRICULUMCSS/r '$TMPFILE-3.txt \
    -e 's/%INSERTLIBCURRICULUMCSS//' \
    -e 's/<link DISCARD .*curriculum\.css.*>//' \
    $f
  fi

  #echo deleting $TMPFILE-3.txt
  rm -f $TMPFILE-3.txt
}

function resolveabbrevs() {
  local f=$1
  local localDISTROOTDIR=$2
  local fdir=$(dirname $f)
  local fbase=${f##*/}
  # echo doing resolveabbrevs $f $localDISTROOTDIR
  local mathjaxneeded=
  local codemirrorneeded=
  if grep -q %CURRICULUMSCRIPT $f; then
    mathjaxneeded=1
  fi
  local CODELANG=pyret
  if test "$PROGLANG" = wescheme; then
    CODELANG=racket
  fi
  $SED -i \
    -e 's/<pre>/<pre><code class="'$CODELANG'">/g' \
    -e 's/<\/pre>/<\/code><\/pre>/g' \
    -e 's/<code>/<code class="'$CODELANG'">/g' \
    $f
  if grep -q 'class=\"\(pyret\|racket\)\"' $f || grep -q 'class=\"circleevalsexp\"' $f; then
    codemirrorneeded=1
  fi
  $SED -i \
    -e 's/%PYRETKEYWORD%\([^%]*\)%END%/<span class="pyretkeyword">\1<\/span>/g' \
    \
    -e 's/%CURRICULUMCOMMA%/,/g' \
    \
    -e 's/<p>\(%CURRICULUMCOMMENT%\)/\1/' \
    -e 's/\(%ENDCURRICULUMCOMMENT%\)<.p>/\1/' \
    -e 's/%CURRICULUMCOMMENT%/<!-- /' \
    -e 's/%ENDCURRICULUMCOMMENT%/\n-->/' \
    \
    -e 's/%CURRICULUMSCRIPT%/<script type="math\/tex"/g' \
    -e 's/%BEGINCURRICULUMSCRIPT%/>/g' \
    -e 's/%ENDCURRICULUMSCRIPT%/<\/script>/g' \
    \
    -e 's/%CURRICULUMPMMATH%/<!--CURRICULUMPMMATH<tt>/g' \
    -e 's/%ENDCURRICULUMPMMATH%/<\/tt>CURRICULUMPMMATH-->/g' \
    \
    -e 's/%CURRICULUM\([^%]*\)%/<\1/g' \
    -e 's/%BEGINCURRICULUM\([^%]*\)%/>/g' \
    -e 's/%ENDCURRICULUM\([^%]*\)%/<\/\1>/g' \
    \
    -e 's/&#8656;/\&lt;=/g' \
    -e 's/&#8594;/-\&gt;/g' \
    \
    -e 's/^\(<div id="preamble\)">/\1_disabled" class="lessonSummary">/' \
    $f
  $SED -i \
    -e '/%SIDEBARSECTION%/,/%ENDSIDEBARSECTION%/s/\(<\/div>\)<\/p>/\1/' \
    $f
  $SED -i \
    -e '/%SIDEBARSECTION%/,/%ENDSIDEBARSECTION%/s/<p>\(<div\)/\1/' \
    $f
  $SED -i \
    -e 's/%SIDEBARSECTION%/--><\/div><div class="sidebar"><div id="toggle"><\/div><div class="paragraph"><!--/' \
    $f
  $SED -i \
    -e 's/%ENDSIDEBARSECTION%/--><\/div><!--/' \
    $f
  #
  # echo inserting bootstraplesson.js etc in $f in $(pwd)
  if test ! -f $fdir/.cached/.bootstraplesson.txt; then
  cat > $fdir/.cached/.bootstraplesson.txt <<EOF
    <script src="${localDISTROOTDIR}lib/langtable.js"></script>
    <script src="${localDISTROOTDIR}lib/bootstraplesson.js"></script>
    <script src="${localDISTROOTDIR}dependency-graph.js"></script>
    <script src="${localDISTROOTDIR}pathway-tocs.js"></script>
    <script>var pathway;</script>
EOF
  fi
   $SED -i \
    -e '/^ *<link.*curriculum\.css/s/^/%INSERTBOOTSTRAPLESSON\0/' \
    -e "/%INSERTBOOTSTRAPLESSON/r $fdir/.cached/.bootstraplesson.txt" \
    -e 's/%INSERTBOOTSTRAPLESSON//' \
    $f
  #
  if test "$mathjaxneeded"; then
    if test ! -f $fdir/.cached/.mathjax.txt; then
    cat > $fdir/.cached/.mathjax.txt <<EOF
      <script src="${localDISTROOTDIR}/extlib/MathJax-2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML%2Clocal%2Fmathjaxlocal.js"></script>
      <script>window.status = "not_ready_to_print";</script>
EOF
    fi
    $SED -i \
      -e '/^ *<link.*curriculum\.css/s/^/%INSERTMATHJAX\0/' \
      -e "/%INSERTMATHJAX/r $fdir/.cached/.mathjax.txt" \
      -e 's/%INSERTMATHJAX//' \
      $f
  fi
  #
  if test "$codemirrorneeded"; then
    #FIXME: is codemirror.css needed?
    if test ! -f $fdir/.cached/.codemirror.t; then
    cat > $fdir/.cached/.codemirror.txt <<EOF
    <link rel="stylesheet" href="${localDISTROOTDIR}lib/codemirror.css" />
    <script src="${localDISTROOTDIR}lib/codemirror.js"></script>
    <script src="${localDISTROOTDIR}lib/runmode.js"></script>
    <script src="${localDISTROOTDIR}lib/scheme2.js"></script>
    <script src="${localDISTROOTDIR}lib/pyret-mode.js"></script>
EOF
    fi
$SED -i \
  -e '/^ *<link.*curriculum\.css/s/^/%INSERTCODEMIRROR\0/' \
  -e "/%INSERTCODEMIRROR/r $fdir/.cached/.codemirror.txt" \
  -e 's/%INSERTCODEMIRROR//' \
  $f
  fi
  #
  # echo Trying to find tif
  tif=$fdir/.cached/${fbase%.*}-comment.txt
  # echo Try $tif
  if test ! -f $tif; then
    tif=$fdir/.cached/.${fbase%.*}-comment.txt
    # echo Try2 $tif
  fi
  if test -f $tif; then
    # echo tif for $f is $tif
    $SED -i \
      -e '/^<body[^>]*>/s/<body[^>]*>/\0%INSERTCURRICULUMCOMMENT/' \
      -e '/%INSERTCURRICULUMCOMMENT/r '$tif \
      -e 's/%INSERTCURRICULUMCOMMENT//' \
      $f
  fi
  if test ! $WORKBOOKPAGE -a ! $DATASHEETPAGE; then
    $SED -i \
      -e 's/^<body class="/\0narrativepage /' \
      $f
  fi
}

function addproglang() {
  local f=$1
  # echo doing addproglang $f
  local proglangneeded=
  if grep -q 'class="headless-design-recipe.FORpyret"' $f; then
    proglangneeded=pyret
  elif grep -q 'class="headless-design-recipe.FORwescheme"' $f; then
    proglangneeded=wescheme
  elif grep -q 'class="headless-design-recipe.FORcodap"' $f; then
    proglangneeded=codap
  fi
  if test "$proglangneeded"; then
    $SED -i \
      -e 's/^<body class="/\0'$proglangneeded' /' \
      -e 's/<p><span class="headless-design-recipe.FOR[a-z]*"><\/span><\/p>//' \
      $f
  fi
}

function adjustproglangsubdirs() {
  local d=$1
  local pl=$2
  #echo doing adjustproglangsubdirs $d $pl
  #echo PROGLANG is $PROGLANG

  test -d "$d" || return

  if test -d "$d"/"$pl"; then
    #echo copying "$d"/"$pl" to "$d"
    cp -p "$d"/"$pl"/* "$d"
  fi

  for lang in codap pyret wescheme; do
    if test -d "$d"/$lang; then
      rm -fr "$d"/$lang
    fi
  done

  for subdir in "$d"/*; do
    if test -d "$subdir"; then
      adjustproglangsubdirs "$subdir" "$pl"
    fi
  done
}

function shadowcopydir() {
  # srcdir = solution-pages from (previous run + repo)
  # targetdir = pages from repo
  local srcdir=$1
  local targetdir=$2
  #echo doing shadowcopydir from $srcdir to $targetdir
  mkdir -p "$targetdir"

  for f in "$srcdir"/*; do
    if test -f "$f"; then
      g=$(basename "$f")
      targetfile="$targetdir/$g"
      cp -p "$f" "$targetdir"
    elif test -d "$f"; then
      g=$(basename "$f")
      shadowcopydir "$f" "$targetdir"/"$g"
    fi
  done
}

function doadoc() {
  local f="$1"
  #echo doing doadoc "$@"
  #echo PROGLANG Is $PROGLANG
  local fbase=${f%.a*doc}
  local fasc=.cached/.$fbase.asc
  local fhtml=$fbase.html
  #echo using $fasc $fhtml
  test -d .cached || mkdir -p .cached

  local otherproglang="#f"

  if test $LESSONPLAN; then
    # echo doing doadoc LESSONPLAN in $(pwd)
    if test -f proglang.txt; then
      if grep -q wescheme proglang.txt; then
        otherproglang="$otherproglang \"wescheme\""
      fi
      if grep -q codap proglang.txt; then
        otherproglang="$otherproglang \"codap\""
      fi
      otherproglang="($otherproglang)"
    fi
    touch .cached/.index-sidebar.asc
    touch .cached/.index-standards.asc
    echo "(\"$f\" #:containing-directory \"lessons/$LESSONPLAN\" #:dist-root-dir \"$DISTROOTDIR\" #:lesson-plan \"$LESSONPLAN\" #:proglang \"$PROGLANG\" #:other-proglang '$otherproglang)" >> $ADOCABLES_INPUT
    echo lessons/$LESSONPLAN/.cached/.${f%.adoc}.asc >> $ADOC_INPUT
    echo lessons/$LESSONPLAN/.cached/.${f%.adoc}.html >> $ADOC_POSTPROC_LESSONPLAN_INPUT
  elif test $NARRATIVE; then
    if test "$SRCPATHWAY" = algebra; then
      otherproglang="($otherproglang \"wescheme\")"
    fi
    if test "$SRCPATHWAY" = data-science -o "$SRCPATHWAY" = data-science-codap; then
      otherproglang="($otherproglang \"codap\")"
    fi
    echo "(\"$f\" #:containing-directory \"courses/$TGTPATHWAY\" #:dist-root-dir \"$DISTROOTDIR\" #:narrative #t #:target-pathway \"$TGTPATHWAY\" #:proglang \"$PROGLANG\" #:other-proglang '$otherproglang)" >> $ADOCABLES_INPUT
    echo courses/$TGTPATHWAY/.cached/.${f%.adoc}.asc >> $ADOC_INPUT
    echo courses/$TGTPATHWAY/.cached/.${f%.adoc}.html >> $ADOC_POSTPROC_NARRATIVE_INPUT
    if test $AUTOGEN_NARRATIVE; then
      echo courses/$TGTPATHWAY/.pathway-lessons.asciidoc >> $ADOC_INPUT
      echo courses/$TGTPATHWAY/.pathway-lessons.html >> $ADOC_POSTPROC_ALLPWYLESSONS_INPUT
    fi
    echo courses/$TGTPATHWAY/.cached/.pathway-glossary.asc >> $ADOC_INPUT
    echo courses/$TGTPATHWAY/.cached/.pathway-glossary.html >> $ADOC_POSTPROC_NARRATIVEAUX_INPUT
    if test $AUTOGEN_NARRATIVE; then
      echo courses/$TGTPATHWAY/.cached/.pathway-alignments.asc >> $ADOC_INPUT
      echo courses/$TGTPATHWAY/.cached/.pathway-alignments.html >> $ADOC_POSTPROC_NARRATIVEAUX_INPUT
    fi
  elif test $TEACHER_RESOURCES; then
    echo "(\"$f\" #:containing-directory \"courses/$TGTPATHWAY/resources\" #:dist-root-dir \"$DISTROOTDIR\" #:resources #t #:target-pathway \"$TGTPATHWAY\" #:proglang \"$PROGLANG\")" >> $ADOCABLES_INPUT
    echo courses/$TGTPATHWAY/resources/.cached/.${f%.adoc}.asc >> $ADOC_INPUT
    echo courses/$TGTPATHWAY/resources/.cached/.${f%.adoc}.html >> $ADOC_POSTPROC_RESOURCES_INPUT
  fi

}

function doadocs() {
  local ff="$@"
  # echo doing doadocs $ff
  # echo PROGLANG is $PROGLANG

  if test $# -eq 0; then
    return
  elif test $# -eq 1 -a ! -f $1; then
    return
  fi

  test -d .cached || mkdir -p .cached

  overwrite building  /$LESSONSUBDIR

  otherdirarg="#f"
  solutionsmodearg="#f"
  boilerplate="#f"

  test $OTHERDIR && otherdirarg="#t"
  test $SOLUTION && solutionsmodearg="#t"
  test $BOILERPLATE && boilerplate="#t"

  for f in $ff; do
    if test $TGTPATHWAY; then
      echo "(\"$f\" #:containing-directory \"courses/$TGTPATHWAY/$LESSONSUBDIR\" #:dist-root-dir \"$DISTROOTDIR\" #:other-dir $otherdirarg #:target-pathway \"$TGTPATHWAY\" #:solutions-mode $solutionsmodearg #:proglang \"$PROGLANG\")" >> $ADOCABLES_INPUT
      if test ! $OTHERDIR; then
        echo courses/$TGTPATHWAY/$LESSONSUBDIR/.cached/.${f%.adoc}.asc >> $ADOC_INPUT
      fi
      echo courses/$TGTPATHWAY/$LESSONSUBDIR/.cached/.${f%.adoc}.html >> $ADOC_POSTPROC_WORKBOOKPAGE_INPUT
    else
      echo "(\"$f\" #:containing-directory \"lessons/$LESSONSUBDIR\" #:dist-root-dir \"$DISTROOTDIR\" #:lesson \"$LESSON\" #:other-dir $otherdirarg #:solutions-mode $solutionsmodearg #:proglang \"$PROGLANG\")" >> $ADOCABLES_INPUT
      if test ! $OTHERDIR; then
        echo lessons/$LESSONSUBDIR/.cached/.${f%.adoc}.asc >> $ADOC_INPUT
      fi
      echo lessons/$LESSONSUBDIR/.cached/.${f%.adoc}.html >> $ADOC_POSTPROC_WORKBOOKPAGE_INPUT
    fi
  done

  #echo DISTROOTDIR is $DISTROOTDIR

}

function processadocs() {
  # echo doing processadocs

  local ff=

  for f in *.adoc; do
    if test ! -f $f; then
      #echo Not a valid adoc file $f in $(pwd)
      continue
    fi
    if echo $f|grep -q ' '; then
      echo Discarding file \'$f\' with space in its name
      rm "$f"
      continue
    fi
    DOIT=
    fbase=${f%.adoc}
    fhtml=$fbase.html
    fasc=.cached/.$fbase.asc
    if test $FORCE; then
      DOIT=1
    else
      if test $OTHERDIR; then
        if test $f -nt $fasc; then DOIT=1; fi
      else
        if test $f -nt $fhtml; then DOIT=1; fi
      fi
    fi
    if test $DOIT; then
      fpdf=$fbase.pdf
      # unfortunately following doesn't work if repo supplies both f.adoc and f.pdf
      # test -f "$fpdf" && rm -f "$fpdf"
      ff="$ff $f"
      rm -f .cached/.$fbase-comment.txt
    fi
  done

  doadocs $ff

  if test ! $NOPDF; then
    local tryhtml=
    for ext in adoc html; do
      if test "$ext" = html; then
        test ! $tryhtml && break
      fi
      for f in *.$ext; do
        if test ! -f "$f"; then
          test "$ext" = adoc && tryhtml=1
          break
        fi
        if test "$ext" = adoc; then
          fbase=${f%.adoc}
        else 
          fbase=${f%.html}
        fi
        fhtml=$fbase.html
        fpdf=$fbase.pdf
        #echo doadocs LESSONSUBDIR is $LESSONSUBDIR, $fhtml
        if test ! -f "$fpdf"; then
          if test "$RESOURCEDOCS" = 1 -o \
            "$LESSONSUBDIR" = front-matter/pages -o "$LESSONSUBDIR" = front-matter/solution-pages -o \
            "$LESSONSUBDIR" = back-matter/pages -o "$LESSONSUBDIR" = back-matter/solution-pages; then
                      #echo doing it!
                      if test ! $OTHERDIR; then
                        echo ", { \"input\": \"courses/$TGTPATHWAY/$LESSONSUBDIR/$fhtml\" }" >> $PUPPETEER_INPUT
                      fi
          fi
        fi
      done
    done
  fi

  # for f in $ff; do
  #   # checklinks $f
  # done

}

function recursiveadoc() {
  local dir="$1"
  local oldPATHWAYROOTDIR="$2"
  local oldDISTROOTDIR="$3"
  local oldLESSONSUBDIR="$4"
  local oldSOLUTION="$SOLUTION"
  local oldOTHERDIR="$OTHERDIR"

  #echo doing recursiveadoc "$@"

  if test "$dir" = solution-pages; then export SOLUTION=1; fi

  cd "$dir"
  export PATHWAYROOTDIR="$oldPATHWAYROOTDIR../"
  export DISTROOTDIR="$oldDISTROOTDIR../"
  if test "$oldLESSONSUBDIR" = "."; then
    export LESSONSUBDIR="$dir"
  else
    export LESSONSUBDIR="$oldLESSONSUBDIR/$dir"
  fi

  #echo LESSONSUBDIR is $LESSONSUBDIR

  for d in *; do
    if test -d "$d"; then
      #echo recursively calling recursivadoc
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$DISTROOTDIR" "$LESSONSUBDIR"
    fi
  done

  export OTHERDIR=
  if test "$dir" = fragments -o "$dir" = xtra -o "$dir" = xtras; then
    export OTHERDIR=1
  fi

  export NOCOLOPHON=
  if test "$dir" = about-datasets; then
    export NOCOLOPHON=1
  fi

  if test $LINT; then
    if test ! $OTHERDIR; then
      if test -f .cached/.workbook-pages-ls.txt.kp; then
        for wbp in $(cat .cached/.workbook-pages-ls.txt.kp); do
          if test ! -f $wbp; then
            wbpadoc=${wbp%.*}.adoc
            if test ! -f $wbpadoc; then
              BROKEN_WORKBOOK_PAGES=1
              echo
              echo WARNING: Missing workbook page $wbp in $LESSONSUBDIR
            fi
          fi
        done
      fi
    fi
  fi

  processadocs 

  #test $DEBUG || rm -f *.adoc

  cd ..
  export PATHWAYROOTDIR="$oldPATHWAYROOTDIR"
  export DISTROOTDIR="$oldDISTROOTDIR"
  export LESSONSUBDIR="$oldLESSONSUBDIR"
  export SOLUTION="$oldSOLUTION"
  export OTHERDIR="$oldOTHERDIR"
}

function mkdirsolutionversion() {
  #echo doing mkdirsolutionversion
  test -d pages || return

  #echo PWD is $(pwd)

  test -d pages/.cached || mkdir -p pages/.cached

  if test -d solution-pages-2; then
    #echo DEADC0DE: solution-pages-2 shouldn\'t exist
    rm -fr solution-pages-2
  fi

  cp -pr pages solution-pages-2

  cp -p $PROGDIR/.hta* solution-pages-2

  if test -d solution-pages; then
    shadowcopydir solution-pages solution-pages-2
    rm -fr solution-pages
  fi
  mv solution-pages-2 solution-pages

  test -d solution-pages/.cached || mkdir -p solution-pages/.cached
}

function checksinglelessonplan() {
  local L=$1
  local copacetic=1
  for f in *.adoc; do
    if test ! -f $f; then
      copacetic=
    fi
  done
  if ! test $copacetic; then
    if test ! -f index.shtml; then
      echo
      echo WARNING: No lesson plan in $L
    fi
  elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo
    echo WARNING: Too many lesson plans in $L
  elif test -f index.adoc; then
    :
  else
    for f in *.adoc; do
      mv $f index.adoc
    done
  fi
}

function checklessonplan() {
  local L=$1
  # echo doing checklessonplan $L in $(pwd)
  checksinglelessonplan $L
  test -d .cached || mkdir -p .cached

  if test -f index.adoc; then
    grep '^= ' index.adoc|head -n 1|$SED -e 's/^= *//' -e 's/  *$//' > .cached/.index.titletxt

  local aspect exerfA exerflist f fhtml fpdf g gbase gext gpdf wbpages

  #echo collecting exercises in $L
  $PROGDIR/collect-exercises.rkt index.adoc
  exerflist=pages/.cached/.exercise-pages-ls.txt.kp
  if test -f $exerflist; then
    #echo checklessonplan I
    exerfA=pages/.cached/.exercise-pages.txt.kp
    rm -f $exerfA
    for f in $(cat $exerflist); do
      #echo checklessonplan II $f
      aspect=portrait
      g=$f
      if test ${f%.adoc} = $f; then
        echo $f >> $exerfA
      elif head -5 pages/$f|grep -q '^ *\[\.landscape\] *$'; then
        # aspect=landscape # ? FIXME
        echo $f landscape >> $exerfA
      else
        echo $f >> $exerfA
      fi
    done
  fi
  fi

  # wbpages=pages/workbook-pages.txt
  # if test ! -f $wbpages; then
  #   wbpages=/dev/null
  # fi
  # if test ! -f $exerflist; then
  #   exerflist=/dev/null
  # fi

  if test ! $NOPDF; then
    local tryhtml=
    for ext in adoc html; do
      if test "$ext" = html; then
        test ! $tryhtml && break
      fi
      for f in pages/*.$ext; do
        # echo checklessonplan doing $f
        if test ! -f "$f"; then
          test "$ext" = adoc && tryhtml=1
          break
        fi
        if test "$ext" = adoc; then
          g=${f%.adoc}
        else
          g=${f%.html}
        fi
        fpdf=$g.pdf
        fhtml=$g.html
        # grep -q "$f" $wbpages $exerflist && continue
        # grep -q "$fpdf" $wbpages $exerflist && continue
        # grep -q "$fhtml" $wbpages $exerflist && continue

        # echo confirmed

        aspect=portrait
        #fixme what if html
        if head -5 $f|grep -q '^ *\[\.landscape\] *$'; then
          aspect=landscape
        fi
        g=${g#pages/}

        # if test ! -f "pages/$g.pdf"; then
        #   echo pages/$g.pdf doesnt exist
        # fi
        # if test "pages/$g.html" -nt "pages/$g.pdf"; then
        #   echo pages/$g.html is nt pages/$g.pdf
        # fi


        if test ! -f "pages/$g.pdf" -o "pages/$g.html" -nt "pages/$g.pdf"; then
          echo ", { \"input\": \"lessons/$L/pages/$g.html\", \"aspect\": \"$aspect\", \"debug\": 1 }" >> $PUPPETEER_INPUT
        fi
        if test ! -f "solution-pages/$g.pdf" -o "solution-pages/$g.html" -nt "solution-pages/$g.pdf"; then
          echo ", { \"input\": \"lessons/$L/solution-pages/$g.html\", \"aspect\": \"$aspect\", \"debug\": 2 }" >> $PUPPETEER_INPUT
        fi
      done
    done
  fi

}

function buildworkbookpages() {
  local L=$1

  if test -f $L/.cached/.wescheme -a "$PROGLANG" != "wescheme"; then
    return
  elif test -f $L/.cached/.codap -a "$PROGLANG" != "codap"; then
    return
  fi

  # echo doing buildworkbookpages $L in $(pwd)

  export oldDISTROOTDIR="$DISTROOTDIR"
  local oldPROGLANG="$PROGLANG"
  cd $L
  export LESSON=$L
  export LESSONSUBDIR=$L

  DORECURSIVEADOC=

  if test -f .cached/.redo; then
    DORECURSIVEADOC=1
    rm -f .cached/.redo
  fi

  if test $DORECURSIVEADOC; then
    #echo !!! doing buildworkbookpages $L $DORECURSIVEADOC

    if test ! -d pages; then
      echo
      echo WARNING: $L missing pages
      mkdir pages
      touch pages/workbook-pages.txt
    fi

  #echo calling mkdirsolutionversion in buildworkbookpages
  mkdirsolutionversion

  #
  export PATHWAYROOTDIR="../../"
  export DISTROOTDIR="$DISTROOTDIR../"
  export SOLUTION=
  export WORKBOOKPAGE=1

  for d in *; do
    if test -d "$d"; then
      #echo calling recursiveadoc from buildworkbookpages
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$DISTROOTDIR" "$LESSONSUBDIR"
    fi
  done

  export WORKBOOKPAGE=

  fi

  cd ..

  export PROGLANG="$oldPROGLANG"
  export DISTROOTDIR="$oldDISTROOTDIR"
}

function collapseadjtables() {
  local f=$1
  local x=$(grep -n '^<\/*tbody>' "$f"|$SED -e 's/^\([^:]*\):.*/\1/'|$SED -ne '2,3p')
  if test -z "$x"; then
    return
  fi
  local xi=$(echo $x|$SED -e 's/^\([^ ]*\) .*/\1/')
  local xii=$(echo $x|$SED -e 's/^[^ ]* \([^ ]*\).*/\1/')
  if test -z "$xi" -o -z "$xii"; then
    return
  fi
  $SED -i -e "$xi,${xii}d" "$f"
}

function buildlessonplan() {
  local L=$1
  if test -f $L/.cached/.wescheme -a "$PROGLANG" != "wescheme"; then
    return
  elif test -f $L/.cached/.codap -a "$PROGLANG" != "codap"; then
    return
  fi

  # echo doing buildlessonplan $L in $(pwd)

  local oldLESSONSUBDIR=$LESSONSUBDIR
  local oldPROGLANG="$PROGLANG"

  cd $L
  export DISTROOTDIR=../../
  export LESSONSUBDIR=$L
  export LESSON=$L
  export LESSONPLAN=$(basename $LESSONSUBDIR)

  if test -f index.adoc; then
    #export PATHWAYROOTDIR="../../"
    export PATHWAYROOTDIR="../courses/$TGTPATHWAY/"
    # there should be only one?
    if test index.adoc -nt index.shtml; then
      overwrite building lesson plan: $L
      rm -f .cached/.index-comment.txt
      test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
      doadoc index.adoc
    else
      if test -f pathway-missing-glossary-items.rkt.kp; then
        $PROGDIR/glossary-warnings.rkt
      fi
    fi
    if test -f index.shtml; then
      # checklinks index.shtml

      if test ! $NOPDF; then
        if test index.adoc -nt index.pdf; then
          #echo PUPPETEER_INPUT is x $PUPPETEER_INPUT x
          echo ", { \"input\": \"lessons/$LESSONSUBDIR/index.shtml\", \"aspect\": \"portrait\" }" >> $PUPPETEER_INPUT
        fi
      fi
    fi
    if test ! $DEBUG; then
      rm -f *.asc
    fi
  fi
  cd ..

  export LESSONPLAN=
  export LESSONSUBDIR=$oldLESSONSUBDIR
  export PROGLANG="$oldPROGLANG"
  export LESSON=
}

function buildcommonlessons() {
  # echo doing buildcommonlessons
  cd $TOPDIR
  cd $DESTLANGDIR
  cd lessons
  export DISTROOTDIR=../
  local L
  # process lesson directories in parallel
  if test -f $RELEVANT_LESSONS_INPUT; then
    for L in $(cat $RELEVANT_LESSONS_INPUT); do
      export LESSON=$L
      buildworkbookpages $L
      # if test $NOPARALLEL; then
      #   buildworkbookpages $L
      # else
      #   buildworkbookpages $L &
      # fi
    done
  fi

  # test ! $NOPARALLEL && wait

  #echo starting collectworkbookpages in $(pwd)

  if test -f $RELEVANT_LESSONS_INPUT; then
    export DOINGLESSON=1
    for d in $(cat $RELEVANT_LESSONS_INPUT); do
      collectworkbookpages "$d"
    done
    export DOINGLESSON=
  fi

  cd $TOPDIR
  cd $DESTLANGDIR
  export PATHWAYROOTDIR=./
  export DISTROOTDIR=./
  export LESSON=
  export LESSONSUBDIR=.
}

function proglangversion() {
  local f=$1

  for pl in codap wescheme; do
    if test $(echo $f|grep "\-${pl}$"); then
      local g=${f%-*}
      if test -d $g; then
        return 0
      fi
    fi
  done
  return 1
}

# Must be done sequentially, to handle prerequisite calculation
function builddependencyjson() {
  # echo doing builddependencyjson
  cd $TOPDIR/distribution/$NATLANG/lessons
  export DISTROOTDIR=../
  GRAPHFILE=$TOPDIR/distribution/$NATLANG/dependency-graph.js
  echo "var graph = {" > $GRAPHFILE
  first=1
  for L in *; do
    if proglangversion $L; then
      continue
    fi
    #echo L is $L
    Lbasename=$L
    # the following sanity checks shdnt be needed
    #test -d "$L" || continue
    #if test "$L" = lib; then continue; fi
    if ! grep -q "^ *\"$Lbasename\"" $GRAPHFILE; then
      if test $first; then
        first=
      else
        echo "," >> $GRAPHFILE
      fi
      titletxt=
      if test -f $L/.cached/.index.titletxt; then
        titletxt=$(cat $L/.cached/.index.titletxt|$SED -e 's/"/\\"/g')
      fi
      desctxt=
      if test -f $L/.cached/.index-desc.txt.kp; then
        desctxt=$(cat $L/.cached/.index-desc.txt.kp|$SED -e 's/"/\\"/g')
      fi
      pagestxt=
      if test -f $L/pages/.cached/.workbook-pages-ls.txt.kp; then
        pagestxt=$(cat $L/pages/.cached/.workbook-pages-ls.txt.kp|$SED -e ':a' -e 'N' -e '$!ba' -e 's/\n/\", \"/g'|$SED -e 's/.*/\"\0\"/')
      fi
      exerpagestxt=
      if test -f $L/pages/.cached/.exercise-pages-ls.txt.kp; then
        exerpagestxt=$(cat $L/pages/.cached/.exercise-pages-ls.txt.kp|$SED -e ':a' -e 'N' -e '$!ba' -e 's/\n/\", \"/g'|$SED -e 's/.*/\"\0\"/')
      fi
      primstxt=
      if test -f $L/.cached/.index-primitives.txt.kp; then
        primstxt=$(cat $L/.cached/.index-primitives.txt.kp|$SED -e ':a' -e 'N' -e '$!ba' -e 's/\n/\", \"/g'|$SED -e 's/.*/\"\0\"/')
      fi
      echo "  \"$Lbasename\" : {" >> $GRAPHFILE
      echo "    title: \"$titletxt\"," >> $GRAPHFILE
      echo "    description: \"$desctxt\"," >> $GRAPHFILE
      echo "    pages: [$pagestxt]," >> $GRAPHFILE
      echo "    exercisePages: [$exerpagestxt]," >> $GRAPHFILE
      echo "    primitives: [$primstxt]," >> $GRAPHFILE
      if test -f $L/.cached/.lesson-keywords.txt.kp; then
        cat $L/.cached/.lesson-keywords.txt.kp >> $GRAPHFILE
      fi
      echo -n "    prerequisites: [" >> $GRAPHFILE
      pfirst=1
      if test -f $L/.cached/.lesson-prereq.txt.kp; then
        for p in $(cat $L/.cached/.lesson-prereq.txt.kp); do
          if test $pfirst; then
            pfirst=
          else
            echo -n ", " >> $GRAPHFILE
          fi
          echo -n "\"$p\"" >> $GRAPHFILE
        done
      fi
      echo "]," >> $GRAPHFILE
      if test -f $L/.cached/.lesson-standards-w-prose.txt.kp; then
        cat $L/.cached/.lesson-standards-w-prose.txt.kp >> $GRAPHFILE
      fi
      echo "  }" >> $GRAPHFILE
    fi
  done
  echo "}" >> $GRAPHFILE
  # convert to UTF-16 to handle curlyquotes
  iconv -f UTF-8 -t UTF-16 $GRAPHFILE > tmp.txt
  mv -f tmp.txt $GRAPHFILE
  #rm tmp.txt
}

function buildlessonplans() {
  # echo %%% doing buildlessonplans
  start=`date +%s`
  cd $TOPDIR/distribution/$NATLANG/lessons
  export DISTROOTDIR=../
  local L
  #local prevL=/dev/null
  if test -f $RELEVANT_LESSONS_INPUT; then
    for L in $(cat $RELEVANT_LESSONS_INPUT); do
      # needed?
      #cat $prevL/.cached/.*primtxt > $L/.cached/.prevlesson.primtxt 2> /dev/null
      buildlessonplan $L
    done
  fi
  export LESSONSUBDIR=
  cd $TOPDIR/$DESTLANGDIR
  end=`date +%s`
  runtime=$((end-start))
  #echo \ Completed in $runtime s
  #echo " "
}

function collectprimitives() {
  # echo doing collectprimitives in $(pwd)

  cd $TOPDIR/distribution/$NATLANG/lessons

  local L
  local copacetic
  local f

  if test -f $RELEVANT_LESSONS_INPUT; then
    for L in $(cat $RELEVANT_LESSONS_INPUT); do
      # needed?
      #cat $prevL/.cached/.*primtxt > $L/.cached/.prevlesson.primtxt 2> /dev/null
      copacetic=1
      # echo %%% $L has $L/.cached/.*primtxt
      for f in $L/.cached/.*primtxt; do
        if test ! -f $f; then
          # echo %%% Not copacetic
          copacetic=
        fi
      done
      if test $copacetic; then
        # echo putting the primtxts in $L/.cached/.index-primitives.txt.kp
        cat $L/.cached/.*primtxt | sort -u > $L/.cached/.index-primitives.txt.kp
      fi
      #prevL=$L
    done
  fi

}

function buildpathwaynarrative() {
  # echo doing buildpathwaynarrative $PWD
  export AUTOGEN_NARRATIVE=1
  if test ! -f index.adoc; then
    for f in *.adoc; do
      if test -f $f; then
        mv $f index.adoc
      fi
    done
  fi
  if test ! -f index.adoc; then
    touch index.adoc
  elif test -s index.adoc; then
    export AUTOGEN_NARRATIVE=
    echo
    echo Using custom narrative index.adoc found in pathway $PATHWAY
  fi

  export PATHWAYROOTDIR=./
  export LESSONSUBDIR=
  if test index.adoc -nt index.shtml; then
    echo building pathway narrative: $PATHWAY
    export NARRATIVE=1
    rm -f .cached/.index-comment.txt
    test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
    doadoc index.adoc
    export NARRATIVE=
  fi

  export AUTOGEN_NARRATIVE=
  # checklinks index.shtml
  #verifylinks

}

function makeworkbookjson() {

  #echo doing makeworkbookjson "$@" in $(pwd)

  local tgt=$1
  local tgtpathway=$2

  local WORKBOOKINPUT=$TOPDIR/distribution/$NATLANG/courses/$tgtpathway/.cached/.filelist

  local filesvar=

  local wbpnf=
  local includesolutions=
  local includeoptexercises=

  if test "$tgt" = bm-contracts -o "$tgt" = bm-contracts-sols; then
    wbpnf=.cached/.back-matter-contracts-index.rkt
  #elif test "$tgt" = workbook -o "$tgt" = pd-workbook -o "$tgt" = workbook-sols; then
  elif test "$tgt" = workbook -o "$tgt" = workbook-sols; then
    wbpnf=.cached/.workbook-page-index.rkt
  elif test "$tgt" = opt-exercises -o "$tgt" = opt-exercises-sols; then
    wbpnf=.cached/.opt-exercises-index.rkt
  else
    wbpnf=.cached/.workbook-long-page-index.rkt
  fi

  if test "$tgt" = workbook; then
    filesvar=workbookFiles
  #elif test "$tgt" = pd-workbook; then
  #  filesvar=pdWorkbookFiles
  #elif test "$tgt" = pd-workbook-long; then
  #  filesvar=pdWorkbookLongFiles
  elif test "$tgt" = bm-contracts; then
    filesvar=bmContractsFiles
  elif test "$tgt" = bm-contracts-sols; then
    filesvar=bmContractsSolsFiles
  elif test "$tgt" = workbook-sols; then
    filesvar=workbookSolsFiles
  elif test "$tgt" = workbook-long; then
    filesvar=workbookLongFiles
  elif test "$tgt" = workbook-long-sols; then
    filesvar=workbookLongSolsFiles
  elif test "$tgt" = opt-exercises; then
    filesvar=optExercisesFiles
  elif test "$tgt" = opt-exercises-sols; then
    filesvar=optExercisesSolsFiles
  fi

  if test "$tgt" = workbook-sols -o "$tgt" = bm-contracts-sols -o "$tgt" = workbook-long-sols -o "$tgt" = opt-exercises-sols; then
    includesolutions=1
  fi

  #if test "$tgt" = workbook-long -o "$tgt" = pd-workbook-long -o "$tgt" = workbook-long-sols -o "$tgt" = opt-exercises -o "$tgt" = opt-exercises-sols; then
  if test "$tgt" = workbook-long -o "$tgt" = workbook-long-sols -o "$tgt" = opt-exercises -o "$tgt" = opt-exercises-sols; then
    includeoptexercises=1
  fi

  #echo Initializing $WORKBOOKINPUT_$tgt

  echo "{ \"fileList\": [ \"ignoreElement\" " > $WORKBOOKINPUT-$tgt.json

  local currlesson=

  cat $wbpnf |
    while read -r pdfpagespec; do
      if echo $pdfpagespec|grep -qv '\(lessons\|front-matter\|back-matter\)'; then
        continue
      fi
      lessondir=$(echo $pdfpagespec|$SED -e 's/^("\([^"]*\).*/\1/')
      workbookpage=$(echo $pdfpagespec|$SED -e 's/^("[^"]*" *"\([^"]*\).*/\1/')
      aspect=$(echo $pdfpagespec|$SED -e 's/^("[^"]*" *"[^"]*" *"\([^"]*\).*/\1/')
      pageno=$(echo $pdfpagespec|$SED -e 's/^("[^"]*" *"[^"]*" *"[^"]*" *"\?\([^")]*\).*/\1/')

      if test "$pageno" = no -o "$pageno" = No -o "$pageno" = NO; then
        pageno=false
      fi

      if test "$pageno" != false; then
        pageno=true
      fi

      freshlesson=
      if test "$lessondir" != "$currlesson"; then
        freshlesson=1
      fi

      if test "$freshlesson"; then
        currlesson=$lessondir
        docfile=$currlesson/index.shtml
        #if test -f "$docfile"; then
        #  if test "$tgt" = pd-workbook -o "$tgt" = pd-workbook-long; then
        #    echo $currlesson/index.pdf >> $WORKBOOKINPUT-$tgt
        #  fi
        #fi
      fi

      if test $includesolutions; then
        docfile=$lessondir/solution-pages/$workbookpage
      else
        docfile=$lessondir/pages/$workbookpage
      fi

      docfileext=${docfile##*.}

      if test "$docfileext" = adoc; then
        docfile=${docfile%.adoc}.html
        docfileext=html
      elif test "$docfileext" = pdf; then
        htmlfile=${docfile%.pdf}.html
        if test -f $htmlfile; then
          docfile=$htmlfile
          docfileext=html
        fi
      fi

      #echo docfile= $docfile
      #echo docfileext= $docfileext

      if test "$docfileext" = html; then
        if test -f "$docfile"; then
          localpdffile=${docfile%.html}.pdf

          echo ", { \"file\": \"$localpdffile\", \"paginate\": $pageno }" >> $WORKBOOKINPUT-$tgt.json

        else
          echo ", { \"file\": \"../../lib/$ABYSS.pdf\", \"paginate\": $pageno }" >> $WORKBOOKINPUT-$tgt.json
        fi

      elif test ! -f $docfile; then
        echo ", { \"file\": \"../../lib/$ABYSS.pdf\", \"paginate\": $pageno }" >> $WORKBOOKINPUT-$tgt.json

      else
        echo ", { \"file\": \"$docfile\", \"paginate\": $pageno }" >> $WORKBOOKINPUT-$tgt.json

      fi

    done

    echo "] }" >> $WORKBOOKINPUT-$tgt.json

    #echo Finished with $WORKBOOKINPUT-$tgt.json

}

function buildteacherresource() {
  # echo doing buildteacherresource
  cd resources
  export PATHWAYROOTDIR=../
  export DISTROOTDIR=../../../
  export LESSONSUBDIR=resources
  #cp -p $PROGDIR/*.css $PROGDIR/.hta* .
  # cp -p $PROGDIR/.hta* .
  local copacetic=1
  if test ! -f index.adoc; then
    for f in *.adoc; do
      if test ! -f $f; then copacetic=
      fi
    done
  fi
  if test ! "$copacetic" -a ! -f index.shtml; then
    echo
    echo WARNING: No teacher resource files in pathway $PATHWAY
  elif ls *.adoc 2> /dev/null | wc -l | grep -vq '^ *[01]$'; then
    echo
    echo WARNING: Too many teacher resource files in pathway $PATHWAY
  else
    #export PATHWAYROOTDIR=../
    # there should be only one?
    if test ! -f index.adoc; then
      for f in *.adoc; do
        if test -f $f; then
          mv $f index.adoc
        fi
      done
    fi
    if test index.adoc -nt index.shtml; then
      overwrite building teacher resources: $PATHWAY "→" "resources" "→" *.adoc
      export TEACHER_RESOURCES=1
      rm -f .cached/.index-comment.txt
      test $EXPANDEDWARNINGS || echo -n $'\033[?7h'
      doadoc index.adoc
      #$PROGDIR/adoc-preproc.rkt index.adoc
      export TEACHER_RESOURCES=
    fi
    #checklinks index.shtml
  fi
  cd ..
  export PATHWAYROOTDIR=./
  export LESSONSUBDIR=

}

function batchhtmltopdf() {
  cd $TOPDIR/distribution/$NATLANG
  # echo doing batchhtmltopdf in $(pwd)
  echo "] }" >> $PUPPETEER_INPUT

  test $NOPDF && return

  # echo continuing with batchhtmltopdf

  # use --trace-warnings to debug

  start=`date +%s`
  echo 🖨️PRINTING TO PDF
  echo $'-----------------------------------------------------------\n'
  if grep -q input $PUPPETEER_INPUT; then
    node lib/html2pdf.js $PUPPETEER_INPUT
  fi
  end=`date +%s`
  runtime=$((end-start))
  echo \ Completed in $runtime s
  echo " "
}

function rmtmpfiles() {

  test $DEBUG && return
  #echo doing rmtmpfiles

  cd $TOPDIR/distribution/$NATLANG

  for f in adoc aux log rkt tex title; do
    find . -name \*.$f -delete
  done

  for f in txt; do
    find . -name \*.$f | grep -v '\(lesson-order\|workbook-pages\)\.txt' | xargs rm -f
  done

  find . -name $WKH2P_PFX-\* -delete
}

function copylessondir() {
  lessonDir=$1
  # echo doing copylessondir $lessonDir in $(pwd)
  local repoLessonDir=$TOPDIR/lessons/$lessonDir/langs/$NATLANG
  if test ! -d $repoLessonDir -a $NATLANG != en-us; then
    repoLessonDir=$TOPDIR/lessons/$lessonDir/langs/en-us
  fi

  # echo repoLessonDir is $repoLessonDir
  if test -d "$repoLessonDir"; then
    if test $FORCE; then
      rm -fr $lessonDir
    fi
    mkdir -p $lessonDir
    #echo $repoLessonDir is a diry
    DOCOPYDIR=1
    #echo calling checkmd5nochange $lessonDir $repoLessonDir
    if checkmd5nochange $lessonDir $repoLessonDir; then
      #echo $lessonDir doesnt need copying
      DOCOPYDIR=
    fi
    #echo checkmd5nochange done
    if test $DOCOPYDIR; then
      #echo do copydir into $(pwd)
      overwrite preparing $lessonDir
      cp -pr $repoLessonDir/* $lessonDir
      cd $lessonDir
      #echo I currently in $(pwd)
      # we'll set it again when we do the adoc'ing
      mkdir -p .cached
      #echo III deleting checksum.md5txt
      #rm -f .cached/.checksum.md5txt
      touch .cached/.redo
      for subdir in *; do
        if test "$subdir" = pages -o "$subdir" = solution-pages; then
          test -d $subdir/.cached || mkdir $subdir/.cached
        fi
      done
      cd ..
      #checklessonplan $lessonDir
      #echo checklessonplan done
      if test -f $lessonDir/proglang.txt; then
        for pl in $(cat $lessonDir/proglang.txt); do
          if test "$pl" != pyret; then
            mkdir -p $lessonDir-$pl
            # echo copying $lessonDir to $lessonDir-$pl
            cp -pr $lessonDir/* $lessonDir-$pl
            cd $lessonDir-$pl
            mkdir -p .cached
            touch .cached/.$pl
            touch .cached/.redo
            for subdir in *; do
              if test -d "$subdir"; then
                adjustproglangsubdirs "$subdir" "$pl"
              fi
            done
            #checklessonplan $lessonDir-$pl
            cd ..
          fi
        done
      fi
      cd $lessonDir
      for subdir in *; do
        if test -d "$subdir"; then
          adjustproglangsubdirs "$subdir" pyret
        fi
      done
      cd ..
    fi

    if test "$PROGLANG" = pyret; then
      echo $lessonDir >> $RELEVANT_LESSONS_INPUT
      cd $lessonDir
      checklessonplan $lessonDir
      cd ..
    fi

    if test -f $repoLessonDir/proglang.txt; then
      for pl in $(cat $repoLessonDir/proglang.txt); do
        local lessonDirPl=$lessonDir-$pl
        if test -d $lessonDirPl; then
          if test "$PROGLANG" = "$pl"; then
            echo $lessonDirPl >> $RELEVANT_LESSONS_INPUT
            cd $lessonDirPl
            checklessonplan $lessonDirPl
            cd ..
          fi
        fi
      done
    fi
  fi
  #echo done copylessondir
}

function collectworkbookpages() {
  d="$1"
  test ! -d "$d" && return
  # echo doing collectworkbookpages in $(pwd)
  # echo doing collectworkbookpages $d
  cd "$d"
  if test -d pages; then
    cd pages
    if test -f workbook-pages.txt; then
      # echo workbook-pages.txt found
      test -d .cached || mkdir .cached
      # cd .cached
      rm -f .cached/.workbook-pages.txt.kp .cached/.workbook-pages-ls.txt.kp
      #ensure workbook-pages.txt ends in newline, or while isn't happy
      $SED -i -e '$a\' workbook-pages.txt

      touch .cached/.workbook-pages-ls.txt.kp

      while read -r f; do
        # echo finding aspect of "$f"
        aspect=portrait
        g=$f
        if echo "$f"|grep -q '^ *;'; then
          :
        elif echo "$f"|grep -q landscape; then
          echo $f >> .cached/.workbook-pages.txt.kp
          g=$(echo $f|$SED -e 's/^ *\([^ ]\+\).*/\1/')
          echo $g >> .cached/.workbook-pages-ls.txt.kp
          aspect=landscape
        elif echo "$f"|grep -q portrait; then
          echo $f >> .cached/.workbook-pages.txt.kp
          g=$(echo $f|$SED -e 's/^ *\([^ ]\+\).*/\1/')
          echo $g >> .cached/.workbook-pages-ls.txt.kp
        elif test "${f%.adoc}" = "$f"; then
          echo $f >> .cached/.workbook-pages.txt.kp
          echo $f >> .cached/.workbook-pages-ls.txt.kp
        else
          if test -f "$f" && head -n 5 "$f"|grep -q '^ *\[\.landscape\] *$'; then
            echo $f landscape >> .cached/.workbook-pages.txt.kp
            echo $f >> .cached/.workbook-pages-ls.txt.kp
            aspect=landscape
          elif test -f "$g" && head -n 60 "$g"|grep -q 'body.*landscape'; then
            echo $f landscape >> .cached/.workbook-pages.txt.kp
            echo $f >> .cached/.workbook-pages-ls.txt.kp
            aspect=landscape
          else
            echo $f >> .cached/.workbook-pages.txt.kp
            echo $f >> .cached/.workbook-pages-ls.txt.kp
          fi
        fi
      done < workbook-pages.txt

    fi
    cd ..
  fi
  cd ..
}

function buildpathwayworkbooks() {
  #echo building pathway workbooks for $TGTPATHWAY $SRCPATHWAY

  cd $TOPDIR/distribution/$NATLANG/courses/$TGTPATHWAY

  #echo topdir is $TOPDIR

  #mkdir -p $TOPDIR/distribution/$NATLANG/courses/$TGTPATHWAY/resources/pages
  #mkdir -p $TOPDIR/distribution/$NATLANG/courses/$TGTPATHWAY/resources/solution-pages

  node $TOPDIR/distribution/$NATLANG/lib/makeWorkbook.js
}

function copycommonlessons() {
  # echo doing copycommonlessons
  start=`date +%s`
  echo 📁 PREPARING LESSONS
  echo $'-----------------------------------------------------------\n'

  cd $TOPDIR

  export DESTLANGDIR=distribution/$NATLANG

  mkdir -p $DESTLANGDIR/lessons

  cd $DESTLANGDIR/lessons

  #echo currently in $(pwd)

  # TODO(Dorai): check if these calls can be parallelized
  if test $NOARGSGIVEN; then
    for lessonDir in $TOPDIR/lessons/*; do
      lessonDir=${lessonDir#*lessons/}
      copylessondir $lessonDir
    done
  else
    for pwy in $ARGS; do
      local lessonOrderFile=$TOPDIR/pathways/$pwy/langs/$NATLANG/lesson-order.txt
      if test ! -f $lessonOrderFile -a $NATLANG != en-us; then
        lessonOrderFile=$TOPDIR/pathways/$pwy/langs/en-us/lesson-order.txt
      fi
      for lessonDir in $(cat $lessonOrderFile|grep -v '^ *$'|grep -v '^ *;'); do
        copylessondir $lessonDir
      done
    done
  fi

  cd $TOPDIR

  end=`date +%s`
  runtime=$((end-start))
  echo \ Completed in $runtime s
  echo " "
}

function buildworkbookjsons() {
  #echo DOING buildworkbookjsons $TGTPATHWAY
  cd $TOPDIR/distribution/$NATLANG/courses/$TGTPATHWAY

  if test $BOOK; then
    #for wbf in workbook pd-workbook bm-contracts bm-contracts-sols workbook-sols workbook-long \
    #  pd-workbook-long workbook-long-sols opt-exercises opt-exercises-sols ; do
    for wbf in workbook bm-contracts bm-contracts-sols workbook-sols workbook-long \
      workbook-long-sols opt-exercises opt-exercises-sols ; do
          if test $NOPARALLEL; then
            makeworkbookjson $wbf $TGTPATHWAY
          else
            makeworkbookjson $wbf $TGTPATHWAY &
          fi
        done
        test ! $NOPARALLEL && wait
  fi

}

function updatepathwaylist() {
  # echo doing updatepathwaylist
  local proglang=$1
  test "$proglang" = pyret && return
  test -f lesson-order.txt || return
  rm -f lesson-order.txt.nu
  touch lesson-order.txt.nu
  local lessonDir=
  for lessonDir in $(cat lesson-order.txt|grep -v '^ *$'|grep -v '^ *;'); do
    if test -d ../../lessons/$lessonDir-$proglang; then
      echo $lessonDir-$proglang >> lesson-order.txt.nu
    else
      echo $lessonDir >> lesson-order.txt.nu
    fi
  done
  cp -p lesson-order.txt.nu lesson-order.txt
}

function buildpathway() {
  start=`date +%s`
  # echo doing buildpathway $TGTPATHWAY using $PROGLANG
  cd $TOPDIR

  PATHWAY=$TGTPATHWAY

  export LESSONSUBDIR=.
  export SOLUTION=
  export BROKEN_WORKBOOK_PAGES=

  langicon=💀

  if test "$PROGLANG" = wescheme; then
    langicon=🥾
  fi

  echo

  local pwydir=pathways/$SRCPATHWAY/langs/$NATLANG
  if test ! -d $pwydir -a $NATLANG != en-us; then
    pwydir=pathways/$SRCPATHWAY/langs/en-us
  fi

  if test ! -d $pwydir; then
    echo
    echo WARNING: No pathway $PATHWAY/$NATLANG
  else
    echo $langicon BUILDING PATHWAY: $NATLANG/$PATHWAY
    echo $'-----------------------------------------------------------\n'

    export DESTPATHWAYDIR=distribution/$NATLANG/courses/$PATHWAY

    if test $FORCE; then
      rm -fr $DESTPATHWAYDIR
    fi

    mkdir -p $DESTPATHWAYDIR

    repoDir="$TOPDIR/$pwydir"
    distDir="$TOPDIR/$DESTPATHWAYDIR"

    if ! checkmd5nochange $DESTPATHWAYDIR $repoDir; then
      # echo copying pathway I $repoDir
      cp -pr $pwydir/* $DESTPATHWAYDIR
      cd $DESTPATHWAYDIR
      test -d .cached || mkdir -p .cached
      touch .cached/.redopdf
      if test "$PROGLANG" != pyret; then
        updatepathwaylist $PROGLANG
      fi
      cd $TOPDIR
    fi

    # echo copy pathway $SRCPATHWAY done

    REFRESHFRONTMATTER=1
    REFRESHBACKMATTER=1
    REFRESHRESOURCES=1

    test -d $repoDir/front-matter || REFRESHFRONTMATTER=
    test -d $repoDir/back-matter || REFRESHBACKMATTER=
    test -d $repoDir/resources || REFRESHRESOURCES=

      #TODO parallelize
      if test -d $distDir/front-matter -a -d $repoDir/front-matter; then
        if checkmd5nochange $distDir/front-matter $repoDir/front-matter; then
          REFRESHFRONTMATTER=
        fi
      fi

      if test -d $distDir/back-matter -a -d $repoDir/back-matter; then
        if checkmd5nochange $distDir/back-matter $repoDir/back-matter; then
          REFRESHBACKMATTER=
        fi
      fi

      if test -d $distDir/resources -a -d $repoDir/resources; then
        if checkmd5nochange $distDir/resources $repoDir/resources; then
          REFRESHRESOURCES=
        fi
      fi

    rm -f $PROGDIR/pathway-local.rkt
    if test -f $repoDir/pathway-local.rkt; then
      cp -p $repoDir/pathway-local.rkt $PROGDIR
    fi

    cd $DESTPATHWAYDIR
    mkdir -p .cached

    export PATHWAYROOTDIR=./
    export DISTROOTDIR=../../

    #export WORKBOOKINPUT=$TOPDIR/$DESTPATHWAYDIR/.cached/.filelist

    #mkdir -p lessons workbook
    mkdir -p  workbook

    if test ! -f lesson-order.txt; then
      echo
      echo WARNING: No lesson-order.txt in pathway $PATHWAY/$NATLANG
    else
      export PATHWAYLESSONS=\"$(cat lesson-order.txt|$SED -e ':a' -e 'N' -e '$!ba' -e 's/\n/\",\"/g')\"
      grep -v '^ *;' lesson-order.txt |
        grep -v '^ *$' |
        $SED -e 's/^ *\(.*\)/..\/..\/lessons\/\1/' > .cached/.workbook-lessons.txt.kp
    fi

    if test $REFRESHFRONTMATTER; then
      cd front-matter
      mkdirsolutionversion
      cd ..
      adjustproglangsubdirs front-matter $PROGLANG
    fi

    if test $REFRESHBACKMATTER; then
      cd back-matter
      mkdirsolutionversion
      cd ..
      adjustproglangsubdirs back-matter $PROGLANG
    fi

    mkdir -p resources/protected
    cp -p $PROGDIR/.hta* resources/protected

    if test $REFRESHRESOURCES; then
      cd resources
      test -d pages || mkdir -p pages
      mkdirsolutionversion
      for d in *; do
        if test -d $d; then
          cd $d
          mkdirsolutionversion
          cd ..
          #adjustproglangsubdirs $d
        fi
      done
      cd ..
      adjustproglangsubdirs resources $PROGLANG
    fi

    for d in front-matter back-matter; do
      collectworkbookpages "$d"
    done

    #echo calling collect-workbook-pages.rkt in $(pwd)

    $PROGDIR/collect-workbook-pages.rkt

    export WORKBOOKPAGE=1
    export BOILERPLATE=1

    if test $BOOK; then
      if test -f .cached/.redopdf; then
        REFRESHFRONTMATTER=1
        REFRESHBACKMATTER=1
        REFRESHRESOURCES=1
        rm -f .cached/.redopdf
      fi
    fi

    if test $REFRESHFRONTMATTER; then
      if test -d front-matter; then
        #echo calling recursiveadoc from REFRESHFRONTMATTER
        recursiveadoc front-matter "$PATHWAYROOTDIR" "$DISTROOTDIR" "$LESSONSUBDIR"
        touch front-matter #why?
      fi
    fi

    if test $REFRESHBACKMATTER; then
      if test -d back-matter; then
        #echo calling recursiveadoc from refreshbackmatter
        recursiveadoc back-matter "$PATHWAYROOTDIR" "$DISTROOTDIR" "$LESSONSUBDIR"
        touch back-matter
      fi
    fi

    export WORKBOOKPAGE=

    cd resources

    export PATHWAYROOTDIR=../
    export DISTROOTDIR=../../../
    export LESSONSUBDIR=resources

    if test $REFRESHRESOURCES; then
      export RESOURCEDOCS=1
      for d in *; do
        if test -d "$d"; then
          if test "$d" = datasheets; then
            export DATASHEETPAGE=1
          else
            export DATASHEETPAGE=
          fi
          #echo calling recursiveadoc from refreshresources
          recursiveadoc "$d" "$PATHWAYROOTDIR" "$DISTROOTDIR" "$LESSONSUBDIR"
        fi
      done
      export RESOURCEDOCS=
    fi

    cd ..

    if test $REFRESHRESOURCES; then touch resources; fi

    export BOILERPLATE=
    export PATHWAYROOTDIR=./
    export DISTROOTDIR=../../
    export LESSONSUBDIR=

    #DEBUG
    buildpathwaynarrative

    cd $TOPDIR; cd $DESTPATHWAYDIR

    #echo PWD is $(pwd)

    if test ! $NOPDF; then
      if test ! -f .cached/.workbook-page-index.rkt; then
        echo
        echo WARNING: No workbook index file in pathway $PATHWAY/$NATLANG
      else
        #cd ../courses/$PATHWAY

        cd $TOPDIR/distribution/$NATLANG
        #batchhtmltopdf

        cd courses/$PATHWAY

        #TODO:  ↓ not needed?
        export PATHWAYROOTDIR=./

        fi
      fi
    fi

    buildteacherresource

    #rmtmpfiles

    #echo PWD 3 is $(pwd)

  cd $TOPDIR/distribution/$NATLANG

  # if test $LINT; then

  #   if test $BROKEN_WORKBOOK_PAGES; then
  #     echo 👎 Broken workbook pages in $PATHWAY
  #   else
  #     echo 👍 No broken workbook pages in $PATHWAY
  #   fi

  test $EXPANDEDWARNINGS || echo $'\033[?7h'
  end=`date +%s`
  runtime=$((end-start))
  echo \ Completed in $runtime s
  echo " "
}

function buildpathwaytocs() {
  cd $TOPDIR/distribution/$NATLANG/courses
  export DISTROOTDIR=../
  TOCSFILE=$TOPDIR/distribution/$NATLANG/pathway-tocs.js
  echo "var pathwayTocs = {" > $TOCSFILE
  first=1
  for C in *; do
    if test $first; then
      first=
    else
      echo "," >> $TOCSFILE
    fi
    echo -n "   \"$C\": [" >> $TOCSFILE
    thisPathwayLessons=
    if test -f $C/.cached/.workbook-lessons.txt.kp; then
      thisPathwayLessons=$(cat $C/.cached/.workbook-lessons.txt.kp|$SED -e 's/.*\/lessons\///'|$SED -e ':a' -e 'N' -e '$!ba' -e 's/\n/\", \"/g'|$SED -e 's/.*/\"\0\"/')
    fi
    echo -n $thisPathwayLessons >> $TOCSFILE
    echo "]" >> $TOCSFILE
  done
  echo "}" >> $TOCSFILE
}

function allthealignments() {
  cd $TOPDIR
  cd distribution/$NATLANG
  export LANGROOTDIR=./
  #echo doing allthealignments in $(pwd)
  test -d .cached || mkdir -p .cached
  rm -f .cached/.all-standards.txt
  for d in courses/*; do
    test -d $d || continue
    db=${d%/}
    db=${db##*/}

    f=$d/.cached/.standards-in-pathway.txt.kp
    if test -f $f; then
      $SED -e "s/)\$/ \"$db\")/" $f >> .cached/.all-standards.txt
    fi

    f=$d/.cached/.textbooks-in-pathway.txt.kp
    if test -f $f; then
      $SED -e "s/)\$/ \"$db\")/" $f >> .cached/.all-textbooks.txt
    fi

    f=$d/.cached/.practices-in-pathway.txt.kp
    if test -f $f; then
      $SED -e "s/)\$/ \"$db\")/" $f >> .cached/.all-practices.txt
    fi
  done

  $PROGDIR/make-alignments.rkt

  echo .cached/.Alignments.asc >> $ADOC_INPUT
  echo .cached/.Alignments.html >> $ADOC_POSTPROC_NARRATIVEAUX_INPUT

  if test ! $DEBUG; then rm -f *.asc *.txt; fi

  cd $TOPDIR
}

function calculatedistrootdir() {
  local f=$1
  #echo doing calculatedistrootdir $f
  local doubledots=$(echo $f|$SED -e 's/\/\.\//\//g')
  #echo I doubledots= $doubledots
  doubledots=$(echo $doubledots|$SED -e 's/[^\/]//g')
  #echo II doubledots= $doubledots
  doubledots=$(echo $doubledots|$SED -e 's/^\///')
  #echo III doubledots= $doubledots
  doubledots=$(echo $doubledots|$SED -e  's/\//..\//g')
  #echo calculatedistrootdir for $f is $DISTROOTDIR
  echo $doubledots
}

function postproc_workbookpage() {
  local fhtmlcached=$1
  # echo doing postproc_workbookpage $fhtmlcached
  export WORKBOOKPAGE=1
  if test -f "$fhtmlcached"; then
    local localDISTROOTDIR=$(calculatedistrootdir $fhtmlcached)
    local fdir=${fhtmlcached%/.cached/.*html}
    #echo  fdir= $fdir
    local fbase=${fhtmlcached##*/.}
    #echo fbase= $fbase
    local fhtml=$fdir/$fbase
    #echo fhtml= $fhtml
    #echo moving $fhtmlcached to $fhtml
    cp -p $fhtmlcached $fhtml
    bumpcsspathdir $fhtml $localDISTROOTDIR
    resolveabbrevs $fhtml $localDISTROOTDIR
    addproglang $fhtml
    insertgdrivesave $fhtml
  fi
  export WORKBOOKPAGE=
}

function postproc_lessonplan() {
  local fhtmlcached=$1
  if test -f "$fhtmlcached"; then
    local localDISTROOTDIR=$(calculatedistrootdir $fhtmlcached)
    local fdir=${fhtmlcached%/.cached/.*html}
    #echo  fdir= $fdir
    local fbase=${fhtmlcached##*/.}
    fbase=${fbase%.html}.shtml
    #echo fbase= $fbase
    local fshtml=$fdir/$fbase
    #echo fhtml= $fhtml
    #echo moving $fhtmlcached to $fshtml
    mv $fhtmlcached $fshtml
    #echo doing insertbodyid
    insertbodyid $fshtml
    #echo doing addanalytics
    addanalytics $fshtml
    #echo doing resolveabbrevs
    bumpcsspathdir $fshtml $localDISTROOTDIR
    resolveabbrevs $fshtml $localDISTROOTDIR
    #echo cleanuptitle
    cleanuptitle $fshtml
    #echo cleanupduration
    cleanupduration $fshtml
    #echo insertsectionselfie
    insertsectionselfie $fshtml
    #echo lintlesson
    lintlesson $fshtml
    #echo insertgdrivesave
    insertgdrivesave $fshtml
  fi
}

function postproc_narrative() {
  local fhtmlcached=$1
  if test -f "$fhtmlcached"; then
    local localDISTROOTDIR=$(calculatedistrootdir $fhtmlcached)
    local fdir=${fhtmlcached%/.cached/.*html}
    local fbase=${fhtmlcached##*/.}
    fbase=${fbase%.html}.shtml
    local fshtml=$fdir/$fbase
    mv $fhtmlcached $fshtml
    insertbodyid $fshtml
    addanalytics $fshtml
    bumpcsspathdir $fshtml $localDISTROOTDIR
    resolveabbrevs $fshtml $localDISTROOTDIR
    insertgdrivesave $fshtml
  fi
}

function postproc_narrativeaux() {
  # echo doing postproc_narrativeaux $1
  local fhtmlcached=$1
  if test -f "$fhtmlcached"; then
    local localDISTROOTDIR=$(calculatedistrootdir $fhtmlcached)
    local fdir=${fhtmlcached%.cached/.*html}
    local fbase=${fhtmlcached##*/.}
    fbase=${fbase%.html}.shtml
    local fshtml=$fdir$fbase
    mv $fhtmlcached $fshtml
    insertbodyid $fshtml
    bumpcsspathdir $fshtml $localDISTROOTDIR
    resolveabbrevs $fshtml $localDISTROOTDIR
  fi
}

function postproc_resources() {
  local fhtmlcached=$1
  if test -f "$fhtmlcached"; then
    local localDISTROOTDIR=$(calculatedistrootdir $fhtmlcached)
    local fdir=${fhtmlcached%/.cached/.*html}
    local fbase=${fhtmlcached##*/.}
    fbase=${fbase%.html}.shtml
    local fshtml=$fdir/$fbase
    mv $fhtmlcached $fshtml
    insertbodyid $fshtml
    bumpcsspathdir $fshtml $localDISTROOTDIR
    resolveabbrevs $fshtml $localDISTROOTDIR
    cleanuptitle $fshtml
    insertgdrivesave $fshtml
  fi
}

function postproc_allpwylessons() {
  local fhtml=$1
  if test -f "$fhtml"; then
    local localDISTROOTDIR=../../
    local fshtml=${fhtml%.html}.shtml
    mv $fhtml $fshtml
    removelogos $fshtml
    bumpcsspathdir $fshtml $localDISTROOTDIR
    resolveabbrevs $fshtml $localDISTROOTDIR
  fi
}

function run_postproc() {

  local postproc_func=$1
  local bigfile=$2
  # local start=`date +%s`
  # echo 👨‍💻POST-PROCESSING HTML $postproc_func $bigfile
  # echo '-----------------------------------------------------------'
  rm -f $bigfile-split*
  split -l $MAXBASHTHREADS $bigfile $bigfile-split
  for smallfile in $bigfile-split*; do
    if test -f "$smallfile"; then
      for fhtml in $(cat $smallfile); do
        $postproc_func $fhtml &
      done
      wait
    fi
  done

  # local end=`date +%s`
  # local runtime=$((end-start))
  # echo \ Completed in $runtime s
  # echo " "

}

function doadocpostproc() {
  #echo doing doadocpostproc
  cd $TOPDIR/distribution/$NATLANG

  start=`date +%s`
  echo 👨‍💻CALLING ASCIIDOCTOR IN BATCH MODE
  echo '-----------------------------------------------------------'
  if test -s $ADOC_INPUT; then
    if test ! $ASCIIDOCNODE; then
      # echo calling asciidoctor on $ADOC_INPUT
      asciidoctor -a linkcss -a stylesheet=lib/curriculum.css -a cachedir=.cached/ -B . $(cat $ADOC_INPUT)
    else
      echo Trying node asciidoctor!
      $SED -i -e 's/.*/"\0", /' $ADOC_INPUT
      $SED -i -e '1s/^/let adocFiles = [/' $ADOC_INPUT
      echo "]; " >> $ADOC_INPUT
      echo "module.exports = adocFiles;" >> $ADOC_INPUT
      node lib/callAdoc.js $ADOC_INPUT
    fi
  else
    echo No adoc files need conversion!
  fi
  end=`date +%s`
  runtime=$((end-start))
  echo \ Completed in $runtime s
  echo " "

  start=`date +%s`
  echo 👨‍💻POST-PROCESSING HTML
  echo '-----------------------------------------------------------'

  run_postproc postproc_workbookpage $ADOC_POSTPROC_WORKBOOKPAGE_INPUT
  run_postproc postproc_lessonplan $ADOC_POSTPROC_LESSONPLAN_INPUT
  run_postproc postproc_narrative $ADOC_POSTPROC_NARRATIVE_INPUT
  run_postproc postproc_narrativeaux $ADOC_POSTPROC_NARRATIVEAUX_INPUT
  run_postproc postproc_resources $ADOC_POSTPROC_RESOURCES_INPUT
  run_postproc postproc_allpwylessons $ADOC_POSTPROC_ALLPWYLESSONS_INPUT

  end=`date +%s`
  runtime=$((end-start))
  echo \ Completed in $runtime s
  echo " "
}

function createabyss() {
  # echo doing createabyss
  cd $TOPDIR/distribution/$NATLANG
  if test ! $NOPDF; then
    if test ! -f lib/$ABYSS.pdf; then
      echo = PAGE NOT FOUND! > lib/$ABYSS.adoc
      echo >> lib/$ABYSS.adoc
      echo lib/$ABYSS.adoc >> $ADOC_INPUT
      echo ", { \"input\": \"lib/$ABYSS.html\" }" >> $PUPPETEER_INPUT
    fi
  fi
}

function doconversions() {
  #echo doing doconversions
  start=`date +%s`
  cd $TOPDIR/distribution/$NATLANG

  echo 👨‍💻CALLING RACKET IN BATCH MODE
  echo '-----------------------------------------------------------'
  $PROGDIR/adocables-preproc.rkt $ADOCABLES_INPUT
  end=`date +%s`
  runtime=$((end-start))
  echo \ Completed in $runtime s
  echo " "

  createabyss
  allthealignments

  doadocpostproc $ADOC_INPUT

}

function dolinkcheck() {
  test $LINT || return

  local timestart=`date +%s`
  echo 👨‍💻CHECKING LINKS
  echo '-----------------------------------------------------------'

  find . -type f -name \.\*external-links.txt.kp | xargs $PROGDIR/checkexternallinks

  find . -type f -name \.\*internal-links.txt.kp | xargs $PROGDIR/checkinternallinks

  local timeend=`date +%s`
  echo \ Completed in $((timeend-timestart)) s
  echo " "

}

function callonARGS() {
  local subroutine=$1

  for f in $ARGS; do
    #echo I doing $f
    export SRCPATHWAY=$f
    export SRCPATHWAY=${SRCPATHWAY#pathways/}
    export SRCPATHWAY=${SRCPATHWAY%/}
    export TGTPATHWAY="$SRCPATHWAY"
    #echo SRCPATHWAY is $SRCPATHWAY
    #echo TGTPATHWAY is $TGTPATHWAY

    if test "$PROGLANG" = pyret; then
      if test "$SRCPATHWAY" = algebra; then
        export TGTPATHWAY=algebra-pyret
      fi
    elif test "$PROGLANG" = wescheme; then
      if test "$SRCPATHWAY" = algebra; then
        export TGTPATHWAY=algebra-wescheme
      else
        return
      fi
    elif test "$PROGLANG" = codap; then
      if test "$SRCPATHWAY" != data-science -a "$SRCPATHWAY" != data-science-codap; then
        return
      fi
    fi

    $subroutine

  done
}

function makebilingualglossary() {
  cd $TOPDIR

  $PROGDIR/make-bilingual-glossary.rkt
  mv bilingual-glossary.adoc distribution/$NATLANG/lib
  asciidoctor -a linkcss -a stylesheet=asciidoctor.css distribution/$NATLANG/lib/bilingual-glossary.adoc
  rm distribution/$NATLANG/lib/bilingual-glossary.adoc

  echo ", { \"input\": \"lib/bilingual-glossary.html\" }" >> $PUPPETEER_INPUT

}

# echo Starting the build...

mkdir -p $TOPDIR/distribution/$LANGUAGE/.cached
export PUPPETEER_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-puppeteer.json
echo "{\"htmlFileSpecs\": [ \"ignoreElement\"" > $PUPPETEER_INPUT

export ADOCABLES_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adocables.rkt
echo '(' > $ADOCABLES_INPUT

# export ADOC_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-asciidoctor.txt.kp
export ADOC_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-asciidoctor.js

rm -f $ADOC_INPUT
touch $ADOC_INPUT

export ADOC_POSTPROC_WORKBOOKPAGE_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adoc-postproc-workbookpage.txt.kp
export ADOC_POSTPROC_LESSONPLAN_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adoc-postproc-lessonplan.txt.kp
export ADOC_POSTPROC_NARRATIVE_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adoc-postproc-narrative.txt.kp
export ADOC_POSTPROC_NARRATIVEAUX_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adoc-postproc-narrativeaux.txt.kp
export ADOC_POSTPROC_RESOURCES_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adoc-postproc-resources.txt.kp
export ADOC_POSTPROC_ALLPWYLESSONS_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-adoc-postproc-allpathways.txt.kp
export RELEVANT_LESSONS_INPUT=$TOPDIR/distribution/$NATLANG/.cached/.do-relevant-lessons.txt.kp

rm -f $ADOC_POSTPROC_WORKBOOKPAGE_INPUT \
  $ADOC_POSTPROC_LESSONPLAN_INPUT $ADOC_POSTPROC_NARRATIVE_INPUT $ADOC_POSTPROC_NARRATIVEAUX_INPUT \
  $ADOC_POSTPROC_RESOURCES_INPUT $ADOC_POSTPROC_ALLPWYLESSONS_INPUT \
  $RELEVANT_LESSONS_INPUT

touch $ADOC_POSTPROC_WORKBOOKPAGE_INPUT \
  $ADOC_POSTPROC_LESSONPLAN_INPUT $ADOC_POSTPROC_NARRATIVE_INPUT $ADOC_POSTPROC_NARRATIVEAUX_INPUT \
  $ADOC_POSTPROC_RESOURCES_INPUT $ADOC_POSTPROC_ALLPWYLESSONS_INPUT \
  $RELEVANT_LESSONS_INPUT

copycommonlessons


mkdir -p distribution/$NATLANG/.cached

buildcommonlessons

buildlessonplans

callonARGS buildpathway

echo ')' >> $ADOCABLES_INPUT

doconversions

collectprimitives

echo BUILDING PAGELIST JSON FOR LESSONS
echo " "

callonARGS buildworkbookjsons

builddependencyjson

buildpathwaytocs

makebilingualglossary

batchhtmltopdf

dolinkcheck

if test ! $NOPDF; then

  cd $TOPDIR/distribution/$NATLANG

  callonARGS buildpathwayworkbooks

fi

rmtmpfiles
