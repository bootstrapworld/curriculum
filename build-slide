#!/bin/bash

export SEMESTER=fall
export YEAR=2025

bootstraproot=https://bootstrapworld.org/materials/$SEMESTER$YEAR
SED=sed

if which gsed|grep -q .; then
  SED=gsed
fi

regenid=
rebuild=
export OLDFORMAT
export PROGLANG
export PD
nomake=
lsn=

if test $# -eq 0; then
  echo build-slide needs a lesson argument
  exit
else
  while test $# -ne 0; do
    if test "$1" = -f; then
      regenid=1; shift
    elif test "$1" = -old; then
      OLDFORMAT=1; shift
    elif test "$1" = -z; then
      echo WARNING: Obsolete option $1; regenid=1; shift
    elif test "$1" = --proglang; then
      shift; PROGLANG="$1"; shift
    elif test "$1" = --nomake; then
      nomake=1; shift
    elif test "$1" = --pd; then
      PD=1; shift
    elif test "$1" = --rebuild; then
      rebuild=y; shift
    else
      lsn="$1"; shift
    fi
  done
fi

lsn=${lsn%/}
lsn=${lsn##*/}

if test "$PROGLANG" = wescheme; then
  lsn=$(echo $lsn|$SED -e 's/-wescheme$//')
  lsn=$lsn-wescheme
elif test "$PROGLANG" = codap; then
  lsn=$(echo $lsn|$SED -e 's/-codap$//')
  lsn=$lsn-codap
fi

if echo $lsn|grep -q "\-wescheme$"; then
  PROGLANG=wescheme
elif echo $lsn|grep -q "\-codap$"; then
  PROGLANG=codap
fi

if test -z "$PROGLANG"; then
  PROGLANG=pyret
fi

export TOPDIR=$(pwd)

templateSlidesId=1vFGtTzhTlc1p8VJECRucj5DO83skm4wMI1BU3QbHE5k
parentFolderId=1AP4vk0XwLSl9cU8HIHjmSTFK7dG3CrGn

# md2googleslides can optionally take a path to a CSS file,
# which is used for highlighting code. We use our standard
# CSS file for this
cssPath=$TOPDIR/distribution/en-us/lib/curriculum.css

if test -z "$nomake"; then
  make
fi

if test ! -d distribution; then
  echo WARNING: Did not find any built pathways
  exit
else
  cd distribution
  if test -s .make.error.log; then
    echo make failed\; build-slide aborted
    exit
  fi
fi

export NATLANG

for NATLANG in *; do
  test -d $NATLANG || continue
  export PROGDIR=$TOPDIR/distribution/.prog-$NATLANG
  if test ! -d $NATLANG/lessons; then
    echo Missing lessons directory in distribution/$NATLANG -- did you call make\?
    continue
  fi
  if test ! -d $NATLANG/lessons/$lsn; then
    echo Lesson $NATLANG/lessons/$lsn not found in distribution
    continue
  fi
  cd $NATLANG/lessons/$lsn
  export BOOTSTRAPPREFIX="$bootstraproot/$NATLANG"
  export LESSON="$lsn"
  # echo Doing $LESSON
  repoLESSON=$(cat .repodir.txt.kp)

  # echo repoLESSON is $repoLESSON

  slidesmd=zlides.md

  if test -z "$PD"; then
    slidesprefix='slides'
  else
    slidesprefix='slides-pd'
  fi

  slidesmkd=$slidesprefix.mkd
  idfile=$slidesprefix-$PROGLANG.id

  if test -n "$OLDFORMAT"; then
    slidesmd=slides.md
  fi

  if test -n "$regenid"; then
    rm -f $idfile
  fi
  if test -f $slidesmd; then
    $SED -i 's/{nbsp}/ /g' $slidesmd
    $TOPDIR/lib/slides-preproc.rkt $slidesmd $slidesmkd
    if test -f $slidesmkd; then
      title=$(grep '^# ' $slidesmkd|$SED -e 1q|$SED -e 's/^#  *//')
      title="AUTO-GEN:$title - $PROGLANG"
      if test -n "$PD"; then
        title="$title (PD)"
      fi

      # warn if used without -f and --rebuild
      if test -z "$regenid"; then
        if test -f "$idfile"; then
          if test -z "$rebuild"; then
            read -p "This will REPLACE A PUBLIC FILE! Are you *sure* you want to rebuild slides for $lsn? (If not, use build-slide -f to make a new file id.) [yn] " goahead
            test "$goahead" != y && break
          fi
        fi
      fi

      if test -s "$idfile"; then
        id=$(cat "$idfile"|$SED -e 1q)
        # echo md2gslides with id $id
        node $TOPDIR/node_modules/md2googleslides/bin/md2gslides.js $slidesmkd -a "$id" -e -n -t "$title" -c $templateSlidesId -p $parentFolderId -s $cssPath  > .tmp.txt
        # node $TOPDIR/node_modules/md2googleslides/bin/md2gslides.js $slidesmkd -a "$id" -e -n -t "$title" > .tmp.txt 2>.tmpe.txt
        if grep -q 'Unable to generate slides' .tmp.txt; then
          echo Slides failed for $LESSON/$slidesmkd
          if grep -q 'must be less than the endIndex' .tmp.txt; then
            echo You likely have a slide with text preceding table
          fi
          cat .tmp.txt
        fi
        # rm .tmp.txt
      else
        # echo md2gslides without id
        $TOPDIR/node_modules/md2googleslides/bin/md2gslides.js $slidesmkd -n -t "$title" -c $templateSlidesId -p $parentFolderId -s $cssPath > .tmp.txt
        if grep -q 'Unable to generate slides' .tmp.txt; then
          echo Slides failed for $LESSON/$slidesmkd
          if grep -q 'must be less than the endIndex' .tmp.txt; then
            echo You likely have a slide with text preceding table
          fi
          cat .tmp.txt
        else
          grep 'View your presentation at' .tmp.txt | $SED -e 's/.*docs\.google\.com\/presentation\/d\///' > "$idfile"
          cp "$idfile" $TOPDIR/$repoLESSON/
          echo Remember to push $repoLESSON/$idfile to Git repo
        fi
      fi
      if test -f "$idfile"; then
        id=$(cat "$idfile"|$SED -e 1q)
        slideurl="https:\/\/docs.google.com\/presentation\/d\/$id"
        echo '<meta http-equiv="refresh" content="0;INSERTSLIDEURL">' > $slidesprefix-$PROGLANG.html
        echo '<a target="_blank" href="INSERTSLIDEURL">Google Slides generated INSERTTIMESTAMP<\/a>' >> $slidesprefix-$PROGLANG.html
        timestamp=$(date +%c)
        $SED -i -e "s/INSERTTIMESTAMP/$timestamp/" $slidesprefix-$PROGLANG.html
        $SED -i -e "s/INSERTSLIDEURL/https:\/\/docs.google.com\/presentation\/d\/$id/" $slidesprefix-$PROGLANG.html
      fi
    else
      echo WARNING: $slidesmd failed preprocessing
    fi
  else
    echo WARNING: Lesson \'$LESSON\' doesn\'t have $slidesmd
  fi
  cd ../../..
done
