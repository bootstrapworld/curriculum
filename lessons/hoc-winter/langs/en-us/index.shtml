<html moznomarginboxes="">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
      <title>Bootstrap :: Hour of Code</title>
      <link   type="text/css"        rel="stylesheet" href="css/hoc.css" title="default"/>
      <link   type="text/css"        rel="stylesheet" href="css/pretty-printing.css" title="default"/>
      <script type="text/javascript" src="js/hoc.js"></script>
      <script type="text/javascript" src="js/codemirror.js"></script>
      <script type="text/javascript" src="js/runmode.js"></script>
      <script type="text/javascript" src="js/scheme2.js"></script>
      <script type="text/javascript" src="js/wescheme-embedded.js"></script>
      <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
      <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
          tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
          "HTML-CSS": { scale: 80, linebreaks: { automatic: true } },
         });
        </script>
      </head>
  <body onload="initializeCards(); attachCodeMirror();">
    <div id="banner">
      <img src="images/icon.png" height="50"><span>An Hour Of Code With Bootstrap</span>
    </div>
    <div id="progressbar"></div>
    <a id="prev" href="#" onclick="javascript:previousCard()">&#171;</a>
    <a id="next" href="#" onclick="javascript:nextCard()">&#187;</a>
    <div id="lesson">
      <ul id="cards">
      	<li imageConfig="images/complete-snowman.png">
      	  <h1>Welcome to the Hour of Code from Bootstrap!</h1>  
          In this exploration, you get to learn how to create images using text-based code, use functions to combine images, and learn different ways to combine images to create whatever you imagine!
          <p/>
          <b>Let's get started!</b>

        </li>

        <li weschemeConfig='"Hello World"'>
          <h1>1. Where Will We Code?</h1>
          <p/>
          <div class="video">
            <i>You can always click this <b><a href="#" onclick="lightbox_open('rdL6S9SmcKo');">video link</a></b> to hear these instructions aloud, along with a video of what to do at each step.</i> 
          </div>

          <p/>
          In Bootstrap, we use a tool called WeScheme to write our programs.  You can
          see the <b>WeScheme editor</b> on the right, or, you can <a href="http://www.WeScheme.org" target="_blank">open WeScheme in a new window.</a>
          <p/>
          The Editor is divided into two sections:
          <ol>
            <li>The <b>Definitions Area</b> on the left and</li>
            <li>the <b>Interactions Area</b> on the right.</li>
          </ol>
          <p/>
          You can resize these areas the way you want by clicking and dragging the vertical grey line in the center.
          <p/>
          <div class="activity">Drag the gray, vertical divider to resize the Definitions Area.</div>
          <p/>
          The <b>'Run' button</b> in the upper-left clears the Interactions Area and runs any code in the Definitions area.
          <p/>
          <div class="activity">Locate the 'Run' button and press it.</div>
          <p/>
          Running the provided code tells the computer to display <tt class="racket">"Hello World"</tt> in the Interactions Area.
          <p/>
          You can also type directly into the Interactions Area and pressing <b>Enter</b>.
          <p/>
          <div class="activity">
            <ol>
              <li>Try typing a word or phrase into the Interactions window and press <b>Enter</b>.</li>
              <li>Try typing the number 5 into the Interactions window and press <b>Enter</b>.</li>
            </ol>
           </div>
          <p/>
          Notice that when typing a word or phrase, we use quotation marks (<tt class="racket">" "</tt>), but not when typing numbers!
        </li>

        <li weschemeConfig='(+ 4 2)'>
          <h1>2. Using Functions</h1> 
          <div class="video">
            <b><a href="#" onclick="lightbox_open('k8PcaGGnl_E');">Watch Video</a></b>
          </div>

          Learning to code means we're <b>learning a language</b> that the computer understands.  We can use this computer language to ask the computer to complete certain tasks.
          <p/>
          <div class="activity">Look at the provided code and make a prediction.  Press Run to see what this code does!</div>
          <p/>
	         We wrote a simple program that asked the computer to <I>add 4 and 2</I>, and it did. WeScheme can handle adding any numbers you can think of. It also knows subtraction (<tt class="racket">-</tt>), multiplication (<tt class="racket">*</tt>), and division (<tt class="racket">/</tt>).
          <p/>
	         You may have noticed that the plus sign (<tt class="racket">+</tt>) went <b>ahead</b> of the numbers.  In this language, the function always goes in the front!  You'll see this again later with some image functions.  
    	   <p/>
    	   <div class="activity">Take a few minutes to get comfortable with using functions in WeScheme.  <b>Use the Interactions Area</b> (on the right) and press Enter after each line of code to see the result!
    	    <ol>
        		<li>Type the code for $10 - 3$ and press Enter.</li>
        		<li>Type the code for $5 * 103$ and press Enter.</li>
        		<li>Type the code for $3 \div 4$ and press Enter. <br/>Notice that you can click on the result!</li>
           </ol>
         </div>
        </li>

        <li weschemeConfig='(star 50 "solid" "blue")'>
          <h1>3. Making Images From Code</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('GBraS6eGwVE');">Watch Video</a></b>
          </div>

           In the editor, you can see a simple program in the Definitions Area:
          <br/><tt class="racket">(star 50 "solid" "blue")</tt>
          <br/>What do you think it will do?
          <div class="activity">
            Make a prediction of what this code will do, then click the <b>Run Button</b>.
            <ol>
              <li>Where did the result appear?</li>
              <li>Try changing the number and clicking Run. What happens?</li>
              <li>Try changing <tt class="racket">"solid"</tt> to <tt class="racket">"outline"</tt>. What happens?</li>
              <li>Copy and paste this program into the <i>Interactions</i> Area, on the right, then hitting the "Enter" key. What happens?</li>
              <li>Try making other stars in the Interactions Area, and then click Run. What happens?</li>
            </ol>
            <p/>
            <b>Can you guess what these parts of the program represent?</b>
          </div>
        </li>

        <li weschemeConfig='(star 50 "solid" "blue")'>
          <h1>4. Reading Code</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('x--6N-7JaSk');">Watch Video</a></b>
          </div>
          
          The program <tt class="racket">(star 50 "solid" "blue")</tt> is an example of a <b>function application</b>.
          Every function has a <b>contract</b>: which tells us the name of the function, how many and what kind of inputs it requires, and what it function will produce.
      	  <p/>
      	  The contract for this function is<br/>
          <tt class="racket">star : Number String String -> Image</tt>!
      	  <p/>
      	  Inputs can be many different things, but we'll just focus on three right now:
      	  <ol>
      	    <li><b>Numbers</b>, such as 3, 10.82, -105, 0, and so on</li>
      	    <li><b>Strings</b> are things in quotations like <tt class="racket">"solid", "purple", "Walrus"</tt>, and so on</li>
            <li><b>Images</b>, such as <img src="images/solidbluestar.png"></li>
      	  </ol>
      	  <p/>
          <ol>
            <li>The <b>function</b> <tt class="racket">star</tt> requires three inputs.</li>
            <li>The <b>Number</b> <tt class="racket">50</tt> represents the <i>radius</i> of the star.</li>
            <li>The <b>String</b> <tt class="racket">"solid"</tt> represents the <i>style</i> of the star.</li>
            <li>The <b>String</b> <tt class="racket">"blue"</tt> represents the <i>color</i> of the star.</li>
          </ol>
          The parentheses tell the computer that we want to <b>apply</b> the function to these inputs.<br/>
      	  <p/>
      	  <div class="activity">Try leaving out one of these inputs and press Run.  What happens?</div>
        </li>

      	<li weschemeConfig='(star 50 "solid" 24)'>
          <h1>5. Debugging</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('8R-aQYqVXFk');">Watch Video</a></b>
          </div>
          
          You've seen that <tt class="racket">star</tt> is a function that takes three inputs: a Number for the radius of the star, a String for the style, and a String for the color. <b>What if a programmer forgets one of these, or uses the wrong data type?</b>
         <p/>
          When something like this happens, computers use <b>Error Messages</b> to give helpful
          hints about what is wrong.
          <p/>
          <div class="activity">
            Can you see the problem in the Definitions Area, on the right?
            <ol>
              <li>Click Run to see what kind of message the computer will give you.</li>
              <li>Read the error message carefully.</li>
              <li>Click on the colored parts of the error, and see the corresponding code blink!</li>
              <li>Can you fix the problem?</li>
              </ol>
          </div>
        </li>

	      <li weschemeConfig='(star 50 "solid" "blue")'>
          <h1>6. Exploring Images</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('Ub3qL1T6G0A');">Watch Video</a></b>
          </div>
          
          There are lots of other functions that will produce an image...but how do you use them?
          <p/>
	         There are other shape functions that have the same <b>contract</b> as <tt class="racket">star</tt>, taking a Number and two Strings and producing an Image.
          <p/>
          <div class="activity">
            <tt class="racket">circle</tt> is one of these functions.  Try to make a solid blue circle!
	         </div>
            <p/>
	         All the shapes below take a Number and two Strings and produce an Image.  Take some time to try them out! 
	         <p/>
	         <div class="activity">
            Try out these functions:
            <ol>
		          <li><tt class="racket">circle</tt> - can you make a solid, green circle with a radius of 35?</li>
              <li><tt class="racket">triangle</tt> - can you make an outlined, red triangle any size you want?</li>
              <li><tt class="racket">square</tt> - can you make a purple square with each side of length 104?</li>
            </ol>
          </div>
        </li>

    	<li weschemeConfig='(rectangle 100 200 "solid" "green")'>
    	  <h1>7. More Images!</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('lsHgtkKitDk');">Watch Video</a></b>
          </div>
              
    	  As you may have already discovered, there are some shape-producing functions that require different inputs in order to work. We've included one of those functions here: <tt class="racket">rectangle</tt>.
    	  <p/>
          <div class="activity">What do you notice is different about the code for a rectangle?</div>
    	  <p/>
          The <tt class="racket">rectangle</tt> function has a different <b>contract</b> than <tt class="racket">star</tt>.  
          <p/>
          With the <tt class="racket">star</tt> function, we only had to give it one number, for the radius.  But rectangles have two dimensions: length and width!
          <p/>
          Our <b>contract</b> for <tt class="racket">rectangle</tt> is:<br/>
          <tt class="racket">rectangle: Number Number String String -> Image</tt>
      	  <p/>
          <b>Here are some other functions can experiment with:</b>
          <ul>
            <li><tt class="racket">right-triangle</tt> requires a <b>Number</b> for the base, a <b>Number</b> for the height, and two <b>String</b>s for style and color</li>
            <li><tt class="racket">isosceles-triangle</tt> requires a <b>Number</b> for the length of the equal sides, a <b>Number</b> for the angle between those sides, and two <b>String</b>s for style and color</li>
            <li><tt class="racket">text</tt> requires a <b>String</b> for the message, a <b>Number</b> for the size, and a <b>String</b> for the color</li>
            <li><tt class="racket">radial-star</tt> requires <b>five</b> inputs:
              <ol>
                <li>a <b>Number</b> for the number of points</li>
        	<li>a <b>Number</b> for the outer radius</li>
                <li>a <b>Number</b> for the inner radius</li>
                <li>a <b>String</b> for the style</li>
                <li>a <b>String</b> for the color</li>
              </ol>
            </li>
      	  </ul>
      	  <p/>
      	  <div class="activity">
            Take a few minutes to try these out!
            <ol>
              <li><tt class="racket">right-triangle</tt> - can you make a pink right triangle?</li>
              <li><tt class="racket">isosceles-triangle</tt> - can you make a black isosceles triangle?</li>
              <li><tt class="racket">text</tt> - can you write your name in huge orange letters?</li>
              <li><tt class="racket">radial-star</tt> - can you create a radial star?</li>
            </ol>
          </div>
        </li>

        <li weschemeConfig='(define CodingIs (text "Awesome" 50 "red"))'>
       	  <h1>8. Defining Values</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('voRTXnddw2I');">Watch Video</a></b>
          </div>
                    
          You've already learned a lot of ways to create images in WeScheme.  Now we're going to learn a way to define them as a value so that we can make them appear without retyping all the code!  It's like giving names to parts of our code to make them easier to use.<br/>
	  In the provided code, we've <b>defined</b> <tt class="racket">CodingIs</tt> to be <tt class="racket">(text "Awesome" 50 "red")</tt>.
      	  <p/> 
      	  <div class="activity">Click the Run button and then type in <tt class="racket">CodingIs</tt> into the Interactions window, on the right.
          </div>
      	  <p/>
          Did you see the image appear?  If not, make sure you typed it exactly as shown, including capitals!<br/>
      	  <p/>
          <div class="activity">Use the new <tt class="racket">define</tt> keyword to name a few Images, Numbers, or Strings.
          <br/>Be careful with your parenthesis!
      	    <ol>
              <li>Type the code <tt class="racket">(define RedCircle (circle 40 "solid" "red"))</tt> into the Definitions window and press Run.</li>
              <li>Type RedCircle into the Interactions window to see it appear!</li>
      	      <li>Define Twinkle to be an Image of a yellow star.</li>
      	      <li>Create an Image of your name and call it MyName.</li>
      	      <li>Define the number 42 to be TheAnswer.</li>
      	    </ol>
      	  </div> 
    	</li>

      	<li weSchemeConfig='(define letter1 (text "H" 40 "red"))
(define letter2 (text "I" 40 "blue"))
(beside letter1 letter2)'>
      	  <h1>9. Combining Images</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('C5zCFdSAHqA');">Watch Video</a></b>
          </div>
                
          Creating images is fun, but things really start to get interesting when we learn how to combine them!
      	  <p/>
      	  <div class="activity">Check out the provided code. What do you notice?<br/>Press Run to see what it does!</div>
          <p/>
          The <tt class="racket">beside</tt> function allows us to take two images and <b>create a new image</b> with the two images <b>beside</b> each other!
          <p/>
          Notice that you can still type <tt class="racket">letter1</tt> or <tt class="racket">letter2</tt> into the Interactions Area and press Enter to see the individual images.  We didn't change the original images, we created a new one!
          <p/>
          <div class="activity">Define two rectangles and combine them into a new image.
             <ol>
               <li><tt class="racket">RedRect</tt> should be a red, solid <tt class="racket">rectangle</tt> with length 20 and height 40.</li>
               <li><tt class="racket">BlueRect</tt> should be a blue, solid <tt class="racket">rectangle</tt> with length 20 and height 40.</li>
               <li>Use <tt class="racket">beside</tt> to place <tt class="racket">RedRect</tt> <i>beside</i> <tt class="racket">BlueRect</tt>.</li>
               <li>Use <tt class="racket">define</tt> to name this new shape <tt class="racket">SplitSquare</tt>.</li>
               <li>Just for fun, let's spin that square around! Use the code <tt class="racket">(rotate 45 SplitSquare)</tt> to turn the square 45 degrees!</li>
             </ol>
          </div>
         <p/>
         In addition to <tt class="racket">beside</tt>, there is similar function called <tt class="racket">above</tt>. 
         <p/> 
         <div class="activity">What do you expect this new function to do?  Use <tt class="racket">above</tt> to combine two shapes to create this image:<br/><img src="images/house.png"></div>
       </li>

      	<li weschemeConfig='(define OrangeStar (star 150 "solid" "orange"))
(define BlueSquare (square 250 "solid" "blue"))
(overlay OrangeStar BlueSquare)'>
      	  <h1>10. Layering Images</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('KJbLTe7osM8');">Watch Video</a></b>
          </div>

          In addition to placing images beside or above each other, we can <i>layer</i> images.  
      	  <div class="activity">Check out the provided code.  Make a prediction, then press Run to see what it does!</div>
          <p/>
          This new function <tt class="racket">overlay</tt> takes two images as an input, and places them one on top of another, lined up on the centers.
          <p/>
          <div class="activity">Create two images of your own and use <tt class="racket">overlay</tt> to combine them into one image. Remember, the top image must be smaller than the bottom image!</div>
          <p/>
        </li>

        <li weschemeConfig='(define OrangeStar (star 150 "solid" "orange"))
(define BlueSquare (square 250 "solid" "blue"))
(define StarSquare(overlay OrangeStar BlueSquare))'>
          <h1>11. Layering Multiple Images</h1>
          <div class="video">
            <b><a href="#" onclick="lightbox_open('_VDzeYzp56o');">Watch Video</a></b>
          </div>
            
          What if we want to layer more than two images?  Perhaps we'd like to add another star to our star-and-square image from before.
          <p/>
          <div class="activity">What happens if we try to combine three images using <tt class="racket">overlay</tt>, without breaking the contract?</div>
          <p/>
          The contract for <tt class="racket">overlay</tt> is:<br/>
          <tt class="racket">overlay : Image Image -> Image</tt>
          In the provided code, we've given the combined star-and-square image a new name - <tt class="racket">StarSquare</tt>. <br/>
          We combined two images into one, now we'll combine that image with another image!
          <p/>
          <div class="activity">
               Create a new image of a solid white star of radius 75 called <tt class="racket">WhiteStar</tt>.
               <p/>
               Use <tt class="racket">overlay</tt> to layer the white star you created on top of <tt class="racket">StarSquare</tt>.
          </div> 
          <p/>
          We combined two images into one, then combined that image with another image! 
          <div class="activity">
          Create: Can you create images of these flags using what you've learned?<br/>
          <ol>
           <li>The flag of Japan<br/><img src="images/japanflag.png"></li>
           <li>The flag of Switzerland<br/><img src="images/swissflag.png"></li>
           <li>The flag of Holland<br/><img src="images/hollandflag.png"></li>
          </ol>
          </div> 
          <div class="activity">Challenge: There is another way to 'overlay an overlay' with only one line of code.  Can you figure it out?</div>
        </li>

        <li weschemeConfig='(define PurpleRect (rectangle 300 250 "solid" "purple"))
(define WhiteStar (star 50 "solid" "white"))
(put-image WhiteStar 200 50 PurpleRect)'>
            <h1>12. Placing Images Using Coordinates</h1>
            <div class="video">
              <b><a href="#" onclick="lightbox_open('zbFNnahgae4');">Watch Video</a></b>
            </div>
            
            Maybe you want to place an image in a specific location on top of another image.  <tt class="racket">put-image</tt> allows you to do that!
            <p/>
            The four inputs that <tt class="racket">put-image</tt> needs are: <b>Image Number Number Image</b>.
            <p/>
            Try running the provided code.  What do you notice?
            <div class="activity">
              <ol>
                <li>The two numbers in the contract stand for the x- and y-coordinate of the first Image.<br/>What are the coordinates of the white star right now?</li>
                <li>Change the coordinates of the white star to move it up 50 pixels.</li>
                <li>Change the coordinates to make the star appear in the upper-left corner of the purple rectangle.</li>
                <li>Change one of the coordinates of the star to a negative number.  What happens?  Why?</li>
              <ol>
            </div>
        </li>

        <li weschemeConfig=''>
            <h1>13. Create!</h1>
            <b>Let's use what you've learned to create a flag!</b>
	    <p/>
            If you'd rather work in the full-sized WeScheme environment, <a href="http://www.wescheme.org" target="_blank">click here to open WeScheme in a new window!</a><br/>
            <p/>
            Is there a country you've always wanted to visit? Do you have family in another country? Or, would you rather create your own personal flag?  <b>Use what you've learned during this Hour of Code to create what you'd like!</b>
            <p/>
            We've included below a list of some of the functions we've used in this Hour to help you out. 
            If you'd like to save and share your image, you can right-click on it to save it to your computer.<br/>
            <b>Share your creation on social media!  Tag it with @BootstrapWorld on Twitter!</b>
            <p/>
            <div class="activity">
              Shapes
              <ol> 
                <li><tt class="racket">circle: Number String String -> Image</tt></li>
                <li><tt class="racket">rectangle: Number Number String String -> Image></tt></li>
		<li><tt class="racket">triangle: Number String String -> Image</tt></li>
		<li><tt class="racket">star: Number String String -> Image</tt></li>
		<li><tt class="racket">text: String Number String -> Image</tt></li>
	      </ol>
              <p/>
              Changing/Combining Images
              <ol>
		<li><tt class="racket">rotate: Number Image -> Image</tt></li>
		<li><tt class="racket">beside: Image Image -> Image</tt></li>
		<li><tt class="racket">above: Image Image -> Image</tt></li>
		<li><tt class="racket">overlay: Image Image -> Image</tt></li>
		<li><tt class="racket">put-image: Image Number Number Image -> Image</tt></li>
              </ol>
              <p/>
	      You can find out more by reading the <a href="http://www.bootstrapworld.org/materials/fall2015/courses/bs1/units/Supplemental/index.html#lesson_Making-Flags">Flags Lesson</a>.
            </div>
        </li>

        <li imageConfig="images/snowmanpuzzle.png">
            <h1>14. A Wintery Puzzle</h1>
            <div class="video">
              <b><a href="#" onclick="lightbox_open('aRbf0b76RPw');">Watch Video</a></b>
            </div>
            
            We've provided a <tt class="racket">put-image</tt> puzzle here for you to build a snowy scene!<br/>
            <a href="https://www.wescheme.org/openEditor?publicId=UgjYPyzBKZ" target="_blank">Click here to open it in a new window!</a><br/>
            Change the coordinates and press Run to move the different elements around!</br>
            Use what you've learned about creating images to <b>add your own elements to the scene!</b>
            <p/> 
            An Hour of Code is a great way to get started with programming, and we hope you've enjoyed it! But of course, there's so much more to explore when it comes to computer programming! If you'd like to do more of this kind of programming - especially in a math class - check out <a href="http://www.BootstrapWorld.org">Bootstrap</a> to learn how to make a video game using programming in your math class!
            <p/>
        </li>
      </ul>
    </div>
    
    <div id="righthand" class="embedded-wescheme"></div>
    <div id="footer">
      <a href="http://www.BootstrapWorld.org" style="color: white">Bootstrap</a> is brought to you by Jennifer Poole, Emmanuel Schanzer, Kathi Fisler, Shriram Krishnamurthi, Emma Youndtsmith, and Ed Campos. Special thanks to <a href="http://www.ProgramByDesign.org">Program by Design</a>.
    </div>
    <div id="light">
      <a class="boxclose" id="boxclose" onclick="lightbox_close();"></a>
      <iframe width="560" height="315" id="embedded_video"
              src="https://www.youtube.com/embed/rdL6S9SmcKo" 
              frameborder="0" 
              autoplay="true"
              allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
              allowfullscreen></iframe>
              <!----------
      <video id="embedded_video" width="600" controls>
          <source id="embedded_video_src" src="video/HoC-Video1.mp4" type="video/mp4">
        </video>
        --->
    </div>
    <div id="fade" onClick="lightbox_close();"></div>

  </body>
</html>