var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var build_utils_exports = {};
__export(build_utils_exports, {
  generateAssets: () => generateAssets,
  rustEditorVitePlugin: () => rustEditorVitePlugin
});
module.exports = __toCommonJS(build_utils_exports);
var import_fs = __toESM(require("fs"), 1);
var import_path = __toESM(require("path"), 1);
let generateAssets = ({ outDir, serverUrl }) => {
  let files = ["editor.worker.js", "ra-worker.js", "wasm_demo_bg.wasm"];
  files.forEach(
    (f) => import_fs.default.copyFileSync(
      import_path.default.join("node_modules/@wcrichto/rust-editor/dist", f),
      import_path.default.join(outDir, f)
    )
  );
  ["ra-worker"].forEach((name) => {
    let assetPath = import_path.default.join(outDir, `${name}.js`);
    let contents = import_fs.default.readFileSync(assetPath, "utf-8");
    contents = contents.replace(
      /import\.meta\.url/g,
      JSON.stringify(serverUrl + "/")
    );
    import_fs.default.writeFileSync(assetPath, contents);
  });
};
let rustEditorVitePlugin = ({ serverUrl }) => {
  let plugin = {
    writeBundle(options) {
      let outDir = options.dir;
      generateAssets({ outDir, serverUrl });
    }
  };
  return [
    plugin
    /* OMT() */
  ];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateAssets,
  rustEditorVitePlugin
});
