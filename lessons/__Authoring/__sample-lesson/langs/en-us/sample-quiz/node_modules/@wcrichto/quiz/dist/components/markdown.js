import React, { useEffect, useRef } from "react";
import { Markdown as Showdown } from "react-showdown";
import { renderIde, snippetToNode } from "./snippet";
let highlightExtension = (options) => ({
    type: "output",
    filter(text) {
        let parser = new DOMParser();
        let document = parser.parseFromString(text, "text/html");
        let snippets = document.querySelectorAll("pre > code");
        snippets.forEach(node => {
            if (node.classList.contains("ide"))
                return;
            let language = undefined;
            node.classList.forEach(cls => {
                let prefix = "language-";
                if (cls.startsWith(prefix)) {
                    language = cls.slice(prefix.length);
                }
            });
            let newNode = snippetToNode({
                ...(options || {}),
                snippet: node.textContent,
                language
            });
            let pre = node.parentNode;
            pre.replaceWith(newNode);
        });
        return document.body.innerHTML;
    }
});
export let MarkdownView = ({ markdown, snippetOptions }) => {
    let ref = useRef(null);
    useEffect(() => {
        renderIde(ref.current, snippetOptions);
        window.initAquascopeBlocks?.(ref.current);
    }, [markdown]);
    return (React.createElement("div", { ref: ref },
        React.createElement(Showdown, { markdown: markdown, extensions: [highlightExtension(snippetOptions)] })));
};
//# sourceMappingURL=markdown.js.map