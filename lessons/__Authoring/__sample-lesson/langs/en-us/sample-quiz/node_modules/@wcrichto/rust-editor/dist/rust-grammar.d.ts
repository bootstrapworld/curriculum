export namespace conf {
    namespace comments {
        let lineComment: string;
        let blockComment: string[];
    }
    let brackets: string[][];
    let autoClosingPairs: ({
        open: string;
        close: string;
        notIn?: undefined;
    } | {
        open: string;
        close: string;
        notIn: string[];
    })[];
    let surroundingPairs: {
        open: string;
        close: string;
    }[];
    namespace folding {
        namespace markers {
            let start: RegExp;
            let end: RegExp;
        }
    }
}
export namespace grammar {
    let keywords: string[];
    let controlFlowKeywords: string[];
    let typeKeywords: string[];
    let operators: string[];
    let symbols: RegExp;
    let escapes: RegExp;
    namespace tokenizer {
        let root: ((string | RegExp)[] | (RegExp | {
            cases: {
                '@typeKeywords': string;
                '@keywords': {
                    cases: {
                        fn: {
                            token: string;
                            next: string;
                        };
                        '@default': string;
                    };
                };
                '@controlFlowKeywords': string;
                '@default': string;
            };
        })[] | {
            include: string;
        } | (RegExp | {
            cases: {
                '@operators': string;
                '@default': string;
            };
        })[] | (RegExp | {
            token: string;
            log: string;
        })[] | (RegExp | {
            token: string;
            bracket: string;
            next: string;
        })[] | (RegExp | string[])[])[];
        let comment: (string | RegExp)[][];
        let string: ((string | RegExp)[] | (RegExp | {
            token: string;
            bracket: string;
            next: string;
        })[])[];
        let whitespace: (string | RegExp)[][];
        let func_decl: (string | RegExp)[][];
    }
}
