import classNames from "classnames";
import _ from "lodash";
import React, { useId } from "react";
import { MarkdownView } from "../components/markdown";
export let MultipleChoiceMethods = {
    PromptView: ({ prompt }) => (React.createElement(MarkdownView, { markdown: prompt.prompt, snippetOptions: { lineNumbers: true } })),
    questionState(prompt, answer) {
        let choices;
        let answers = Array.isArray(answer.answer)
            ? answer.answer
            : [answer.answer];
        if (prompt.answerIndex !== undefined) {
            choices = [...prompt.distractors];
            choices.splice(prompt.answerIndex, 0, ...answers);
        }
        else {
            choices = [...answers, ...prompt.distractors];
            if (prompt.sortAnswers) {
                choices = _.sortBy(choices);
            }
            else {
                choices = _.shuffle(choices);
            }
        }
        return { choices };
    },
    ResponseView: ({ answer, state, formValidators: { required, register } }) => (React.createElement(React.Fragment, null, state.choices.map((choice, i) => {
        let id = useId();
        let multiAnswer = Array.isArray(answer.answer);
        return (React.createElement("div", { className: "choice", key: i },
            React.createElement("input", { type: multiAnswer ? "checkbox" : "radio", ...(multiAnswer
                    ? register("answer", {
                        validate: args => args.length > 0
                    })
                    : required("answer")), value: choice, id: id }),
            React.createElement("label", { htmlFor: id },
                React.createElement(MarkdownView, { markdown: choice }))));
    }))),
    getAnswerFromDOM(data) {
        if (Array.isArray(data.answer))
            data.answer.sort();
        return { answer: data.answer };
    },
    compareAnswers(provided, user) {
        let toList = (s) => _.sortBy(Array.isArray(s) ? s : [s]);
        return _.isEqual(toList(provided.answer), toList(user.answer));
    },
    AnswerView: ({ answer, baseline }) => (React.createElement("div", { className: classNames("md-flex", MultipleChoiceMethods.compareAnswers(baseline, answer)
            ? "correct"
            : "incorrect") }, Array.isArray(answer.answer) ? (React.createElement("ul", null, answer.answer.map((a, i) => (React.createElement("li", { key: i },
        React.createElement(MarkdownView, { markdown: a })))))) : (React.createElement(MarkdownView, { markdown: answer.answer }))))
};
//# sourceMappingURL=multiple-choice.js.map