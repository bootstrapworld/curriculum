import classNames from "classnames";
import _ from "lodash";
import { action, toJS } from "mobx";
import { observer, useLocalObservable } from "mobx-react";
import hash from "object-hash";
import React, { useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from "react";
import { AnswerView, QuestionView, getQuestionMethods } from "../questions/mod";
class AnswerStorage {
    quizName;
    quizHash;
    constructor(quizName, quizHash) {
        this.quizName = quizName;
        this.quizHash = quizHash;
    }
    storageKey = () => `mdbook-quiz:${this.quizName}`;
    save(answers, confirmedDone, attempt, wrongAnswers) {
        let storedAnswers = {
            answers,
            confirmedDone,
            attempt,
            quizHash: this.quizHash,
            wrongAnswers
        };
        localStorage.setItem(this.storageKey(), JSON.stringify(storedAnswers));
    }
    load() {
        let storedAnswersJson = localStorage.getItem(this.storageKey());
        if (storedAnswersJson) {
            let storedAnswers = JSON.parse(storedAnswersJson);
            if (storedAnswers.quizHash === this.quizHash) {
                return storedAnswers;
            }
        }
    }
}
let ExitExplanation = ({ wrapperRef }) => {
    let [expanded, setExpanded] = useState(false);
    useEffect(() => {
        if (expanded) {
            wrapperRef.current.scrollTo({
                top: wrapperRef.current.offsetHeight,
                behavior: "smooth"
            });
        }
    }, [expanded]);
    return (React.createElement("div", { className: "exit-explanation" },
        React.createElement("div", { className: "trigger", onClick: () => setExpanded(!expanded) }, "Why is this quiz fullscreen?"),
        React.createElement("div", { style: { display: expanded ? "block" : "none" } }, "We want to know how much you are learning that can be recalled without assistance. Please complete the quiz without re-reading the text, e.g. by opening it in another tab.")));
};
let loadState = ({ quiz, answerStorage, cacheAnswers, autoStart }) => {
    let stored = answerStorage.load();
    // If an outdated quiz didn't store wrongAnswers, then we need to
    // clear that cache.
    // TODO: we should be able to remove this code eventually?
    let badSchema = stored &&
        stored.attempt > 0 &&
        !stored.confirmedDone &&
        !stored.wrongAnswers;
    if (cacheAnswers && stored && !badSchema) {
        return {
            started: true,
            index: quiz.questions.length,
            answers: stored.answers,
            // note: need to provide defaults if schema changes
            confirmedDone: stored.confirmedDone || false,
            attempt: stored.attempt || 0,
            wrongAnswers: stored.wrongAnswers ||
                (stored.attempt > 0 ? _.range(quiz.questions.length) : undefined)
        };
    }
    else {
        return {
            started: autoStart || false,
            index: 0,
            attempt: 0,
            confirmedDone: false,
            answers: []
        };
    }
};
let Header = observer(({ state, ended }) => {
    let { quiz } = useContext(QuizConfigContext);
    return (React.createElement("header", null,
        React.createElement("h3", null, "Quiz"),
        React.createElement("div", { className: "counter" }, state.started ? (!ended && (React.createElement(React.Fragment, null,
            "Question",
            " ",
            (state.attempt === 0
                ? state.index
                : state.wrongAnswers.indexOf(state.index)) + 1,
            " ",
            "/",
            " ",
            state.attempt === 0
                ? quiz.questions.length
                : state.wrongAnswers.length))) : (React.createElement(React.Fragment, null,
            quiz.questions.length,
            " question",
            quiz.questions.length > 1 && "s")))));
});
let AnswerReview = ({ state, nCorrect, onRetry, onGiveUp }) => {
    let { quiz, name } = useContext(QuizConfigContext);
    let confirm = !state.confirmedDone && (React.createElement("p", { style: { marginBottom: "1em" } },
        "You can either",
        " ",
        React.createElement("button", { type: "button", onClick: onRetry }, "retry the quiz"),
        " ",
        "or",
        " ",
        React.createElement("button", { type: "button", onClick: onGiveUp }, "see the correct answers"),
        "."));
    let questionTitles = generateQuestionTitles(quiz);
    return (React.createElement(React.Fragment, null,
        React.createElement("h3", null, "Answer Review"),
        React.createElement("p", null,
            "You answered",
            " ",
            React.createElement("strong", null,
                nCorrect,
                "/",
                quiz.questions.length),
            " ",
            "questions correctly."),
        confirm,
        quiz.questions.map((question, i) => {
            let { answer, correct } = state.answers[i];
            return (React.createElement("div", { className: "answer-wrapper", key: i },
                React.createElement(AnswerView, { index: i + 1, title: questionTitles[i], multipart: quiz.multipart, quizName: name, question: question, userAnswer: answer, correct: correct, showCorrect: state.confirmedDone })));
        }),
        confirm));
};
export let useCaptureMdbookShortcuts = (capture) => {
    useLayoutEffect(() => {
        if (capture) {
            let captureKeyboard = (e) => e.stopPropagation();
            let captureTouchscreen = (e) => {
                e.preventDefault();
                e.stopPropagation();
                return false;
            };
            // This gets added specifically to document.documentElement rather than document
            // so bubbling events will hit this listener before ones added via document.addEventListener(...).
            // All of the problematic mdBook interactions are created that way, so we ensure that
            // the keyboard event does not propagate to those listeners.
            //
            // However, some widgets like Codemirror require keydown events but on local elements.
            // So we can't just stopPropagation in the capture phase, or those widgets will break.
            // This is the compromise!
            document.documentElement.addEventListener("keydown", captureKeyboard, false);
            // Same thing but for touch events, so the screen beneath isn't scrolled.
            document.documentElement.addEventListener("touchmove", captureTouchscreen, false);
            return () => {
                document.documentElement.removeEventListener("keydown", captureKeyboard, false);
                document.documentElement.removeEventListener("touchmove", captureTouchscreen);
            };
        }
    }, [capture]);
};
export let QuizConfigContext = React.createContext(null);
let aCode = "a".charCodeAt(0);
export let generateQuestionTitles = (quiz) => {
    let groups = [];
    let group = undefined;
    let part = undefined;
    quiz.questions.forEach(q => {
        if (q.multipart) {
            if (q.multipart === part) {
                group.push(q);
            }
            else {
                group = [q];
                groups.push(group);
            }
            part = q.multipart;
        }
        else {
            group = [q];
            groups.push(group);
        }
    });
    return groups.flatMap((g, i) => g.map((q, j) => {
        let title = (i + 1).toString();
        if (q.multipart)
            title += String.fromCharCode(aCode + j);
        return title;
    }));
};
export let QuizView = observer(({ onFinish, ...config }) => {
    let [quizHash] = useState(() => hash.MD5(config.quiz));
    let answerStorage = new AnswerStorage(config.name, quizHash);
    let questionStates = useMemo(() => config.quiz.questions.map(q => {
        let methods = getQuestionMethods(q.type);
        return methods.questionState?.(q.prompt, q.answer);
    }), [config.quiz]);
    let state = useLocalObservable(() => loadState({
        quiz: config.quiz,
        answerStorage,
        cacheAnswers: config.cacheAnswers,
        autoStart: config.autoStart
    }));
    let saveToCache = () => {
        if (config.cacheAnswers)
            answerStorage.save(state.answers, state.confirmedDone, state.attempt, state.wrongAnswers);
    };
    // Don't allow any keyboard inputs to reach external listeners
    // while the quiz is active (e.g. to avoid using the search box).
    let ended = state.index === config.quiz.questions.length;
    let inProgress = state.started && !ended;
    useCaptureMdbookShortcuts(inProgress);
    // Restore the user's scroll position after leaving fullscreen mode
    let [lastTop, setLastTop] = useState();
    let showFullscreen = inProgress && (config.fullscreen ?? false);
    useLayoutEffect(() => {
        document.body.style.overflowY = showFullscreen ? "hidden" : "auto";
        if (showFullscreen) {
            setLastTop(window.scrollY + 100);
        }
        else if (config.fullscreen && lastTop !== undefined) {
            window.scrollTo(0, lastTop);
        }
    }, [showFullscreen]);
    let onSubmit = action((answer) => {
        answer = _.cloneDeep(answer);
        if (state.attempt === 0) {
            state.answers.push(answer);
            state.index += 1;
        }
        else {
            state.answers[state.index] = answer;
            let wrongAnswerIdx = state.wrongAnswers.findIndex(n => n === state.index);
            if (wrongAnswerIdx === state.wrongAnswers.length - 1)
                state.index = config.quiz.questions.length;
            else
                state.index = state.wrongAnswers[wrongAnswerIdx + 1];
        }
        window.telemetry?.log("answers", {
            quizName: config.name,
            quizHash,
            answers: state.answers,
            attempt: state.attempt
        });
        if (state.index === config.quiz.questions.length) {
            let wrongAnswers = state.answers
                .map((a, i) => ({ a, i }))
                .filter(({ a }) => !a.correct);
            if (wrongAnswers.length === 0 || !config.allowRetry) {
                state.confirmedDone = true;
            }
            else {
                state.wrongAnswers = wrongAnswers.map(({ i }) => i);
            }
            saveToCache();
            onFinish?.(toJS(state.answers));
        }
    });
    let nCorrect = state.answers.filter(a => a.correct).length;
    // HACK: need this component to observe confirmedDone
    // on first render...
    state.confirmedDone;
    let questionTitles = generateQuestionTitles(config.quiz);
    let body = (React.createElement("section", null, state.started ? (ended ? (React.createElement(AnswerReview, { state: state, nCorrect: nCorrect, onRetry: action(() => {
            state.index = state.wrongAnswers[0];
            state.attempt += 1;
        }), onGiveUp: action(() => {
            state.confirmedDone = true;
            saveToCache();
        }) })) : (React.createElement(QuestionView, { key: state.index, multipart: config.quiz.multipart, index: state.index, title: questionTitles[state.index], attempt: state.attempt, question: config.quiz.questions[state.index], questionState: questionStates[state.index], onSubmit: onSubmit }))) : (React.createElement("button", { type: "button", className: "start", onClick: action(() => {
            state.started = true;
        }) }, "Start"))));
    let wrapperClass = classNames("mdbook-quiz-wrapper", {
        expanded: showFullscreen
    });
    let onExit = action(() => {
        state.started = false;
        state.index = 0;
        state.answers = [];
    });
    let exitButton = (React.createElement("div", { className: "exit", onClick: onExit }, "\u2715"));
    let wrapperRef = useRef();
    return (React.createElement(QuizConfigContext.Provider, { value: config },
        React.createElement("div", { ref: wrapperRef, className: wrapperClass },
            React.createElement("div", { className: "mdbook-quiz" },
                showFullscreen && (React.createElement(React.Fragment, null,
                    exitButton,
                    React.createElement(ExitExplanation, { wrapperRef: wrapperRef }))),
                React.createElement(Header, { state: state, ended: ended }),
                body))));
});
//# sourceMappingURL=quiz.js.map