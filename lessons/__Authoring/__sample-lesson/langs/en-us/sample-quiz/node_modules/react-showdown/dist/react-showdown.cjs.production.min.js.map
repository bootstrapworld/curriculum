{"version":3,"file":"react-showdown.cjs.production.min.js","sources":["../src/MarkdownView.tsx","../src/index.tsx"],"sourcesContent":["import React, {\n  createElement,\n  useMemo,\n  ClassType,\n  FunctionComponent,\n  ReactNode,\n  ReactElement,\n  HTMLAttributes,\n} from 'react';\nimport {\n  Converter,\n  ConverterOptions,\n  Flavor,\n  ShowdownExtension,\n} from 'showdown';\nimport * as htmlparser from 'htmlparser2';\nimport { Node, Element, DataNode } from 'domhandler';\n\nexport interface MarkdownViewProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'dangerouslySetInnerHTML'> {\n  dangerouslySetInnerHTML?: boolean;\n  flavor?: Flavor;\n  markdown: string;\n  sanitizeHtml?: (html: string) => string;\n  markup?: string;\n  options?: ConverterOptions;\n  extensions?: ShowdownExtension[];\n  components?: Record<\n    string,\n    ClassType<never, never, never> | FunctionComponent<any>\n  >;\n}\n\nexport default function MarkdownView(props: MarkdownViewProps): ReactElement {\n  const {\n    dangerouslySetInnerHTML,\n    flavor,\n    markdown,\n    markup,\n    options,\n    extensions,\n    components,\n    sanitizeHtml,\n    ...otherProps\n  } = props;\n\n  const mapElement = useMemo(\n    () =>\n      function mapElement(node: Node, index: number): ReactNode {\n        if (node.type === 'tag' && node instanceof Element) {\n          const elementType = components?.[node.name] || node.name;\n          const props: Record<string, any> = { key: index, ...node.attribs };\n\n          // Rename class to className to hide react warning\n          if (props.class && !props.className) {\n            props.className = props.class;\n            delete props.class;\n          }\n\n          // Map style strings to style objects\n          if (typeof props.style === 'string') {\n            const styles: Record<string, any> = {};\n            props.style.split(';').forEach(style => {\n              if (style.indexOf(':') !== -1) {\n                let [key, value] = style.split(':');\n                key = key\n                  .trim()\n                  .replace(/-([a-z])/g, match => match[1].toUpperCase());\n                value = value.trim();\n                styles[key] = value;\n              }\n            });\n            props.style = styles;\n          }\n\n          const children = skipAnyChildrenFor.includes(node.name)\n            ? null\n            : skipWhitespaceElementsFor.includes(node.name)\n            ? node.children.filter(filterWhitespaceElements).map(mapElement)\n            : node.children.map(mapElement);\n          return createElement(elementType, props, children);\n        } else if (node.type === 'text' && node instanceof DataNode) {\n          return node.data;\n        } else if (node.type === 'comment') {\n          return null; // noop\n        } else if (node.type === 'style' && node instanceof Element) {\n          const props: Record<string, any> = { key: index, ...node.attribs };\n          const children = node.children.map(mapElement);\n          return createElement('style', props, children);\n        } else {\n          console.warn(\n            `Warning: Could not map element with type \"${node.type}\".`,\n            node\n          );\n          return null;\n        }\n      },\n    [components]\n  );\n\n  if (dangerouslySetInnerHTML && components) {\n    console.warn(\n      'MarkdownView could not render custom components when dangerouslySetInnerHTML is enabled.'\n    );\n  }\n\n  const converter = new Converter();\n  if (flavor) {\n    converter.setFlavor(flavor);\n  }\n  if (options) {\n    for (const key in options) {\n      if (key === 'extensions' && options.extensions) {\n        for (const extension of options.extensions) {\n          if (typeof extension === 'string') {\n            converter.useExtension(extension);\n          } else {\n            converter.addExtension(extension);\n          }\n        }\n      }\n      converter.setOption(key, options[key]);\n    }\n  }\n  if (extensions) {\n    converter.addExtension(extensions);\n  }\n\n  let html = converter.makeHtml(markdown ?? markup);\n  if (sanitizeHtml) {\n    html = sanitizeHtml(html);\n  }\n\n  if (dangerouslySetInnerHTML) {\n    return <div dangerouslySetInnerHTML={{ __html: html }} />;\n  }\n\n  const root = htmlparser.parseDOM(html, {\n    // Don't change the case of parsed html tags to match inline components.\n    lowerCaseTags: false,\n    // Don't change the attribute names so that stuff like `className` works correctly.\n    lowerCaseAttributeNames: false,\n    // Encode entities automatically, so that &copy; and &uuml; works correctly.\n    decodeEntities: true,\n    // Fix issue with content after a self closing tag.\n    recognizeSelfClosing: true,\n  });\n\n  return createElement('div', otherProps, root.map(mapElement));\n}\n\n// Match react-dom omittedCloseTags. See also:\n// https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/omittedCloseTags.js\nconst skipAnyChildrenFor = [\n  'area',\n  'br',\n  'col',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'param',\n  'source',\n  'track',\n  'wbr',\n];\n\nconst skipWhitespaceElementsFor = ['table', 'thead', 'tbody', 'tr'];\n\nfunction filterWhitespaceElements(node: Node) {\n  if (node.type === 'text' && node instanceof DataNode) {\n    return node.data.trim().length > 0;\n  } else {\n    return true;\n  }\n}\n","import {\n  // Flavors\n  setFlavor,\n  getFlavor,\n\n  // Options\n  setOption,\n  getOption,\n  getOptions,\n  resetOptions,\n\n  // Extensions\n  extension,\n  getAllExtensions,\n  removeExtension,\n  resetExtensions,\n  ShowdownExtension,\n} from 'showdown';\n\nimport MarkdownView from './MarkdownView';\n\nexport default MarkdownView;\nexport const Markdown = MarkdownView;\n\nexport { MarkdownViewProps } from './MarkdownView';\n\nexport { Flavor, ShowdownExtension } from 'showdown';\n\nconst setExtension: (\n  name: string,\n  ext:\n    | (() => ShowdownExtension[] | ShowdownExtension)\n    | ShowdownExtension[]\n    | ShowdownExtension\n) => void = extension;\nconst getExtension: (name: string) => ShowdownExtension[] = extension;\n\nexport const GlobalConfiguration = {\n  // Flavors,\n  setFlavor,\n  getFlavor,\n\n  // Options\n  setOption,\n  getOption,\n  getOptions,\n  resetOptions,\n\n  // Extensions\n  setExtension,\n  getExtension,\n  getAllExtensions,\n  removeExtension,\n  resetExtensions,\n};\n"],"names":["MarkdownView","props","dangerouslySetInnerHTML","flavor","markdown","markup","options","extensions","components","sanitizeHtml","otherProps","mapElement","useMemo","node","index","type","Element","elementType","name","key","attribs","className","style","styles","split","forEach","indexOf","value","trim","replace","match","toUpperCase","children","skipAnyChildrenFor","includes","skipWhitespaceElementsFor","filter","filterWhitespaceElements","map","createElement","DataNode","data","console","warn","converter","Converter","setFlavor","extension","useExtension","addExtension","setOption","html","makeHtml","React","__html","root","htmlparser","lowerCaseTags","lowerCaseAttributeNames","decodeEntities","recognizeSelfClosing","length","Markdown","getFlavor","getOption","getOptions","resetOptions","setExtension","getExtension","getAllExtensions","removeExtension","resetExtensions"],"mappings":"kvCAiCwBA,EAAaC,OAEjCC,EASED,EATFC,wBACAC,EAQEF,EARFE,OACAC,EAOEH,EAPFG,SACAC,EAMEJ,EANFI,OACAC,EAKEL,EALFK,QACAC,EAIEN,EAJFM,WACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,aACGC,qIACDT,+GAEEU,EAAaC,WACjB,kBACE,SAASD,EAAWE,EAAYC,MACZ,QAAdD,EAAKE,MAAkBF,aAAgBG,UAAS,KAC5CC,GAAcT,MAAAA,SAAAA,EAAaK,EAAKK,QAASL,EAAKK,KAC9CjB,KAA+BkB,IAAKL,GAAUD,EAAKO,YAGrDnB,UAAgBA,EAAMoB,YACxBpB,EAAMoB,UAAYpB,eACXA,SAIkB,iBAAhBA,EAAMqB,MAAoB,KAC7BC,EAA8B,GACpCtB,EAAMqB,MAAME,MAAM,KAAKC,SAAQ,SAAAH,OACD,IAAxBA,EAAMI,QAAQ,KAAa,OACVJ,EAAME,MAAM,KAA1BL,OAAKQ,OACVR,EAAMA,EACHS,OACAC,QAAQ,aAAa,SAAAC,UAASA,EAAM,GAAGC,iBAC1CJ,EAAQA,EAAMC,OACdL,EAAOJ,GAAOQ,MAGlB1B,EAAMqB,MAAQC,MAGVS,EAAWC,EAAmBC,SAASrB,EAAKK,MAC9C,KACAiB,EAA0BD,SAASrB,EAAKK,MACxCL,EAAKmB,SAASI,OAAOC,GAA0BC,IAAI3B,GACnDE,EAAKmB,SAASM,IAAI3B,UACf4B,gBAActB,EAAahB,EAAO+B,GACpC,GAAkB,SAAdnB,EAAKE,MAAmBF,aAAgB2B,kBAC1C3B,EAAK4B,KACP,GAAkB,YAAd5B,EAAKE,YACP,KACF,GAAkB,UAAdF,EAAKE,MAAoBF,aAAgBG,UAAS,KACrDf,KAA+BkB,IAAKL,GAAUD,EAAKO,SACnDY,EAAWnB,EAAKmB,SAASM,IAAI3B,UAC5B4B,gBAAc,QAAStC,EAAO+B,UAErCU,QAAQC,kDACuC9B,EAAKE,UAClDF,GAEK,QAGb,CAACL,IAGCN,GAA2BM,GAC7BkC,QAAQC,KACN,gGAIEC,EAAY,IAAIC,eAClB1C,GACFyC,EAAUE,UAAU3C,GAElBG,MACG,IAAMa,KAAOb,EAAS,IACb,eAARa,GAAwBb,EAAQC,yBACVD,EAAQC,2BAAY,KAAjCwC,UACgB,iBAAdA,EACTH,EAAUI,aAAaD,GAEvBH,EAAUK,aAAaF,GAI7BH,EAAUM,UAAU/B,EAAKb,EAAQa,IAGjCZ,GACFqC,EAAUK,aAAa1C,OAGrB4C,EAAOP,EAAUQ,SAAShD,MAAAA,EAAAA,EAAYC,MACtCI,IACF0C,EAAO1C,EAAa0C,IAGlBjD,SACKmD,uBAAKnD,wBAAyB,CAAEoD,OAAQH,SAG3CI,EAAOC,WAAoBL,EAAM,CAErCM,eAAe,EAEfC,yBAAyB,EAEzBC,gBAAgB,EAEhBC,sBAAsB,WAGjBrB,gBAAc,MAAO7B,EAAY6C,EAAKjB,IAAI3B,IAKnD,IAAMsB,EAAqB,CACzB,OACA,KACA,MACA,QACA,KACA,MACA,QACA,SACA,QACA,SACA,QACA,OAGIE,EAA4B,CAAC,QAAS,QAAS,QAAS,MAE9D,SAASE,EAAyBxB,WACd,SAAdA,EAAKE,MAAmBF,aAAgB2B,aACnC3B,EAAK4B,KAAKb,OAAOiC,OAAS,MCtJxBC,EAAW9D,8BAeW,CAEjC8C,UAAAA,YACAiB,UAAAA,YAGAb,UAAAA,YACAc,UAAAA,YACAC,WAAAA,aACAC,aAAAA,eAGAC,aAfUpB,YAgBVqB,aAf0DrB,YAgB1DsB,iBAAAA,mBACAC,gBAAAA,kBACAC,gBAAAA"}