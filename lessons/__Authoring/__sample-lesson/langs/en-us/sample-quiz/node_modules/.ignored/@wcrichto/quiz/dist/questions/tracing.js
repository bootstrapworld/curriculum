import classNames from "classnames";
import React, { useId, useState } from "react";
// import { MoreInfo } from "../components/more-info";
import { Snippet } from "../components/snippet";
// let HELP_TEXT = `Errors may involve multiple line numbers. For example:
// \`\`\`
// let mut x = 1;
// let y = &x;
// let z = &mut x;
// *z = *y;
// \`\`\`
// Here, lines 2, 3, and 4 all interact to cause a compiler error.
// To resolve this ambiguity, you should mark the _last_ line which is involved in the error.
// Here, that would be line 4. (Since without line 4, this program would compile!)
// `;
export let TracingMethods = {
    PromptView: ({ prompt }) => (React.createElement(React.Fragment, null,
        React.createElement("p", null, "Determine whether the program will pass the compiler. If it passes, write the expected output of the program if it were executed."),
        React.createElement(Snippet, { snippet: prompt.program, lineNumbers: true }))),
    ResponseView: ({ 
    // prompt,
    formValidators: { required, formState: { errors } } }) => {
        let [doesCompile, setDoesCompile] = useState(undefined);
        // let lineNumbers = _.range(prompt.program.trim().split("\n").length).map(
        //   i => i + 1
        // );
        let [doesCompileTrueId, doesCompileFalseId] = [useId(), useId()];
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: "response-block" },
                "This program:",
                " ",
                React.createElement("span", { className: classNames("option", { error: errors.doesCompile }) },
                    React.createElement("input", { type: "radio", ...required("doesCompile"), id: doesCompileTrueId, value: "true", onClick: () => setDoesCompile(true) }),
                    " ",
                    React.createElement("label", { htmlFor: doesCompileTrueId }, "DOES compile")),
                React.createElement("span", { className: "option-separator" }, "OR"),
                React.createElement("span", { className: classNames("option", { error: errors.doesCompile }) },
                    React.createElement("input", { type: "radio", ...required("doesCompile"), id: doesCompileFalseId, value: "false", onClick: () => setDoesCompile(false) }),
                    " ",
                    React.createElement("label", { htmlFor: doesCompileFalseId }, "does NOT compile"))),
            doesCompile !== undefined && doesCompile && (React.createElement("div", null,
                React.createElement("p", null, "The output of this program will be:"),
                React.createElement("textarea", { ...required("stdout"), placeholder: "Write the program's stdout here..." })) /*<div>
            <p>
              The error occurs on the line number:{" "}
              <select {...required("lineNumber")}>
                <option value="">Select...</option>
                {lineNumbers.map((n, i) => (
                  <option key={i} value={n}>
                    Line {n}
                  </option>
                ))}
              </select>
              &nbsp;&nbsp;
              <MoreInfo markdown={HELP_TEXT} />
            </p>
          </div>*/)));
    },
    getAnswerFromDOM(data) {
        let doesCompile = data.doesCompile === "true";
        if (doesCompile) {
            let stdout = data.stdout;
            return { doesCompile, stdout };
        }
        else {
            return { doesCompile };
        }
    },
    AnswerView: ({ answer, baseline }) => {
        let correctnessClass = (key) => answer[key] === baseline[key] ? "correct" : "incorrect";
        return (React.createElement("div", null,
            React.createElement("p", { className: correctnessClass("doesCompile") },
                "This program",
                " ",
                React.createElement("strong", null, answer.doesCompile ? "does" : "does not"),
                " compile."),
            answer.doesCompile ? (React.createElement(React.Fragment, null,
                React.createElement("p", { className: baseline.stdout &&
                        answer.stdout.trim() === baseline.stdout.trim()
                        ? "correct"
                        : "incorrect" }, "The output of this program will be:"),
                React.createElement("pre", null, answer.stdout))) : /*<p className={correctnessClass("lineNumber")}>
                The last line number in the error is:{" "}
                <code>{answer.lineNumber}</code>
              </p>*/
                null));
    },
    compareAnswers(providedAnswer, userAnswer) {
        let clean = (s) => s.trim();
        return (providedAnswer.doesCompile === userAnswer.doesCompile &&
            (providedAnswer.doesCompile
                ? clean(userAnswer.stdout) === clean(providedAnswer.stdout)
                : true)
        // : userAnswer.lineNumber! == providedAnswer.lineNumber!)
        );
    }
};
//# sourceMappingURL=tracing.js.map