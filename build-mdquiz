#! /bin/bash

# Make sure we're on a recent make
make

# index.html for the assessment page,
# which loads the quiz and displays it
indexHTML='<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module">
        import buildQuiz from "./lib.js";
        import quizConfig from "./quiz.json?raw" with {type: "json"};
        buildQuiz('root', quizConfig)
    </script>
  </body>
</html>'

# Given a list of assessment directories, replace
# the index.html file with a fresh one and
# add the mdquiz JS file
for d in $(find distribution -type d -name assessments); do
  for dd in $d/*; do
    if test -d $dd; then
      echo "$indexHTML" > $dd/index.html
      cp -pu node_modules/mdquiz/dist/lib.js $dd/
    fi
  done
done

 if [[ " $* " == *" --clean "* ]]; then
   exit 0
 fi

echo ➤ Checking jsons

JQ=$(which jq)

if test -n "$JQ"; then
  for jf in distribution/*/lessons/*/assessments/*/*.json; do
    cat $jf | $JQ -e >/dev/null 2>&1 && continue
    echo $jf is invalid JSON!
  done
  echo Please fix JSON files first!
  exit 1
fi

echo ➤ Building quizzes

outputf=.tmp.build-mdquiz.txt

node --input-type=module -e '
import react from "@vitejs/plugin-react"
import { defineConfig, build } from "vite"
import { viteSingleFile } from "vite-plugin-singlefile"
import { viteStaticCopy } from "vite-plugin-static-copy"
import { glob } from "glob"
import { readFileSync} from "fs"

const quizzes = glob.sync("distribution/*/lessons/*/assessments/*");
const imageTypes = ["svg", "gif", "jpg", "png", "svg"];

// create the JSON objects for each of our quizzes
const buildConfigs = quizzes.map( quiz => ({
  plugins: [
    react(),
    viteSingleFile(),
  ],
  build: {
    logLevel: "silent",
    root: "distribution",
    minify: false,
    outDir: "./",
    emptyOutDir: false,
    onConsoleLog(log) {
      return "@"+log
    },
    rollupOptions: {
      input: quiz+"/index.html",
    }
  }
}));

//console.log(JSON.stringify(buildConfigs, null, 2))

// wait until all of the builds are complete
await Promise.all(buildConfigs.map( async c => await build(c)));

for (const filePath of quizzes) {
    const fileContent = fs.readFileSync(filePath + "/quiz.json", "utf-8");
    try {
      JSON.parse(fileContent);
      } catch (e) {
        console.error("The quiz.json file inside", filePath, "is not valid JSON!");
      }
}
' > $outputf 2>&1

RED='\033[0;31m'
NC='\033[0m' # No Color

phrase="✗ Build failed"

if ! grep "$phrase" $outputf; then
  echo All quizzes were built successfully!
else
  n=$(grep -n "$phrase" $outputf|head -1|cut -d: -f1)
  n=$((n + 1))
  echo ${RED}✗ Build failed${NC}
  tail -n +$n $outputf
fi
